>>>Fishrock123, Owner


This is my conclusion from #1592 (comment).



;##D1 It is unreasonable to require a module for existsSync()
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

A significant amount of people find specifically existsSync() useful (especially in simple CLI apps) and it seems unreasonable to require a module for this. Keep exists() deprecated as it breaks our errback API convention.

;##D2 The problem that arises with existsSync() is that it won't work on Windows with improper permissions
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D1
;##SEN NEU
This commit makes existsSync() throw on EPERM. The technical problem with existsSync() (besides a race condition if used badly) is that you cannot know if a file does or doesn't exist under Windows with improper permissions.
Throwing in that case really isn't that bad of an idea, since the regular output will probably cause errors anyways down the line, and I don't think these errors can be remedied from Node.js. Instead, error so the end user can clean up their file permissions. Catching this error in user code isn't really worthwhile due to these reasons, so suggest against it.


Discuss. cc @nodejs/collaborators


>>>cjihrig, Owner


I'm in favor of keeping existsSync(). People screamed to have it deprecated, and then even more people screamed to keep it.



;##D3 existsSync() should not throw an exception
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D2
;##SEN NEW

I'm not in favor of having it throw, because at that point you could just use fs.accessSync(). I don't really like the idea of "don't catch the error."


>>>Fishrock123, Owner




I'm not in favor of having it throw, because at that point you could just use fs.accessSync().




You can't though. You can't "just use accessSync()" if the code happens to be run on windows, that's awful.




I don't really like the idea of "don't catch the error."




I think the current behavior is actually worse.


>>>targos, Owner


I'm not sure I understand what is the difference with the EPERM error on Windows and EACCESS on UNIX.


>>>cjihrig, Owner



;##D4 Having existsSync throw an exception would be a breaking change for a heavily used API
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D3
;##SEN NEU

Isn't one of the biggest gripes about getting rid of existsSync() that it gives them a simple Boolean response? Throwing is also a breaking change on a heavily used API. You could argue that it's a bug fix, but I think people will still yell loudly.


>>>Fishrock123, Owner




Isn't one of the biggest gripes about getting rid of existsSync() that it gives them a simple Boolean response?




No, it's that the others require excess options and stuff.



;##D5 Ideally existsSync() should return true or an error
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D3
;##SEN NEU

Ideally, existsSync() would return true or an error, but that ship has sailed long ago.


>>>Fishrock123, Owner




I'm not sure I understand what is the difference with the EPERM error on Windows and EACCESS on UNIX.




@targos hmmm, I'm not really sure? As far as I can tell you can have an EPERM both if the file does and doesn't exist, is that also the case for EACCESS? The only difference then would be I don't think you can fix an EPERM from within the node apis.


>>>cjihrig, Owner




No, it's that the others require excess options and stuff.




What excessive options? fs.accessSync() defaults to checking if a file exists, and fs.statSync() only takes the path as an argument.


>>>targos, Owner


@Fishrock123


Take this example:




For the last call, the a/b file still exists but i cannot know that because of the EACCESS error on a.


>>>Fishrock123, Owner


Sorry, It's that for accessSync() and statSync() you need to wrap them in try/{catch|finally}.


Maybe this isn't really an issue, idk.


>>>ChALkeR, Owner



;##D6 Adding a throw to a method not throwing is a semver major change
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D4
;##SEN NEU

Adding a thow in a place that wasn't throwing before is a semver-major change.


>>>ChALkeR, Owner




@targos hmmm, I'm not really sure? As far as I can tell you can have an EPERM both if the file does and doesn't exist, is that also the case for EACCESS?




It definitely is, and not on Windows-only. There are more cases where you can't be sure if a file exists or not, the most simple of them being:





The above result is equivalent in case when /root/x exists and when it doesn't.


There are also other cases when you can't be sure if the file exists or not, for example remote mounts, fuse-whatever, etc.


>>>ChALkeR, Owner


To correspond with it's name, the function existsSync should have been doing something like this:





with a corresponding fs.exists method that would call callback(err, result), where result is true/false/undefined (in case of an error).


But that would break existng code very badly.
Overall, I am inclined to -1 on this change.


>>>saghul, Member


FWIW, I'm -1 on the change. If there is anything we can improve in the libuv layer (we emulate access(2) on Windows after all)  in order to behave more consistently with Unix, give a shout at libuv/libuv.


>>>jasnell, Owner


I'm generally +-0 on this change but willing to defer to @saghul and @bnoordhuis' judgement on it.


>>>Fishrock123, Owner



;##D7 What's the opinion on undeprecating it?
;##ROLE OP
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

Is anyone positive for undeprecating it and leaving it;s functionality?



;##D8 Should EACESS/EPERM just say that the file exists?
;##ROLE OP
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

Should EACCESS or EPERM just say the file exists? Saying it doesn't actually seems less correct in most cases?


>>>saghul, Member


@Fishrock123 see the example here #4077 (comment)


There is no data to say it exists or it doesn't.


>>>Fishrock123, Owner




There is no data to say it exists or it doesn't.




Which is why I suggested for it to throw, because neither answer is correct. On second thought, I guess leaving it alone otherwise is fine-ish.


>>>saghul, Member




Which is why I suggested for it to throw, because neither answer is correct. On second thought, I guess leaving it alone otherwise is fine-ish.





;##D9 If existsSync would throw, what would be the advantage over accessSync?
;##ROLE PM
;##INV T
;##BCOM T
;##FORM OPQ
;##REL GEN D3
;##SEN NEU

If existsSync is going to throw then what's the advantage over accessSync?


I don't think there is a silver bullet here. Some say that are only interested in knowing if a file exists, but we can't really give an answer to that if the containing directory doesn't have the right permissions.


>>>domenic, Member




Some say that are only interested in knowing if a file exists, but we can't really give an answer to that if the containing directory doesn't have the right permissions.




Exactly. This is why I'm in favor of the status quo, of keeping it deprecated.



;##D10 An option would be to introduce a canAccessSync boolean method instead
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

If the main complaint is really about having to use try/catch, we could consider introducing a fs.canAccessSync(path[, mode]) that returns true/false.


We could also explain the above in the documentation for why it is deprecated.


>>>sam-github, Member



;##D11 Changing API behaviour while keeping the same name is a bad idea
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

Please don't change the API behaviour and keep the same name. Right now, I can write portable code by looking for access, and if its not there, I can use exists. If there are two versions of exists, then I'll actually need to include node-semver, and check the node version to see what its API is, or perhaps construct some more complex code. Though, frankly, I'm sometimes just using neither (edit: neither exists or access), replacing them with stat, which works on all node versions, and my CLIs usually only want rough checks for existence, such as: use the first dir that exists of A or B to store the data files.


I'm OK with deprecating and then deleting APIs we don't like, or that don't match node convention. It makes node better in the long run. If we need something slightly different from access, because access is insufficiently like exists on some platforms, then I suggest proposing a new fs API to do that, with a new name.


>>>trevnorris, Contributor


I'm +1 for @domenic's API concept. More explicit and predictable. There's been a lot of argument over what "exists" means, while it is much easier to define "accessible".


>>>Fishrock123, Owner


Proposal


fs.accessErrorSync(path, [mode]) -- returns undefined if there is no error (i.e. file is accessible), or an Error if there is one.


Question: Would we accept that in core?


>>>domenic, Member



;##D12 Can this solve problems even without having a boolean value?
;##ROLE PM
;##INV T
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

Does it really solve people's problems? My understanding is they want a boolean return value.


>>>Fishrock123, Owner




My understanding is they want a boolean return value.





;##D13 No, but this could be used in a boolean check
;##ROLE OP
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D12
;##SEN NEu

I still don't really think that's adequate, but this can be used in a boolean check if needed, or check the error if desired.


>>>trevnorris, Contributor


I think the point of the access check is, is it accessible or isn't it. don't see what an error would need to convey.


>>>Fishrock123, Owner


Hmmm, thinking about it again, I don't think people care that much about accessible, but more if a file exists.


I.e. Does any config exist yet, or should we make a new one? If it exists there, but isn't accessible, you can't say it doesn't exist or the program will probably break.


>>>bnoordhuis, Owner


Bad example.  In that case you'd open the config file with 'wx' to make sure it's newly created.


Or maybe it's a great example of why fs.existsSync() should stay deprecated. :-)


>>>amb26, Contributor


+1 for undeprecating existsSync. I am interested in the intention, expressed via the presence of a file in the filesystem, that it should be processed - summarised as a simple boolean that doesn't require me to treat its presence or absence as "exceptional". I think we're all familiar with the recommendation not to use exceptions for normal program control flow. Whether later FS operations on the file end up throwing, as a result of a permissions/access failure, or a race condition that removed it in the intervening time, is absolutely fine with me - that condition then is exceptional.



;##D14 Is okay for exsistsSync to throw
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D3
;##SEN NEU

If exists/existsSync throws early if it can detect one of those exceptional conditions I really don't mind. Also whether it returns a genuine boolean or simply a truthy/falsy value I also really don't mind. fs.accessErrorSync solves a problem I don't have. I, and I think thousands of others, feel that there's absolutely nothing problematic with the definition of whether a file "exists" or not. I think we are perfectly happy with the fact that the mere existence of a file at a particular point in time provides no guarantees that anything can actually be done with it at a later point in time. There's no need to confuse/couple these two requirements together.


>>>saghul, Member



;##D15 Is not possible to define if a file exists or not if it's a directory with no read permission
;##ROLE PM
;##INV T
;##BCOM T
;##FORM SOL
;##REL REFR D14
;##SEN NEU

@amb26 repeating myself: we can't give a straight answer to whether a file exists or not if its inside a directory which we cannot enter. Example:


/root/.ssh/id_rsa (your user does not have the rights to access /root, but the file exists)


What should existsSync return? It does exist, but we cannot know that.


>>>amb26, Contributor


@saghul - I'm perfectly happy with an exception as the answer to that


>>>matthew-dean, Other




My understanding is they want a boolean return value.




Yes, that's correct. A thrown exception defeats the purpose.




we can't give a straight answer to whether a file exists or not if its inside a directory which we cannot enter...It does exist, but we cannot know that.





;##D16 The edge cases are not a good enough justification to not do it
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D15
;##SEN NEU

This argument has been repeatedly both stated and defeated in the referenced thread. It's an overly obsessive and fixated answer, and seems to be a base argument for the original deprecation. You are technically correct, yet these edge cases are not valid justification for throwing the baby out with the bathwater.


It's "We can't be sure of the answer, therefore we'll tell you nothing, and in fact, not allow you to ask."
vs.
"Sometimes we don't know the answer, so we can't answer true." Not being able to assert the answer to existence as true, for a boolean returning function, by definition means the return value is false.


Think about the logic you're applying to this function applied to restaurant dining.


"Do you still have the fish special?"
"I'd ask the kitchen, but it's possible that the person I ask may not know, or it may be in a location that they don't know to look in. So, I can't tell you because there's an off-chance I could be wrong. Why don't you try ordering the fish and see what happens?"


The fact that the fish special cannot be PROVEN to not exist does not matter. Refusing to say yes or no based on current available data is not MORE useful than returning boolean true / false. No scientist says that they can't reach a conclusion since it's technically true that cause and effect can never be proven, or it's possible that the entire world is a simulation in the scientist's mind, therefore they should assert nothing. It's technically TRUE, but that doesn't mean that technical trueness is always deterministic as to what information is USEFUL, or if those technically true things are really all that relevant.


That said, in the world of JavaScript, were it the case that file access is the issue (if that can be determined), then it seems perfectly legitimate, as someone else suggested, to return a "falsy" value such as undefined, such that a boolean test will still tell you that the file cannot be found. And, in the event that someone needs to care about the difference between "exists" and "not found", there are other functions that CAN throw error values which can be used to split out different behavior. fs.exists and fs.existsSync are not that function. A boolean return, by its nature, is a simplification of what information could be returned, but isn't, because the developer only wants to do a simplified test.


>>>crrobinson14, Other




"Do you still have the fish special?"
"I'd ask the kitchen, but it's possible that the person I ask may not know, or it may be in a location that they don't know to look in. So, I can't tell you because there's an off-chance I could be wrong. Why don't you try ordering the fish and see what happens?"




❤️



;##D17 Is not Node's job to fix OS problems
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL GEN D16
;##SEN NEU

I could not agree more - this is a perfect analogy. I guess if I was going to recap my arguments from #1592 without ranting on and on, it would be just to say "it's not Node's job to fix this particular problem, either for operating system devs or application devs." The only issue the philosophical position resolves (the race condition) is rare, not generally a problem with the use-cases described at length, and present in every other language that provides the same metaphors. Document it and move on.


>>>dfabulich, Contributor


@domenic wrote:




If the main complaint is really about having to use try/catch, we could consider introducing a fs.canAccessSync(path[, mode]) that returns true/false.




See pull request #4217 which adds an accessibleSync() method that returns a boolean.


@domenic, if you really think that's a good idea, please merge it. But I think we shouldn't merge it; we should merge this PR #4077 instead.


Everything wrong with #4077 is also wrong with #4217 as well. Race conditions? Check. Potential for misuse? Check. Easy to use? Check.


But #4217 clutters the API with a function that's redundant with existsSync. #4077 undeprecates existsSync, a function that has existed for years. For this reason, we should merge #4077 and close #4217 without merging it.


>>>trevnorris, Contributor



;##D18 The argument for adding accessibleSync instead of existsSync is that existence definition can be complex
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D10
;##SEN NEU

@dfabulich The argument for adding a function like accessibleSync() is because there's no ambiguity. While existsSync() may not seem ambiguous at first, we realize that the "existence" of a file can become convoluted. In this PR you can see that there's a specific case on Windows where existsSync() can throw because of permission (i.e. accessibility) issues. Which defeats the point of using existsSync() to begin with.


>>>dfabulich, Contributor



;##D19 That's the reason this change adds throw EPERM to existsSync()
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D18
;##SEN NEU

@trevnorris I've read all the threads on this. I get it. That's why this PR #4077 adds the "throw error on EPERM" stuff. And that's also why I support merging it. (I agree with those who say that it would require a semver bump. To me, that sounds like a great addition to Node 6.)


#4077 is our best bet. My PR #4217 is an acceptable second-best option.


>>>bjouhier, Contributor



;##D20 There are many edge cases where it could be problematic, but there are many cases where they don't matter
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D19
;##SEN NEU

OK, there are plenty of edge cases where fs.existsSync can be problematic (race conditions, access rights) but there are also plenty of scenarios where the edge cases don't matter.



;##D21 Usafe of existsSync is fine if you're guaranteed from design that the edge cases won't appear
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D20
;##SEN NEU

In our application we use fs.existsSync (and fs.exists too BTW) in situations where 1) we are guaranteed by design to have full access on the files (simply because they are inside a directory which is completely controlled by our application) and 2) we are safe by design from race conditions (in some cases because files will not get deleted anyway, in others because concurrent operations each work with their own sandbox of files, ...) For all these scenarios the simple API does the job and it has the advantage of stating explicitly what it does (which is unambiguous because the edge cases are irrelevant).



;##D22 There are two different points of view about the problem
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM ENU
;##REL GEN D21
;##SEN NEU

I think that a large part of the disagreement comes from a difference of perspective between library developers and application developers:




As a library developer, you don't know the precise conditions in which your library will operate. So you have to be ready for the most hostile case: race conditions, wrong permissions.


As an application developer, you control how your code will be deployed; you can guarantee that operation xyz will only scan files that the application can always read and write. If not, it just means that something has compromised the deployment of the application (and you're likely to have a security issue). Same thing for race conditions.




You are trying to prevent library implementers from shooting themselves in the foot. Fine. But don't forget the application developers. For them backward compatibility may be more important. It is important that their code, and their dependencies, which might not be all new and shiny, don't break because of a missing API.


>>>trevnorris, Contributor



;##D23 The EPERM throw is why existsSyc is less useful
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL REFR D19
;##SEN NEU

@dfabulich The "throw in EPERM" is why existsSync() seems less useful. Users should be given a method that is guaranteed to never throw (i.e. if it throws then there's a bug). Otherwise you'll still have to wrap the call in a try/catch. In which case users might as well be left to just wrap statSync() in the try/catch and existsSync() remain deprecated. Hence why a call like accessibleSync() makes more sense.


>>>crrobinson14, Other



;##D24 Why is try/catch a problematic solution?
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL REFR D23
;##SEN NEU

@trevnorris I don't understand that position. The "other" core dev position was "just try to open the file, and try/catch that." How is try/catch a problem here but a recommended answer there?


I don't understand all these protectionist positions. Bad developers will write bad code - in any language. I've found security holes in Erlang projects, Ruby projects, Scala projects, C# projects... Every one of them was suppose to be "more secure than that awful PHP." Sooner or later it's not the language's job to fix everything a human might do. @bnoordhuis in PR #4217 said basically "you can't have it because it's a TOCTOU pathway and you can't be trusted with this awesome responsibility." Are you going to stop allowing people to run Node as root, too? That's WAY more dangerous, and not discussed at all.



;##D25 Function throwing exception is fine, the responsability is on the developer
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL GEN D24
;##SEN NEU

There's a huge pile of stuff in NodeJS that throws. They're well documented and understood, and the developer's fault if they don't catch it. EPERM here is a LITTLE weird to me... but WAY less weird than deprecating existsSync in the first place. If I just want to know if the file exists, I maintain that it's less clear, less readable, and less maintainable to rely on a side effect of another function to determine that when there was a perfectly good function already that handled it. You're spending a huge amount of time here figuring out how to find alternatives for something people want to do, solely because you're deleting an already functional way that they have today.


I can see what's going to happen here. There's going to be a hugely-upvoted Q&A on StackOverflow about this. The most popular answer is going to be a monkey-patch that still has all the same issues as the original.


Maybe that's the best answer for now - it's certainly what I'm going to use. I check for file-existence a LOT without immediately wanting to open and read the file. (Which you still have to try/catch.) It's a valid and useful pattern to me, and I have no intention of saddling some future maintainer with an ugly comment that says "This call to accessibleSync doesn't really need access to the file. We're just seeing if it exists, but since the NodeJS devs took away existsSync we're calling this instead. So just ignore the fact that it says accessible..."


>>>matthew-dean, Other


Also, as a side note: the original call to deprecate fs.exists{Sync}, and the PR to remove it had the same response from developers. So none of this should be a surprise to NodeJS devs. It's never been a popular decision. Meanwhile fs.watch is monkey-patched all over the place because it doesn't function reliably, but no one has suggested deprecating or fixing that one. Of course, if the history of these methods are a guide, fs.watch would be removed, and the suggested solution will be to continuously call fs.open to see if the file has changed.


>>>trevnorris, Contributor




The "other" core dev position




We don't always agree. ;-)




I don't understand all these protectionist positions. Bad developers will write bad code





;##D26 The API itself is flawed
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL REFR D24
;##SEN NEU

My position isn't about that. It's that the API itself is fundamentally flawed. The point of existsSync() is to prevent needing to wrap the call in a try/catch. That's literally all the call does. So if there is any case where existsSync() can throw then the whole point of it is defeated.




If I just want to know if the file exists





;##D27 It is not clear how to define a file existence, hence EPERM
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D15
;##SEN NEU

The point I'm trying to make is a file "just existing" is ambiguous. Leading to one reason why EPERM would need to be thrown. Knowning whether the file is "accessible" is better defined, and more easily determined.




(Which you still have to try/catch.)




Then what does it matter? existsSync() is a statSync() wrapped in a try/catch. That's literally it. So replacing the call doesn't change anything else in your code.




I have no intention of saddling some future maintainer with an ugly comment that says...




The documentation states:




fs.F_OK - File is visible to the calling process. This is useful for determining if a file exists, but says nothing about rwx permissions.




So it achieves for all intents and purposes the same thing but is better defined. With the added bonus of being more performant.


>>>matthew-dean, Other



;##D28 Another solution is having existsSync return undefined if the existence can't be determined
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

@trevnorris @crrobinson14  I think the better solution would be to preserve existsSync, but return undefined when existence can't be determined because of a permission or other access error. That way you could do:





I think this is a slightly better pattern than just a true/false return for accessibleSync.


>>>crrobinson14, Other


@trevnorris I get most of what you're saying except this part:




fs.F_OK - File is visible to the calling process. This is useful for determining if a file exists, but says nothing about rwx permissions.
So it achieves for all intents and purposes the same thing but is better defined. With the added bonus of being more performant.




It sounds like you're suggesting




or




are more readable and better practice than:





;##D29 Whith this approach, it seems like there's a need to justify the intention every time
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

No reminder to future maintainers about your intentions with the last option. This is what I'm stuck on. It just seems so awkward to me. I feel like I need to clarify my intentions to future devs in every spot I do this because they may not realize at a glance that I'm only checking existence.



;##D30 It is better to fix than to remove
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D23
;##SEN

I do get the try/catch comment. I totally get the fs.exists() (non-sync) deprecation on the API-incompatibility grounds, although I still hold that if you're going to make a breaking change (deprecation/removal), fixing it would have been better than removing it. What I don't get is the position that any of the other options are objectively better, more readable, or more maintainable.


>>>crrobinson14, Other



;##D31 Using side effects as primary logic is unclear
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D29
;##SEN NEU
;##D32 Having to use === as safeguard is awkward
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D31
;##SEN NEU

@matthew-dean  Actually I'd side with the core devs on that point. My position is that using side effects as primary logic pathways is unclear. Having to === against specific falsy return types to differentiate between exists-inaccessible and not-exists feels awkward to me - actually, it feels like what a lot of people complain about PHP doing.



;##D33 Depecrating existsSync is nedless and frustrating that doesn't add much value
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D30
;##SEN NEU

I can totally see the value of fs.accessibleSync. I would use it - I like the concept. It's very clear at expressing what you're trying to accomplish in code when accessibility is your goal (accessibility being the sum of exists and permissions-allow-X-operation). I just still think deprecating fs.existsSync is a needless and frustrating revision that doesn't add as much value as it takes away.


>>>matthew-dean, Other



;##D34 It would be fine if accessibleSync were to never throw an error
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

@crrobinson14 I can respect that. I'm just trying to complain less and find something closer to an acceptable middle ground. If accessibleSync were to never throw an error, I think that would work for me. OR some other non-throwy method that returned a queryable object, like:






;##D35 A perfect solution would be a safe method that would never throw an error
;##ROLEETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL GEN D34
;##SEN NEU

Something that was a safe and concise utility method that could easily return existence (or accessibility, or both) without throwing errors - to me, THAT would be a perfectly fine replacement for existsSync, because it could, as you point out, be self-documenting.


(Although, of course, "safeAccessSync" is a horrible name.)


>>>crrobinson14, Other



;##D36 Having fs.F_EXISTS as alias of fs.F_OK would be an ok solutio
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

@matthew-dean @trevnorris Just a suggestion, what if you added an fs.F_EXISTS alias of fs.F_OK? I'm not in LOVE with losing existsSync but I would certainly be happier writing




than relying on default behavior that does the same, or using F_OK. It's longer than writing existsSync but at least it's very clear what you're doing, and would dovetail nicely with what others are pushing for via accessibleSync...


>>>bjouhier, Contributor


I have a proposal:



;##D37 A solution could be to keep existsSync and exists as they are, but design new APIs
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU
keep fs.existsSync and fs.exists as they are. Don't deprecate them, don't remove them, don't fix them.


design new APIs that will have all the good properties. Take your time and do it right.




People who use the old (bad) APIs will be happy: their code will continue to work.


You will be happy: people who want the old APIs to stay around won't be polluting your debates.


Once the new APIs are out, we'll see. If 2 years down the road a large majority of modules have switched to the new APIs, then it might be time to deprecate the old functions. If, on the other hand, the new API got poor adoption, then the old functions should stay.


Let time (and the Darwinian process) sort this out. There is no reason to rush.


>>>amb26, Contributor




No reminder to future maintainers about your intentions with the last option.




@matthew-dean - yes, I agree completely. The point is that existsSync, regardless of its safety/consistency/efficiency, is a compact and easily recognised means of conveying intention.


>>>matthew-dean, Other


@crrobinson14 I thought of something like that too. F_OK is kinda non-specific, since in English it can just mean, "Yeah I heard you... And?" That is, it's not necessarily an "affirmative" or boolean type of word. So yes, I think this would be perfectly fine.





And, hey, you know what? If one were being really clever, one could add a bit of sugar to the above method and write:





:P  But, look, if it were the first option, I would be fine.


>>>matthew-dean, Other



;##D38 We could ger rid of existsSync if, in fact, a better solution is found
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D37
;##SEN NEU

@bjouhier This also seems reasonable. If a clearly better approach DOES manifest, then like I've said, yeah for sure, I would happily say goodbye to existsSync. I just haven't seen it. After all, how do you get more clear and concise than that?


>>>trevnorris, Contributor



;##D39 The word access leads to wrong conclusion on the feature
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

It seems the word "access" is leading to incorrect conclusions, like:




(accessibility being the sum of exists and permissions-allow-X-operation)




Which bring the need to explain the usage of API in context, such as:




Remember, accessibleSync also tells you it exists if you specify fs.F_OK...




With the fs.F_OK flag the check is about visibility, or potential to access. Directly from man access(2):




F_OK tests for the existence of the file.





;##D40 The accessability of a file differ between linux and windows
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D39
;##SEN NEU

On Linux at least if a file can be viewed then it can be potentially accessed. Thus it exists. But this is not true on Windows. Hence why existsSync() is not cross-platform friendly. It's fundamentally flawed. The original plan was to replace the call to statSync() with accessSync() until this was realized.



;##D41 The goal is to have a cross-platform friendly API
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D40
;##SEN NEW

My only goal here is to make sure the API is well defined across platforms. existsSync() doesn't do that.


>>>dfabulich, Contributor



;##D42 existsSync throwing EPERM is cross-platfrom friendly
;##ROLE ETC
;##INV T
;##BCOM T
;##FORM SOL
;##REL ELAB D41
;##SEN NEU

@trevnorris existsSync that throws on EPERM is well defined on all platforms. You argued earlier that if existsSync can throw then it "defeats the point of using it." But that's not true. If existsSync throws, but only in rare/exceptional circumstances, then developers can choose whether to wrap it in a try/catch block or whether to take their chances.


I'd use it. In most scripts, I'd use it without wrapping it.


>>>Fishrock123, Owner


I don't really know where to go with this, so I'm gona close it.


