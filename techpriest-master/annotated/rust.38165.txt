>>>Yamakaky, Contributor

Fixes #37783.

Done:

Fix alignment of file paths for better readability

RUST_BACKTRACE=full prints all the informations (current behaviour)

RUST_BACKTRACE=(short|yes) is the default and does:

Skip irrelevant frames at the beginning and the end
Remove function address
Remove the current directory from the absolute paths
Remove ::hfabe6541873 at the end of the symbols

RUST_BACKTRACE=(0|no) disables the backtrace.

RUST_BACKTRACE=<everything else> is equivalent to short for
backward compatibility.

doc

More uniform printing across platforms.

Removed, TODO in a new PR:

Remove path prefix for libraries and libstd

Example of short backtrace:

Short:

Full:

>>>rust-highfive, Collaborator

Thanks for the pull request, and welcome! The Rust team is excited to review your changes, and you should hear from @brson (or someone else) soon.

If any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.

Please see the contribution instructions for more information.

>>>Yamakaky, Contributor

;##D1 Can we use std::env:current_dir in the unwidning?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Any idea about how I could get access to the build root path?
Also, I'm thinking about using std::env::current_dir, but can I use it in the unwinding?

>>>Yamakaky, Contributor

Result formatting with RUST_BACKTRACE=short:

and with RUST_BACKTRACE=full:

I plan to mask 1-8 and 12-16 with short. I think that's what you care about most of the time.

>>>Mark-Simulacrum, Contributor

Those appear to be the same, did you copy the wrong thing in?

>>>Yamakaky, Contributor

;##D2 Is it ok to alloc here?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

;##D3 Can I use std::env:::current_dir here?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL EALB D1
;##SEN NEU

For now they are nearly the same, except the address which is not printed with short.
An option would be to first construct a Vec<{demangled, addr, [files]}>, then print it. Is it OK to alloc in this place, though?
Also, can I use std::env::current_dir in this place?

>>>Yamakaky, Contributor

;##D4 It might not be necessary
;##ROLE OP
;##INV F
;##FORM SOL
;##REL REFR D2
;##SEN NEU

In fact, that may not be necessary. We can simply recognized the mangled form of std::panicking::*, rust_begin_unwind, main (14 in the stacktrace above) and _rust_maybe_catch_main to determine the range of frames to print, and use a double pass. That should catch most of the unwanted frames.

>>>Yamakaky, Contributor

With panic! and without the ::h234567898765 part:

>>>Thread start

>>>estebank, Contributor

I believe you should be able to accomplish item 4 in #37783 by doing something like

>>>Yamakaky, Contributor

No, this loop only prints the at file:line lines.

>>>Thread end

>>>Yamakaky, Contributor

It's getting better!

compared to

>>>Yamakaky, Contributor

Added removal of path prefix. It prints ./<path> for files in the current directory, at builtin file <file> for std and such, and at library file <file> for libraries. For now, the path are hardcoded for my system. I need to get the buildroot path, and the paths from -L. Any idea?

>>>Yamakaky, Contributor

Can someone test on windows?

>>>Yamakaky, Contributor

Updated first post.
r? @alexcrichton

>>>Thread start

>>>alexcrichton, Owner

;##D5 Why was this necessary?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

This seems sort of suspicious, how come this was necessary?

>>>Yamakaky, Contributor

See #38165 (comment)

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D6 What are the purpose fo these values?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

These values seem to be quite subtle, could you be sure to comment as to their purpose here?

>>>Yamakaky, Contributor

;##D7 It ocntrols if unwiding should use short or long format
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D6
;##SEN NEU

OK. In fact, it controls if the unwinding should use the short or long backtrace format.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D8 Can we leave htis as recognizing 0?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

In the interest of being as conservative as possible here, could we leave this as just recognizing 0?

>>>Yamakaky, Contributor

Fixed in ddfef15.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

Could this just be collapsed with the case below?

>>>Yamakaky, Contributor

Are you sure? I find it cleaner with the "catch anything" separated.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D9 Could this use option_env hand handle none case?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Could this use option_env and handle the None case to ensure that we can build the standard library separately if need be?

>>>Yamakaky, Contributor

See #38165 (comment)

>>>Yamakaky, Contributor

Fixed in 7780ef8

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

Hm I'm curious where this path name came into effect?

>>>Yamakaky, Contributor

It's a dummy value, because the library directory is defined at compilation of the crate, not of stdlib. I still have to find a way to get it.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D10 Could this go in a common module?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

This logic seems like we'd want to do this across all platforms, right? Perhaps this could go into the common module?

>>>Yamakaky, Contributor

Sure, that would just need a bit of refactoring.

>>>Thread end

>>>Yamakaky, Contributor

;##D11 Any idea on how to get the build dir?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

The CFG_BUILD_DIR stuff is a hack until I find a cleaner way to get the build dir. Any idea?
I didn't test on Windows, can someone test?

>>>Yamakaky, Contributor

Is it possible to also have the appveyor build? It would help me supporting windows.

>>>Yamakaky, Contributor

;##D12 We could use a paltfrom-depndent function to increase code reuse
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

@alexcrichton  A solution for cleaner code reuse would be that the unwinding function calls a platform-dependent function that generates some sort of Vec, then prints it. Not sure if it's an option, though, since it would allocate while unwinding.

>>>Mark-Simulacrum, Contributor

;##D13 It coudl return an iterator rathern than a vec
;##ROLE ETC
;##INV F
;##FORM SOL
;##REL ELAB D12
;##SEN NEU

The platform specific option could potentially return an iterator instead of a vec to avoid the allocation (through impl Trait, or just explicitly naming it).

>>>Yamakaky, Contributor

I thought about that, but it may be complicated since the system specific code gives a callback to a C library that's invoked for each frame.

>>>Yamakaky, Contributor

Sound like libunwind supports iterative unwinding unw_step, but not chosen for rust (see this comment for more background)

On iOS, the code uses a builtin backtrace function which sets an array of pointers.

Windows uses a frame iterator

The only trouble is gcc. We could convert it to something like the iOS code easily.

;##D14 We could add the structs backtrace, which implements iterator<frame?
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

What I propose is to add the structs Backtrace which implements Iterator<Frame>. These two structs would be defined in a system-specific manner, with a common trait for Frame. The only public interface for Frame would be functions to get a CStr symbol name, symbol address and file names and line number. I think it should work, and with only static dispatch. What do you think @alexcrichton?

>>>Yamakaky, Contributor

@alexcrichton I think I'm ready for a final review. I'm only on linux, so I was not able to test on windows and such. As I moved code around, there is probably at least some unused imports.
I removed the prefix removing for libraries and std as it involves more changes in rustc. That will be for another PR.

>>>Thread start

>>>alexcrichton, Owner

;##D15 Why are we handling different reutrn codes?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

I may have missed it, but where did these changes come from? How come we're handling different return codes now?

>>>Yamakaky, Contributor

http://git.savannah.gnu.org/gitweb/?p=libunwind.git;a=blob;f=src/unwind/Backtrace.c;hb=bc8698fd7ed13a629a8ec3cb2a89bd74f9d8b5c0
_Unwind_Backtrace only return some values.

>>>alexcrichton, Owner

;##D16 We weren't checking them before
;##ROLE PM
;##INV F
;##FORM SOL
;##REL ELAB D15
;##SEN NEU

Sure yeah I can imagine that this function returns a number of values, but we weren't checking any of them before, only for errors. What prompted the change in logic?

>>>Yamakaky, Contributor

I thought it was better to handle error codes. Was I wrong?

>>>alexcrichton, Owner

;##D17 What's the reasoning behind?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL REFR D16 D15
;##SEN NEU

Oh no that's fine, I'm just trying to understand why. Did this come up during testing? Was this just done on a whim? Have these code paths been executed? etc.

I'm wary of these sorts of changes because libunwind's cross-platform behavior is notoriously finnicky, so I just wanted to dig into what prompted this change. My guess is that it's fine to land as such, but I just want to make sure.

>>>Yamakaky, Contributor

No, I just found it strange to ignore the error case (https://github.com/rust-lang/rust/blob/master/src/libstd/panicking.rs#L349, I'm watching ^^)

>>>alexcrichton, Owner

Hm I feel like we're still not getting to an answer to my question. The code you linked to ignores errors because it has nowhere to pass the errors to and the information is just advisory, so it's fine to just ignore errors.

;##D18 Is it just being proactive?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL ELAB D17
;##SEN NEU

My question is why did this change happen? Is it purely being proactive? Was it reactive to some problem?

>>>Yamakaky, Contributor

No, I added it for the reasons explained above, without detected problems

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

Below it printed addr - 1, but that seems to have been lost here?

>>>Yamakaky, Contributor

Yeah, not sure why there is this -1, but it was probably important XD

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

This semicolon seems like it'd cause a compile failure? And the to_bytes doesn't seem to match the &'static str return type?

>>>Yamakaky, Contributor

Coding without compiler is not a good idea

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

Stylistically we typically indent where clauses like these over one

>>>Yamakaky, Contributor

OK

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

This type of Option<Option<&str>> seems to disagree with the tyep on the return of the function?

>>>Yamakaky, Contributor

Oops, the "Some" shouldn't be there

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

The indentation here was a little confusing for me at first, perhaps the result of this could be bound to a let?

>>>Yamakaky, Contributor

yes, you're right

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

I believe we can just remove this, right? (always fall through below)

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D19 We cannot panic while producing a backtrace
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

Er so to clarify, we definitely can't panic while producing a backtrace. This is called during a panic, which would be a recursive panic, which we don't want to abort on. If we do end up handling this then we need to punt the error upwards and let the caller deal with it.

>>>Yamakaky, Contributor

Ok

>>>Yamakaky, Contributor

;##D20 What would be a godo return value for it?
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D19
;##SEN NEU

What do you suggest as return value?

>>>alexcrichton, Owner

;##D21 Bool or result are fine
;##ROLE PM
;##INV F
;##FORM SOL
;##REL ELAB D20
;##SEN NEU

Oh a bool or a Result would be fine

>>>Yamakaky, Contributor

Yeah, sure, now that there is no cx.next_error ^^

>>>Yamakaky, Contributor

;##D22 Putting a bool will make us loose io::Error
;##ROLE OP
;##INV F
;##FORM SOL
;##REL REFR D21
;##SEN NEU

In fact, if I replace it with a bool we will loose the io::Error on https://github.com/Yamakaky/rust/blob/better-backtrace/src/libstd/sys/windows/backtrace/mod.rs#L76. Is that what we want?

>>>Yamakaky, Contributor

;##D23 We could also return the decoed frames on error
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D22
;##SEN NEU

An alternative would be to return the already-decoded frames on error. Are you OK with that?

>>>Yamakaky, Contributor

That's what I did, finally.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D24 This field is not necessary anymore, after we changed the body of the function?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

I think this field is no longer necessary, right? It was only used when we could generate an error during a backtrace by calling write!, but with that no longer happening the body of this function is infallible.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D25 Could this return an error?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Could this return an error?

>>>Yamakaky, Contributor

I see a few possibilities:

same handling than for _URC_FATAL_PHASE1_ERROR

above + print an error message

create a new error type and return it using io::ErrorKind::Other

>>>alexcrichton, Owner

;##D26 It needs to return an error to not panic on failure
;##ROLE PM
;##INV F
;##FORM REFR D25
;##REL NEW
;##SEN NEU

Er sorry, what I mean is that this must not panic. It should return an error of some kind (Err(()) is fine) so the caller can deal with the failure.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D27 THis signature might crasuh on windows?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Hm I'm a little worried about this signature, In this case at least on Windows I don't believe that the return lifetime is 'static, but rather tied to the stack frame. In that sense I think this may crash on windows?

>>>Yamakaky, Contributor

;##D28 What if we tie its lifetime to backtrace context?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL ELAB D27
;##SEN NEU

Maybe then tie its lifetime to the one of BacktraceContext?

>>>alexcrichton, Owner

;##D29 Due to window,s it needs to take a closure
;##ROLE PM
;##INV F
;##FORM SOL
;##REL REFR D28
;##SEN NEU

Unfortunately on Windows at least the lifetime is fundamentally tied to the stack frame, so it'll need to take a closure or something like that.

>>>Yamakaky, Contributor

Do you know where in the doc it's written? At least, it's not at https://msdn.microsoft.com/en-us/library/windows/desktop/ms681323(v=vs.85).aspx. That would be good to add as a comment.

>>>alexcrichton, Owner

This is not documented because it's just part of the API. If you take a look at the implementation of resolve_symname you'll see that it creates a local SYMBOL_INFO on the stack. The function then returns a pointer into this structure. That'll cause segfaults on MSVC when executed.

>>>Yamakaky, Contributor

;##D30 We could return a cow or use a callback
;##ROLE OP
;##INV F
;##FORM ENU
;##REL ELAB D29
;##SEN NEU

Oh, I see. The troubles of unsafe ^^
A possibility would be to return a Cow. That way, gnu returns a str and msvc returns a String.
Another would be to use a callback, as you said. The implementation would be a bit more complicated, though.

>>>Thread end

>>>alexcrichton, Owner

cc @rust-lang/libs I think this is getting close to merging, and would be good to get some more eyes on the new output format here!

>>>sfackler, Member

Assuming the example in the PR message is up to date, this looks awesome!

>>>Yamakaky, Contributor

It is, except the "builtin file" part ;)

>>>purpleposeidon, edited

I'd love me some easy-reading stack traces! I have some hopefully-not-too-bike-shedding remarks.

Here's how I'd format it:

The frame numbers, while not particularly distracting, AFAIK aren't generally useful. Same story with { skipping N frames }.

Java stacktraces have the function + symbol position on the same line, which certainly keeps things short, but is maybe a bit too dense:

(It's calling std "std" instead of builtin now?)

;##D31 Using some terminal::escape::codes would be helpful
;##ROLE ETC
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

It might be cool to use some terminal::escape::codes on the function names to help them stand out from the package path. (Technology from the past! Save the future!) Maybe that's taking it too far? Parsing terminfo sounds like too much for a stacktrace printer to do...

>>>Yamakaky, Contributor

Good ideas. The printing format is a quick change, there are certainly things to improve.
I removed the prefix removal for std for now, it will be for another PR.

>>>Yamakaky, Contributor

rebased to upstream

>>>alexcrichton, Owner

@Yamakaky this still exhibits the unsafety on MSVC I believe I pointed out before, so we can't merge until that's resolved.

>>>Yamakaky, Contributor

Sorry, forgot about this problem. Should be good now.

>>>oli-obk, Contributor

travis complains:

/checkout/src/libstd/sys_common/backtrace.rs:51: line longer than 100 chars
/checkout/src/libstd/sys/windows/backtrace/printing/mod.rs: incorrect license

>>>Yamakaky, Contributor

Done

>>>oli-obk, Contributor

failures:
[run-pass] run-pass/backtrace-debuginfo.rs
[run-pass] run-pass/backtrace.rs

>>>Yamakaky, Contributor

Not sure what's the problem...

>>>Thread start

>>>alexcrichton, Owner

;##D32 This is a memory safety violation
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

This is still a memory safety violation, it's returning a borrowed pointer into a stack-local.

This function should likely just take a closure to call.

>>>Yamakaky, Contributor

Oops, wrong variant.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

;##D33 We should try avoiding allocations in backtraces
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

I think this is still an issue in the sense that we should use a closure here. We should strive to avoid allocations in backtraces because they're often generated in limited context situations (panics, aborts, etc), where touching as little as possible is advantageous.

>>>Yamakaky, Contributor

Ok, let's use a callback then ^^

>>>Thread end

>>>Yamakaky, Contributor

Done.
Where do you think I should put some doc about the functions defined in sys/? In the header of sys_common/backtrace.rs?

>>>alexcrichton, Owner

Implementation-wise this is looking better to me, thanks! I think the locking story still needs to be fixed up, though. Previously everything was basically single-threaded for most implementations because most of the library support here isn't threadsafe (e.g. windows and libbacktrace). In the restructuring locks were preserved for windows but not for libbacktrace (e.g. when resolving symbols), I believe.

;##D34 Can we move all locking to the common path?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Can the locking all be moved to the common path? That way implementations don't have to have lots of little locks themselves.

>>>Yamakaky, Contributor

;##D35 WOuld putting a lock on backtrace::print work?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL REFR D34
;##SEN NEU

You mean, we put a lock to protect backtrace::print?

>>>alexcrichton, Owner

;##D36 Locking the whole operation is fine
;##ROLE PM
;##INV F
;##FORM SOL
;##REL ELAB 35
;##SEN NEU

Yeah just throwing a lock around the whole operation is fine (it's wanted anyway to avoid concurrent backtrace prints)

>>>Yamakaky, Contributor

;##D37 Should the lock in windows be removed then?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL REFR D36
;##SEN NEU

Should I remove the lock in the windows implementation then?

>>>Thread start

>>>alexcrichton, Owner

;##D38 This need sto return an error code
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

Hm I think I've mentioned this before, but this cannot do operations such as print or allocate. This needs to return an error code.

>>>Thread end

>>>Thread start

>>>alexcrichton, Owner

Locks like this can be removed now that the global operation is locked.

>>>Thread end

>>>alexcrichton, Owner

@Yamakaky any luck with the failing tests?

>>>Yamakaky, Contributor

I don't really understand what the tests do so it's difficult to fix them ^^

>>>alexcrichton, Owner

Given the test logs it looks like output isn't being found when it's expected. Looking at the test it seems that some of the line number information is slightly off. Are you sure that the method backends are called for information is the exact same as before?

>>>alexcrichton, Owner

I think this is close enough that we're ready to consider merging. I'm going to propose merging this but I'm curious how @rust-lang/libs feels about the change in format by default for backtraces.

@rfcbot fcp merge

>>>rfcbot, edited by brson

Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged teams:

 @BurntSushi

 @Kimundi

 @alexcrichton

 @aturon

 @brson

 @sfackler

No concerns currently listed.

Once these reviewers reach consensus, this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!

See this document for info about what commands tagged team members can give me.

>>>Yamakaky, Contributor

Update output example.

>>>brson, Contributor

;##D39 Has the order of frames being switched?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL NEW
;##SEN NEU

;##D40 Are the other options also reversed?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL GEN D39
;##SEN NEU

It looks to me like the op switches the display order of stack frames, so main is displayed first, whereas it used to be last. Is that accurate? If that's the case, is the 'full' option also reversed, or is it in the 'old' order for backwards compatibility (I think we should be consistent in the order)?

Can the formatting scheme here be duplicated out of tree so that others using libbacktrace can imitate the official formatting (error-chain e.g. captures backtraces)?

>>>Yamakaky, Contributor

;##D41 We coudl extract the backtrace handling to a separate crate
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

In fact, I think we could even extract the entire backtrace handling to a separate crate. Could we do that after this PR, though? ^^

>>>alexcrichton, Owner

;##D42 The order should've not changed
;##ROLE PM
;##INV F
;##FORM SOL
;##REL ELAB D40
;##SEN NEU

@brson I personally expected the ordering to stay the same, just the prefix/suffix removed and the output a little different. @Yamakaky can you confirm that the ordering is the same?

>>>Yamakaky, Contributor

I don't remember changing the order, I'll check.

>>>Yamakaky, Contributor

;##D43 The order hasn't been changed
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D42
;##SEN NEU

No, it's the same order. Someone talked about reversing the order, but it was not implemented.

>>>emilk, Other

To (optionally) reverse the stack trace order is a separate issue and should/will be a separate PR: #38873 (comment)

>>>Yamakaky, Contributor

Yes, that's it ^^

>>>aturon, Contributor

Looks beautiful!

>>>bors, Contributor

☔️ The latest upstream changes (presumably #39234) made this pull request unmergeable. Please resolve the merge conflicts.

>>>Yamakaky, Contributor

I think I found why the test fails. The backtrace contains the file:line of the functions and not the file:line of the lines that failed. Just have to find why that's the case.

>>>Yamakaky, Contributor

;##D44 We could conver the backtrace handling to no_std
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

Yeay !
I think we could take all the backtrace handling code in std, convert it to no_std and use it as a dependency of std. That way, it could be published to crates.io and used as a dependency of https://crates.io/crates/backtrace. Could we do that in an other PR, though?

>>>Yamakaky, Contributor

Anything missing before merge?
Also, moving the conversation about putting the code in a separate crate to #39503.

>>>alexcrichton, Owner

ping @brson (checkbox)

>>>Yamakaky, Contributor

Oh, yeah, right.

>>>brson, Contributor

@Yamakaky can you paste some output for how the backtraces look now?

>>>rfcbot, Other

🔔 This is now entering its final comment period, as per the review above. 🔔

>>>Yamakaky, Contributor

Done in the first post of this thread.

>>>alexcrichton, Owner

@Yamakaky should the documentation be updated then? The docs in the book were changed but seem to reflect what I believe at this point is historical syntax.

>>>Yamakaky, Contributor

Oh yeah, right. What should I change?

>>>alexcrichton, Owner

src/doc/book/functions.md is the one I'm looking at, and I think it may be the only one.

;##D45 Why were the numbers elided?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Looking at the current format, how come the numbers were elided? I could imagine that without file/line numbers that the format may be difficult to parse if there's not line numbers demarcating entries perhaps?

Can you also extend an existing test (or add a new one) which asserts that by default the standard library pieces aren't printed? And then with RUST_BACKTRACE=full they are indeed printed?

>>>brson, Contributor

Thanks @Yamakaky.

>>>brson, Contributor

@Yamakaky do you mind showing both the short and full cases for the same stack trace, for comparison?

>>>Yamakaky, Contributor

Done for the doc
@brson done
On it for the test.
Line numbers: makes sense, on it.

>>>Yamakaky, Contributor

Done for the frame number

>>>nrc, Contributor

In the example in the OP, the short and full traces don't seem to correspond? One has fail and one has diverge.

;##D46 Does this elides only frames from top and bottom?
;##ROLE ETC
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Is it correct that this only elides frames from the top and bottom of the trace?

>>>Yamakaky, Contributor

;##D47 It doesn't remove frames in the middle
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELABD 46
;##SEN NEU

Oh, should check for the doc.
Yes, it doesn't remove frames in the middle.

>>>Yamakaky, Contributor

Added test.
@nrc where is the problem in the doc?

>>>Thread start

>>>alexcrichton, Owner

;##D48 This is likely to fail on non-linux
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

Asserting this symbol and _start below are present is likely to fail on non-linux platforms, perhaps those symbols could be tested on just Linux? Otherwise looks good to me!

>>>Yamakaky, Contributor

Done

>>>Thread end

>>>alexcrichton, Owner

Thanks for the update @Yamakaky as well as the gists in the OP, the outputs look great to me.

@brson, how do you feel about those traces?

>>>brson, Contributor

@Yamakaky thanks for the updates. The results look fantastic.

The only qualm I have is slight:

;##D49 This seems to be incosnsisten
;##ROLE ETC
;##INV T
;##FORM SOL
;##REL NEW
;##SEN NEU

Here there are three lines of text output and the capitalization and punctuation appear a bit inconsistent. Particularly with that capital Some.

Here's what happens today on a non-backtrace panic:

;##D50 These modes should be ocnsistent
;##ROLE ETC
;##INV T
;##FORM SOL
;##REL ELAB D49
;##SEN NEU

So istm there are three modes here, no backtrace, short backtrace, full backtrace, and they should be as consistent as possible. For sake of comparison here's the full case as of this PR:

Here's an attempt to make them more consistent:

Yes, that looks good to me. The only thing I changed was to preface 'Some details are omitted' with 'note:'.

@Yamakaky can you make that one change?

I'm happy for this to fcp now. Thanks @Yamakaky, this is a great improvement.

>>>brson, Contributor

@nrc Yes I believe that is correct - the op examples are from different source.

>>>Yamakaky, Contributor

I can add 6 chars ;)

>>>alexcrichton, Owner

Great! @Yamakaky can you squash the commits down and I'll r+?

>>>Yamakaky, Contributor

You mean all in one commit?

>>>alexcrichton, Owner

Multiple commits are fine (if they're logically separated), but this probably doesn't need 54 commits

>>>Yamakaky, Contributor

Should be good.

>>>alexcrichton, Owner

@bors: r+

Thanks again for your patience @Yamakaky!

>>>bors, Contributor

📌 Commit 6277694 has been approved by alexcrichton

>>>bors, Contributor

☔️ The latest upstream changes (presumably #39638) made this pull request unmergeable. Please resolve the merge conflicts.

>>>bors, Contributor

🔒 Merge conflict

>>>Yamakaky, Contributor

Done. Stop modifiying the backtrace code ! XD

>>>alexcrichton, Owner

Looks like Travis failed?

>>>Yamakaky, Contributor

Oops, merge problem, should be good this time.

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit fdd8c34 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit fdd8c34 with merge e1045f4...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>frewsxcv, Member

@bors r-

https://ci.appveyor.com/project/rust-lang/rust/build/1.0.1865/job/5rbccsyx4beo1jqg

>>>Yamakaky, Contributor

Missing comma in the mvsc code.

>>>frewsxcv, Member

@bors r=alexcrichton

>>>bors, Contributor

📌 Commit 54ffbe8 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 54ffbe8 with merge d9affc4...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

We will see all the compilations errors I didn't see on Linux ^^

>>>Yamakaky, Contributor

Will it be good this time?

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit 86f5709 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 86f5709 with merge 9149b16...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

Fixed issues

Add unsafe blocks since windows version of unwind_backtrace is no longer unsafe.

>>>Yamakaky, Contributor

Could you relaunch the build please?

>>>aturon, Contributor

@bors r=alexcrichton

>>>bors, Contributor

📌 Commit c9b125b has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit c9b125b with merge 20bf23e...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

Oops, should be return e instead of e?.

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit 67d17e5 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 67d17e5 with merge 9b323ce...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

Forgot a Result?

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit 95ba9ab has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 95ba9ab with merge 9ff8886...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

We are at the unsafe checks, so we are near the end. Sorry for the multiple build request...

>>>petrochenkov, Contributor

@Yamakaky
Maybe you could test it locally before sending to bors, using VMs or cross-compilation?
Even with slow machine it's faster than repeated "fix -> reapprove -> send to Travis/Appveyor -> fail" cycles.

>>>Yamakaky, Contributor

I'm stupid, I forgot about cross compilation...

>>>petrochenkov, Contributor

@bors r=alexcrichton
(The queue is empty anyway.)

>>>bors, Contributor

📌 Commit 170251d has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 170251d with merge d4a901b...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

I have trouble cross-building on msvc, so I tried with gnu with hacks. Should be good.

>>>petrochenkov, Contributor

@bors r=alexcrichton

>>>bors, Contributor

📌 Commit 090e5a3 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 090e5a3 with merge 4b3f07d...

>>>bors, Contributor

💔 Test failed - status-travis

>>>Yamakaky, Contributor

Errors in mac code now XD

>>>petrochenkov, Contributor

@bors r=alexcrichton

>>>bors, Contributor

📌 Commit 03cae42 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 03cae42 with merge dbc7e2b...

>>>Yamakaky, Contributor

Sorry, forgot to push a fix

>>>petrochenkov, Contributor

@bors r-

>>>petrochenkov, Contributor

@bors r=alexcrichton

>>>bors, Contributor

📌 Commit 1522faa has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 1522faa with merge b1b82e1...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

Sorry again @alexcrichton and @petrochenkov for all the roundtrips...

>>>Yamakaky, Contributor

This fail doesn't seem to be my fault

>>>petrochenkov, Contributor

Looks spurious.
@bors r=alexcrichton

>>>bors, Contributor

💡 This pull request was already approved, no need to approve it again.

This pull request previously failed. You should add more commits to fix the bug, or use retry to trigger a build again.

>>>bors, Contributor

📌 Commit 1522faa has been approved by alexcrichton

>>>petrochenkov, Contributor

@bors retry

>>>bors, Contributor

⌛️ Testing commit 1522faa with merge fc059a8...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>petrochenkov, Contributor

Ok, it doesn't looks spurious anymore.
Let's wait for @alexcrichton.

>>>Yamakaky, Contributor

^^

>>>alexcrichton, Owner

It looks like https://api.pub.build.mozilla.org is down at the moment, so we'll need to wait for it to come back online

>>>alexcrichton, Owner

@bors: retry

>>>bors, Contributor

⌛️ Testing commit 1522faa with merge 22f651c...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

The mac build is still failing because of api.pub.

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit 7af51f6 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 7af51f6 with merge ef5fef9...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>Yamakaky, Contributor

Warning of a field only used in some backend: it smells the end.

>>>petrochenkov, Contributor

@bors r=alexcrichton

>>>bors, Contributor

📌 Commit 0f6d17f has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 0f6d17f with merge ed47c43...

>>>Yamakaky, Contributor

Again, why isn't the appveyor build enabled for all pull requests?

>>>bors, Contributor

💔 Test failed - status-travis

>>>Yamakaky, Contributor

The emscripten build seems broken

>>>alexcrichton, Owner

@bors: retry

* sccache wedged #39003

…

On Sun, Feb 12, 2017 at 10:37 AM, Yamakaky ***@***.***> wrote:
 The emscripten build seems broken

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#38165 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AAD95AbbBRloAlV3o_24CDgXo8hsiEjmks5rbzVNgaJpZM4LDtfR>
 .

>>>bors, Contributor

⌛️ Testing commit 0f6d17f with merge a66dc5c...

>>>bors, Contributor

💔 Test failed - status-travis

>>>Yamakaky, Contributor

Moar syntax error, this time in osx code.

>>>petrochenkov, Contributor

The ride never ends.jpg
@bors r=alexcrichton

>>>bors, Contributor

📌 Commit 767bb2a has been approved by alexcrichton

>>>Yamakaky, Contributor

Builds failure for eternity

>>>bors, Contributor

⌛️ Testing commit 767bb2a with merge 6563127...

>>>bors, Contributor

💔 Test failed - status-travis

>>>bors, Contributor

☔️ The latest upstream changes (presumably #39633) made this pull request unmergeable. Please resolve the merge conflicts.

>>>Yamakaky, Contributor

Fix typo, rebased

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit 485ecd7 has been approved by alexcrichton

>>>Yamakaky, Contributor

BTW @alexcrichton: after this PR is merged, please @me in the following issues about backtraces. Now that I know how it works ;)

>>>bors, Contributor

⌛️ Testing commit 485ecd7 with merge 2e59ee2...

>>>bors, Contributor

💔 Test failed - status-travis

>>>rfcbot, Other

The final comment period is now complete.

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit d50e4cc has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit d50e4cc with merge 9b7ac2b...

>>>bors, Contributor

💔 Test failed - status-travis

>>>alexcrichton, Owner

@Yamakaky the same tests keeps failing, can you investigate?

>>>Yamakaky, Contributor

I am!

>>>alexcrichton, Owner

Thanks @Yamakaky! Feel free to ping me with questions or whenever this PR is updated.

>>>petrochenkov, Contributor

@Yamakaky
I've tested this PR locally and will sendsent you the fix soon.
The errors on Windows are non-trivial, you'd never land this without local debugging.

Status of run-pass/backtrace.rs / run-pass/backtrace-debuginfo.rs:

 Windows/GNU 64-bit - Fixed

 Windows/GNU 32-bit - Fixed

 Windows/MSVC 64-bit - Fixed

 Windows/MSVC 32-bit - Was always broken. Not sure how it passes through Appveyor.

>>>Yamakaky, Contributor

Cool, thanks!

>>>petrochenkov, Contributor

@Yamakaky
This test condition may be too strict:

;##D51 We should disable this check
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

Symbols in the bottom of the stack are very platform specific, mangled name returned from resolve_symname is platform specific too, some targets have incomplete backtraces with garbage like mingw_set_invalid_parameter_handler or even <unknown>.
If anything of this stays unremoved, then std::panicking somewhere in the middle of backtrace will stay too, and the test will fail.
I recommend to disable this check for everything except for few tier1 platforms with good backtrace support if Travis continues failing on other platforms.

>>>petrochenkov, Contributor

@bors r+

>>>bors, Contributor

📌 Commit 0982a28 has been approved by petrochenkov

>>>bors, Contributor

⌛️ Testing commit 0982a28 with merge a5c2937...

>>>bors, Contributor

💔 Test failed - status-travis

>>>petrochenkov, Contributor

run-pass/backtrace.rs fails on ARM in qemu due to this failed assertion

because the output looks like this

and doesn't contain neither foo nor any backtrace at all.

>>>Yamakaky, Contributor

Maybe, as you said, only test the tier 1 platforms?

>>>petrochenkov, Contributor

;##D52 The issue is regression, not lack ofbacktrace support
;##ROLE ETC
;##INV F
;##FORM SOL
;##REL REFR D51
;##SEN NEU

@Yamakaky
The ARM issue from Travis is a regression, not just a lacking backtrace support.
I've reproduced it user mode qemu as well and it doesn't happen on master.
_Unwind_Backtrace returns bad _Unwind_Reason_Code with this patch for some reason, I haven't investigated further yet.

>>>alexcrichton, Owner

@bors: r+

>>>bors, Contributor

📌 Commit 53a5d56 has been approved by alexcrichton

>>>bors, Contributor

⌛️ Testing commit 53a5d56 with merge 957c33c...

>>>bors, Contributor

💔 Test failed - status-travis

>>>petrochenkov, Contributor

@bors r+

>>>bors, Contributor

📌 Commit c8b1742 has been approved by petrochenkov

>>>bors, Contributor

⌛️ Testing commit c8b1742 with merge 7f82f03...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>petrochenkov, Contributor

Some new frame that needs to be filtered away on Windows/GNU, probably due to enabled debug assertions on Appveyor, I tested everything in release mode.

>>>petrochenkov, Contributor

;##D53 We should remove this part of the test
;##ROLE ETC
;##INV F
;##FORM SOL
;##REL NEW
;##SENNEU

@Yamakaky
I think we need to remove the // Make sure than the short version cleans the backtrace. part of the test completely.
It was tested manually and works reasonably in common configurations, but supporting the guarantee that all these symbols will be filtered on all platforms in all configurations will be a huge PITA, given that we can't do this even for officially tested configurations.

>>>petrochenkov, Contributor

Meanwhile, I fixed the test in Windows+Debug configurations (Yamakaky#4), let's try to land it as is once more.

>>>petrochenkov, Contributor

@bors r+

>>>bors, Contributor

📌 Commit 9e054cf has been approved by petrochenkov

>>>Yamakaky, Contributor

So you think this part of the test should be removed?

>>>petrochenkov, Contributor

@Yamakaky
If it fails 1-2 more Travis runs, then yes.

>>>bors, Contributor

⌛️ Testing commit 9e054cf with merge 4b31fca...

>>>bors, Contributor

💔 Test failed - status-travis

>>>petrochenkov, Contributor

@bors r+

>>>bors, Contributor

📌 Commit d0fe018 has been approved by petrochenkov

>>>bors, Contributor

⌛️ Testing commit d0fe018 with merge fe43a3b...

>>>bors, Contributor

💔 Test failed - status-travis

>>>Yamakaky, Contributor

So close!

>>>Thread start

>>>petrochenkov, Contributor

;##D54 We need to add std::panic in all variations
;##ROLE ETC
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

You need to add std::panic in all variations:

(I'd also keep "std::panicking" just for clarity)

>>>Yamakaky, Contributor

Oops, right

>>>Thread end

>>>petrochenkov, Contributor

@bors r+

>>>bors, Contributor

📌 Commit 52bed53 has been approved by petrochenkov

>>>bors, Contributor

⌛️ Testing commit 52bed53 with merge bea2b27...

>>>bors, Contributor

💔 Test failed - status-appveyor

>>>petrochenkov, Contributor

Both Travis and Appveyor failed.
Travis on the next test condition

Appveyor on the "classic" one (WTF, I tested this locally in this exact configuration)

Time to drop both Make sure than the short... and Only on linux for _start... conditions.

>>>Yamakaky, Contributor

;##D55 What if we capture a stacktrace and remove the backtrace if it panics?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

I'm thinking: what if we captured a stacktrace juste before the main, then substract it to the backtrace on panic? That way, at least the bottom of the trace would be correct all the time.

;##D56 We could also do it in begin_panic
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D55
;##SEN NEU

Maybe we could do the same for the top, in std::panicking::begin_panic, core::result::unwrap_failed... It would be easier to maintain.

;##D57 It might cause problems in inlining
;##ROLE OP
;##INV F
;##FORM SOL
;##REL REFR D55
;##SEN NEU

Not sure how it would play with inlining. inline(never) should do the trick.

>>>Thread start

>>>petrochenkov, Contributor

This one failed on Travis too.

>>>Thread end

>>>petrochenkov, Contributor

;##D58 We can do it if main and panic starts can be reliably detected with inlining and custom ain
;##ROLE ETC
;##INV F
;##FORM SOL
;##REL REFR D57
;##SEN NEU

@Yamakaky
Maybe as a next PR?
The problem of this patch is that it already tries to change far too much platform-specific code at once and is pending for too long.
If main and panic start can be reliably detected in presence of inlining and custom mains, then yes, it would be a more robust solution, this needs some experimentation.

>>>petrochenkov, Contributor

@bors r+

>>>bors, Contributor

📌 Commit 6398b20 has been approved by petrochenkov

>>>bors, Contributor

⌛️ Testing commit 6398b20 with merge 4be034e...

>>>bors, Contributor

☀️ Test successful - status-appveyor, status-travis
Approved by: petrochenkov
Pushing 4be034e to master...

>>>Yamakaky, Contributor

\o/
Finally!

>>>jdm, Contributor

Does this also affect the output of https://crates.io/crates/backtrace or should we file a separate issue in that repository?

>>>Yamakaky, Contributor

You should open an issue.

