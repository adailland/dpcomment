>>>trevnorris, Contributor


Now allow process.nextTick(callback[, ... vargs])


R=@bnoordhuis


>>>cjihrig, Owner


Any chance of figuring this out before merging?


>>>trevnorris, Contributor


I will. Just don't have the brain cells at the moment to figure out why process.nextTick() returns undefined in the mentioned test.


>>>mscdex, Contributor


I just tested this and all tests (including test-repl-timeout-throw) still pass after changing this additional instance of process.nextTick() to process.nextTick(afterWrite, stream, state, finished, cb);


>>>trevnorris, Contributor


Thanks. I'll make the change to the PR.


>>>rvagg, Owner



;##D1 It's not great to expose bad APIs to users
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

this is a tiny bit gross and a quite a leaky abstraction, I'm not really a fan of exposing ugly APIs just because it's the fastest way--fine if it's an internal API for the sake of cleaning up and speeding up (does it really do either of those?) but now we have to expose this to users.



;##D2 (cb[, arg1[, arg2...] ]) would be a better choice than (cb [, arg1][, ...]) for consistency reasons
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU
;##D3 We should not proceed unless we can avoid performance htis
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

process.nextTick(cb[, arg1[, arg2... ] ]) would be the obvious API choice because of the consistency and my vote would be that if we can't do that without taking a performance hit then we shouldn't do anything.


>>>trevnorris, Contributor



;##D4 This approach is the most efficient na dprovides clean up and speed up
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D1
;##SEN NEU

@rvagg leaky? and it does both clean up and speed up (removing the need for additional function closures, flatten function declarations and no need to create an actual array). I played with the other API decision, but it causes far too many DEOPTs in nextTick() to be useful. And I disagree we shouldn't do anything. Internals are a CF of function declarations that prevent further optimizations.


>>>rvagg, Owner



;##D5 The problem with this signature is that it provides too many information about the implementation
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D4
;##SEN NEU

leaky abstraction in the sense that your abstraction is saying too much about the implementation -- you're declaring to the world that you had to make compromises on your API to get other outcomes (performance), there has to be a tradeoff between pure perf and the best internal implementation and the API we expose to users and I'm here representing the API and this is that tradeoff discussion


>>>piscisaureus, Member



;##D6 Changing the api will requires to support it forever
;##ROLE ETC
;##INV F
;##BCOM  T
;##FORM SOL
;##REL REFR D5
;##SEN NEU

I agree with @rvagg. This adds API that may seem nice and fast now but we have to support it forever. It would be more helpful if the setArgs api was strictly internal.


>>>cjihrig, Owner


@piscisaureus as in _setArgs()?


>>>tellnes, Member


I also agree with @rvagg on this. If we do need an ugly API, then let us try to find a way to not expose it.


>>>vkurchatkin, Member


+1 on making this internal. See discussion in #953


>>>medikoo, Other


This is quite dirty design, totally not common to similar API's, that people are familiar with.
-1 on having this public, whatever on internal.


>>>trevnorris, Contributor


@medikoo I don't appreciate "dirty design". Yes it's uncommon, but in terms of code complexity and performance it's the cleanest.


setArgs() is now _setArgs().


>>>vkurchatkin, Member




setArgs() is now _setArgs().




sigh one more "private" thing that people will use


>>>trevnorris, Contributor



;##D7 Adding _ to setArgs(), to indicate it's private, can give people a feeling of security
;##ROLEOP
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

@vkurchatkin I figured the fact that using process.nextTick() is already frowned upon, and the fact that this API isn't documented was enough. Guess a simple _ gives people a feeling of security.


>>>rvagg, Owner




sigh one more "private" thing that people will use





;##D8 Is it possible to use Symbol here?
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

I echo your sigh here, could we make use of Symbol here maybe or should we just get that internal modules thing sorted out?


>>>trevnorris, Contributor



;##D9 Using Symbol is not possible unless nextTick is remove or split in two
;##ROLE OP
;##INV F
;##BCOM T
;##FORM N
;##REL ELAB D8
;##SEN NEU

@rvagg unless we're willing to either 1) remove process.nextTick() completely, or 2) have two implementations of nexTick() (one internal, the other user facing) neither of those solutions will work.


>>>vkurchatkin, Member




should we just get that internal modules thing sorted out




we can have this without internal modules



;##D10 We could split the implementation and have the front one be a wrapper of the other
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D9
;##SEN NEU

@trevnorris I'm thinking about 2: user facing one would be just a wrapper of internal one


>>>chrisdickinson, Contributor



;##D11 It might be problematic to port it to readable-stream
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

This may prove problematic for porting it to readable-stream, since it's using an API that browserify (almost certainly) does not support.


>>>chrisdickinson, Contributor



;##D12 We should not be exponsing the setArg API
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D10
;##SEN NEU

If we end up going this route, I'm in favor of going the internal module + private symbol approach for solving this so we don't expose the setArg API to the world. I really don't want a "internal only" nextTick API.



;##D13 This change is precarious for readable-stream
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D12
;##SEN NEU

(This is also a fairly precarious change for readable-stream, no matter which way the flow of code goes. Either way, it may not have access to .setArg.)


>>>vkurchatkin, Member


@chrisdickinson I propose injecting private nextTick into internal modules with this new functionality. No symbols are required


>>>chrisdickinson, Contributor


@vkurchatkin Then we have two nextTick's, one private and one public. I'd rather just make this one sub-method private.


>>>vkurchatkin, Member


@chrisdickinson  What I mean is something like this: process.nextTick = function(cb) { nextTick(cb); }. The same function, just return undefined


>>>sam-github, Member



;##D14 Why is this API faster than process.nextTick(fn, [ctx])
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

@trevnorris can you comment on why this API is faster than




?


I assume it was because you don't want to slice fn off the start of arguments before applying the remaing args to fn, but if you limit to one arg, you don't have to.


>>>chrisdickinson, Contributor



;##D15 How is the private nextTick shared with _strea_readable.js?
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL REFR D10
;##SEN NEU

@vkurchatkin How does that private nextTick get shared with _stream_readable.js?


>>>vkurchatkin, Member



;##D16 _stream_readable.js should have only public APIs
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOl
;##REL ELAB D15
;##SEN NEU

it is passed as an argument to module wrapper. Not a good idea for _stream_readable.js though as it is supposed to be the same as in readable-stream, so only public APIs.


>>>sam-github, Member


Oh, and if nextTick is worth making better for use in iojs, its worth making it better for everybody, IMHO.


>>>trevnorris, Contributor



;##D17 Only allowing a single argumen for nexTick() is not enough
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

@sam-github It makes the call to nextTick() polymorphic. And only allowing a single argument isn't enough in many cases. So it could possibly make the call megamorphic. Thus preventing nextTick() from being inlined.


>>>trevnorris, Contributor



;##D18 Having a callback in nextTick would affect performance too much
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D3
;##SEN NEU

I won't accept nextTick(callback[, ... vargs]) because of how it'll affect performance. And readable-stream only uses public API. So either we expose this or nothing goes in.


>>>chrisdickinson, Contributor



;##D19 Would adding these changes preclude the import into streams3 bracnh?
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL REFR D16
;##SEN NEU

Just thinking through this out loud, with regards to readable streams: even with an exposed setArg API, wouldn't this preclude us from importing these changes into the streams3 readable-stream branch?


>>>sam-github, Member



;##D20 It might limit its use to only performance-critical code
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D17
;##SEN NEU

@trevnorris thanks, I get it. It is unfortunately ugly... but that might limit its use to just performance-critical code... which would be OK.


Is megamorphic even a word? :-)


>>>trevnorris, Contributor



;##D21 The method should only be used in high performance code
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D20
;##SEN NEU

@sam-github usage in only performance critical code was my plan, and the fact I've left it undocumented since we want people to use setImmediate(callback[, ... vargs]) anyway should demonstrate it's limited use case for very high performance code. Don't know if megamorphic is in any dictionary, but it is fun to say. :)


>>>Fishrock123, Owner



;##D22 Isn't using the arguments object like this a de-opt?
;##ROLE PM
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

Isn't using the arguments object like this a de-opt?


i.e. https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments


>>>chrisdickinson, Contributor



;##D23 This use would be okay in strict mode
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D22
;##SEN NEU

My guess is that it should be okay in strict mode, since mutating arguments externally won't affect local values.


>>>trevnorris, Contributor


As @chrisdickinson said, in 'strict mode' arguments is not a deopt.


>>>petkaantonov, Contributor


This definitely should deopt since arguments must be materialized but I haven't checked


>>>petkaantonov, Contributor



;##D24 Doing it without arguments materialization is significally faster
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D22
;##SEN NEU

It's 33% faster to do it without arguments materialization:






;##D25 Declaring the most used amount of arguments would avoid the use of argument adaptors
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

Could also declare the most often used amount of arguments to avoid arguments adaptor for those cases.



;##D26 The optimizing compiler can't compile code that uses that argument object
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL NEW
;##SEN NEU

Edit: strict mode is unrelated, the problem is that arguments object doesn't exist in the optimizing compiler and any code that behaves as if it did, cannot therefore be compiled by it


>>>Fishrock123, Owner





(i have minimal versions of both slice and splice haha) https://gist.github.com/Fishrock123/98c35a0c745cb59d7496


>>>trevnorris, Contributor


For simply timing the difference in execution duration I used the following test:





The call itself to _setArgs() actually slows things down from around 90 ns/op to 120 ns/op. The main advantage is in cases where the callback actually does work.


Here's another minor example using streams:





The execution time before this patch is ~9000 ns/op, but with it around 7400 ns/op. Not a huge gain, but it does help set us up for more aggressive performance enhancements in the future.


NOTE: Thanks @chrisdickinson for fixing my first Streams test.


>>>petkaantonov, Contributor


We can do so much faster than this, and without changing api, with either code generation or copy-paste that specializes for a certain amount of arguments passed.



;##D27 We could have specialized TickCallback for 4 different cases
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D25
;##SEN NEU

For instance calling a nextTick(fn, arg1, arg2) would create a TickCallback instance specialized to 2 arguments with an invoke method that does this.callback(this.arg1, this.arg2). You can have up to 4 different TickCallback classes before you go megamorphic, so you can specialize for 0, 1, 2 and n arguments. Actually since internally we use 0-3 arguments, we should not even specialize for n arguments at all but only 0, 1, 2 or 3.


>>>trevnorris, Contributor



;##D28 The call to nextTick would become megamorphy to maintain nextTick() fast
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D27
;##SEN NEU

@petkaantonov but the call to nextTick() would become megamorphic because the number of arguments, and type of arguments, changes. And keeping the call to nextTick() fast is my main concern. It's a small call that can be inlined, iirc, but with variadic arguments it wouldn't be.


>>>petkaantonov, Contributor


@trevnorris the amount or types of arguments themselves are not inline cached in the first place. The amount of arguments passed affects only arguments adaptor trampoline which is unrelated to inline caching.



;##D29 The call to nextTick cannot be inlined
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D28
;##SEN NEU

The call to process.nextTick cannot be inlined right now because the process object is in dictionary mode and  therefore it isn't known at compile time whether process.nextTick will reference to the function at a given moment so it cannot be inlined. So to make it inlineable we only need to put the process object back into object mode after it has been stabilized.


Run this with --trace-inlining and you see nextTick is not inlined:





However, let's redempt process from dictionary hell:







Yay. And it doesn't matter how many arguments we pass or what types:







>>>trevnorris, Contributor


@petkaantonov Thanks for the analysis. I'll rethink the process.nextTick(cb[, ... vargs ]) API choice.


>>>trevnorris, Contributor


@petkaantonov so... yeah. anyway, it's performing much better right now then I swear it did during my initial testing.


@iojs/collaborators the API is now process.nextTick(callback[, ... vargs]). Everyone alright w/ this?


>>>vkurchatkin, Member



;##D30 Is this new the public API?
;##ROLE PM
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

@trevnorris is this supposed to be new public API?


>>>trevnorris, Contributor



;##D31 This API should be public: it's less leaky and more helpful
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D30
;##SEN NEU

@vkurchatkin why not? it's not "leaky" as @rvagg didn't like, it's exactly the same as setImmediate() and it's very helpful for those people who do use it.


>>>rvagg, Owner


YES! see also nodejs/node-v0.x-archive#6624 and the chain of PRs and issues from there up.


>>>mscdex, Contributor



;##D32 What kind of impact does this change have in the benchmarks?
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL ELAB D30
;##SEN NEU

LGTM. What kind of impact do we see in the benchmarks for the affected core modules with this latest change?


>>>yosuke-furukawa, Contributor


LGTM. setImmediate, setTimeout can pass the arguments.


>>>trevnorris, Contributor



;##D33 Does this needs a docs update?
;##ROLE OP
;##INV F
;##BCOM T
;##FORM OPQ
;##REL ELAB D30
;##SEN

Anyone think this is deserving of a docs update? If not then I'll merge as-is.


>>>vkurchatkin, Member



;##D34 It needs a docs update
;##ROLE PM
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D33
;##SEN NEU

I think it does (+ semver-minor label)


>>>petkaantonov, Contributor



;##D35 This could be made unobservable and release the public API later
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL REFR D34
;##SEN NEU

This could be also merged right now as an unobservable change (with the doc changes reverted) and make the public API "release" later in a semver-minor.


>>>trevnorris, Contributor


Thanks @petkaantonov. That would be my preference.


>>>Fishrock123, Owner



;##D36 Has any benchmark been run yet?
;##ROLE PM
;##INV F
;##BCOM T
;##FORM OPQ
;##REL GEN D32
;##SEN NEU

@trevnorris done any benchmarks yet?


I see that was the resolution as of the tc-meeting it was discussed in.


>>>trevnorris, Contributor



;##D37 Small improvements in the benchmarks are visible
;##ROLE OP
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D36
;##SEN NEU

@Fishrock123 some. Initial results showed improvements just above the margin of error. Part of the gain also comes from easier performance debugging, since functions won't DEOPT from being scoped. It's possible to create a benchmark that shows significant gains, but this is definitely a micro optimization.


>>>trevnorris, Contributor



;##D38 Was this suppose to land before 1.7?
;##ROLE OP
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

@iojs/tc Was this supposed to have landed before the 1.7 release?


>>>cjihrig, Owner


LGTM. Starting CI to verify.


>>>cjihrig, Owner


CI: https://jenkins-iojs.nodesource.com/job/iojs+any-pr+multi/515/


>>>trevnorris, Contributor


Thanks. Landed in 10e31ba.


>>>jbergstroem, Member


Possibly stupid question, but seeing this is server-minor - is 1.8.0 our next release?


>>>rvagg, Owner


@jbergstroem yes, either that or 2.0.0 if we get the https://github.com/iojs/io.js/milestones/2.0.0 changes sorted out


>>>trevnorris, Contributor


@jbergstroem this should have been merged before 1.7 but wasn't.


>>>jbergstroem, Member


Ok. I was pretty keen on getting 1.7.2 within a week or so with a fix to a shared build. Guessing 2.0 might make that easier since we'd branch off to master/1.x/2.x?


>>>KenanSulayman, Contributor


🎉 🎉  Awesome! 🎉 🎉


>>>igl, Other



;##D39 Isn't callback.bind(xtx, ...args) the same thin?
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM OPQ
;##REL NEW
;##SEN NEU

Since nobody mentioned it: Isn't callback.bind(ctx, ...args) the same thing? Even more extensive with the possibility of setting a context.


>>>petkaantonov, Contributor



;##D40 Yes but it's way slower
;##ROLE ETC
;##INV F
;##BCOM T
;##FORM SOL
;##REL ELAB D39
;##SEN NEU

@igl Yes, well only that, it's like 100000x slower.


