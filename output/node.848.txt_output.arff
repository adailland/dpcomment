% Generated by Discussion model node.848.txt
% File generated on 2017/08/02 15:59:25

@relation pr1501703965743

@attribute author String
@attribute textual String
@attribute isProjectMember {TRUE, FALSE}
@attribute isInvited {TRUE, FALSE}
@attribute numberOfWords numeric
@attribute commentsSoFar numeric
@attribute allUtterancesSoFar numeric
@attribute utterancesInCommentSoFar numeric
@attribute utteredByOriginalPoster {TRUE, FALSE}
@attribute hasCapitalizedWord {TRUE, FALSE}
@attribute containsShould {TRUE, FALSE}
@attribute hasDecisions {TRUE, FALSE}
@attribute howManyDecisions numeric
@attribute idComment numeric

@data
vkurchatkin,"Internal modules can be used to share private code between public modules without risk to expose private APIs to the user.",FALSE,FALSE,21,0,0,0,TRUE,TRUE,FALSE,TRUE,0,1
vkurchatkin,"Later some flag (build time or runtime) could be added for making unit-testing possible.#569",FALSE,FALSE,14,0,1,1,TRUE,FALSE,FALSE,TRUE,0,1
seishun,"Does this actually help? Crazy people will just require('internal/freelist') in their code.",FALSE,FALSE,12,1,3,0,FALSE,TRUE,FALSE,TRUE,0,2
vkurchatkin,"that's the idea, they can't. require('internal/whatever/module) works only inside built-in modules. For users everything works as before. That is, if node_modules/internal/whatever/module.js exists, they will get it. Otherwise the will get an error",FALSE,FALSE,32,2,4,0,TRUE,TRUE,FALSE,TRUE,0,3
seishun,"Ah, I see now. I'm not sure if it's worth introducing such a framework for just one module which might get removed.",FALSE,FALSE,22,3,5,0,FALSE,TRUE,FALSE,TRUE,0,4
vkurchatkin,"It is not just for one module. The idea is to move there everything non-public bit by bit. freelist is the least of mine concerns, because it's not actually shared and could be embedded into _http_common. freelist was just chosen for illustrative and testing purposes.",FALSE,FALSE,45,4,6,0,TRUE,TRUE,FALSE,TRUE,0,5
thlorenz,"tl;dr if you use undocumented modules you run the risk of your code breaking, no need for us to fix anything here.",FALSE,FALSE,22,5,7,0,FALSE,FALSE,FALSE,TRUE,0,6
thlorenz,"Not a big fan of this feature.If someone uses things that aren't documented then there is a known risk that that code won't work in future versions.This is true for a lot more things than modules, i.e. functions on prototypes that aren't part of the API but used internally. Usually those are marked as _functionName.",FALSE,FALSE,55,5,8,1,FALSE,TRUE,FALSE,TRUE,0,6
thlorenz,"As an example inside readline-vim I depend on readline._ttyWrite but only consider myself lucky that the code didn't break due to the function name changing. However I knew that risk when I wrote that code.",FALSE,FALSE,35,5,9,2,FALSE,TRUE,FALSE,TRUE,0,6
thlorenz,"Same is true for any modules only to be used internally. If you wanna use them, fine but just know the risk. But if you start trying to encapsulate those you'd then also have to encapsulate the _private functions.",FALSE,FALSE,39,5,10,3,FALSE,TRUE,FALSE,TRUE,0,6
thlorenz,"From my experience in other OO environments I've come to the conclusion that encapsulation is overrated. Just let the users make the right decisions. Marking things private explicitly or implicitly (by not documenting them) should suffice.",FALSE,FALSE,36,5,11,4,FALSE,TRUE,TRUE,TRUE,0,6
brendanashworth,"I'm unsure about this change. Yes, developers using private modules causes hesitancy when putting breaking changes into the source and not bumping semver-major, but we have to draw the line somewhere - and I think that should be whether or not it is documented. The programmer should know what they are doing, and if they know what they are doing and want to require a private module, we shouldn't restrict them from doing that.",FALSE,FALSE,74,6,12,0,FALSE,TRUE,TRUE,TRUE,0,7
vkurchatkin,"What you are saying is absolutely right, but also purely theoretical. When time comes to remove something that was never documented we still HAVE TO evaluate the risks of removing to it. This is the burden I want to get rid of.",FALSE,FALSE,42,7,13,0,TRUE,TRUE,FALSE,TRUE,0,8
vkurchatkin,"However I knew that risk when I wrote that code.",FALSE,FALSE,10,7,14,1,TRUE,TRUE,FALSE,TRUE,0,8
vkurchatkin,"You know the risk, someone doesn't. Someone who requires you module doesn't. Removing this method can potentially break thousands of modules and the only person who knew the risk was you.",FALSE,FALSE,31,7,15,2,TRUE,TRUE,FALSE,TRUE,0,8
vkurchatkin,"But if you start trying to encapsulate those you'd then also have to encapsulate the _private functions.",FALSE,FALSE,17,7,16,3,TRUE,FALSE,FALSE,TRUE,0,8
vkurchatkin,"Not HAVE TO. But this would be good too, eventually.",FALSE,FALSE,10,7,17,4,TRUE,TRUE,FALSE,TRUE,0,8
vkurchatkin,"Marking things private explicitly or implicitly (by not documenting them) should suffice.",FALSE,FALSE,12,7,18,5,TRUE,FALSE,TRUE,TRUE,0,8
vkurchatkin,"This is exactly that, marking modules as private very explicitly.",FALSE,FALSE,10,7,19,6,TRUE,FALSE,FALSE,TRUE,0,8
thlorenz,"Not sure if it was clear, but I meant to stress implicitly (by not documenting them) should suffice above, meaning that no further action beyond not documenting is needed.",FALSE,FALSE,29,8,20,0,FALSE,TRUE,TRUE,TRUE,0,9
thlorenz,"You know the risk, someone doesn't.",FALSE,FALSE,6,8,21,1,FALSE,FALSE,FALSE,TRUE,0,9
thlorenz,"When I wrote that code I wasn't involved with node myself, but knew as a developer that undocumented features and/or functions marked _ are considered private API and I'm running a risk when using it.",FALSE,FALSE,35,8,22,2,FALSE,TRUE,FALSE,TRUE,0,9
thlorenz,"Most devs are aware of this as I was and if not they'll have to learn the hard way unfortunately. However jumping through hoops just to somehow disable devs not to follow these conventions is over the top IMHO.",FALSE,FALSE,39,8,23,3,FALSE,TRUE,FALSE,TRUE,0,9
vkurchatkin,"While you are right (as I have already said), what you say is unrealistic and unreasonable.",FALSE,FALSE,16,9,24,0,TRUE,TRUE,FALSE,TRUE,0,10
vkurchatkin,"Let's say _ and not documenting is enough. So let's remove util._extend. I bet half of npm would break. It can be done in one line, there numerous libraries on npm, and people still use it.",FALSE,FALSE,36,9,25,1,TRUE,TRUE,FALSE,TRUE,0,10
vkurchatkin,"It's so easy to discover something not documented using REPL. root instead of global? cool I'll use that!. process.EventEmitter? cool, one require less. And so one. People who do that are asking for trouble, no doubt. But what about people depending on their modules? They do nothing wrong.",FALSE,FALSE,48,9,26,2,TRUE,TRUE,FALSE,TRUE,0,10
vkurchatkin,"I understand your stance, but you give no cons. Here are the pros (from my point of view):",FALSE,FALSE,18,9,27,3,TRUE,TRUE,FALSE,TRUE,0,10
vkurchatkin,"true privacy, that what people always wanted in javascript, but had to go with _;",FALSE,FALSE,15,9,28,4,TRUE,FALSE,FALSE,TRUE,0,10
vkurchatkin,"encourages code sharing in lib;",FALSE,FALSE,5,9,29,5,TRUE,FALSE,FALSE,TRUE,0,10
vkurchatkin,"encourages modularity in lib- we can have small files, deep structure, etc. (/lib/internal/http/parser.js)",FALSE,FALSE,13,9,30,6,TRUE,FALSE,FALSE,TRUE,0,10
vkurchatkin,"reduces risks or refactoring.",FALSE,FALSE,4,9,31,7,TRUE,FALSE,FALSE,TRUE,0,10
vkurchatkin,"Some references:",FALSE,FALSE,2,9,32,8,TRUE,FALSE,FALSE,TRUE,0,10
meandmycode,"I'd agree that it's io.js / node that pay for other developers risks. Especially with how graph like dependencies are in node it's easy for one person's risk to affect hundreds without them realizing. In other languages it's a lot harder to shoot yourself in the foot (.NET for example requires you write reflection code and a level of execution permission that people don't assume).",FALSE,FALSE,65,10,34,0,FALSE,TRUE,FALSE,TRUE,0,11
meandmycode,"This will always be a balance but if one of io.js goals is agility then it seems to fit.",FALSE,FALSE,19,10,35,1,FALSE,FALSE,FALSE,TRUE,0,11
thlorenz,"I agree that the convention WRT _ private functions were not followed consistently which doesn't mean we have to steer away from those conventions completely.",FALSE,FALSE,25,11,36,0,FALSE,TRUE,FALSE,TRUE,0,12
thlorenz,"But let's get the discussion back on track to what this PR is about.Here is my opinion and it'll be my final comment in this thread (hopefully others will add theirs so we can come to the right decision here):",FALSE,FALSE,40,11,37,1,FALSE,TRUE,FALSE,TRUE,0,12
thlorenz,"Internal modules to prevent users from doing things that may cause problems for them would be nice and if they came at no cost I'd be all for it. However the price to pay for this (added complexity in the code base and possible confusion about what's going on for people trying to grok the code base) is just not worth it IMO.So I'm a clear ðŸ‘Ž on this.",FALSE,FALSE,69,11,38,2,FALSE,TRUE,FALSE,TRUE,0,12
tellnes,"I'm generally in line with @thlorenz points in this thread. But if we should implement something like this, I don't think creating a magic internal folder is the way to go. I think a better solution would be to create a list of the modules which should be exported similar to how we are defining what should be exported in modules by adding a property to module.export.",FALSE,FALSE,67,12,39,0,FALSE,TRUE,TRUE,TRUE,0,13
seishun,"-1 for reasons already outlined by @thlorenz and also because it doesn't solve the problem completely anyway. There are still undocumented object properties and undocumented exports on otherwise public modules.",FALSE,FALSE,30,13,40,0,FALSE,TRUE,FALSE,TRUE,0,14
Qard,"Indeed. Nice try, but only a partial fix.",FALSE,FALSE,8,14,41,0,FALSE,TRUE,FALSE,TRUE,0,15
Qard,"Also, I would've gone the route of freelist being in a node_modules folder only resolvable from other core files, so it could just work like any other module dependency not being accessible without doing require('parent/node_modules/dependency').",FALSE,FALSE,35,14,42,1,FALSE,TRUE,FALSE,TRUE,0,15
chrisdickinson,"I don't have time at the moment to fully write this up at the moment, but I actually would like to have this ability in core.",FALSE,FALSE,26,15,43,0,FALSE,TRUE,FALSE,TRUE,0,16
brendanashworth,"For the sake of the functionality (regardless of my stance), why not just block require's starting with an underscore rather than the folder?",FALSE,FALSE,23,16,44,0,FALSE,TRUE,FALSE,TRUE,0,17
tellnes,"+1 for underscore in favor of internal/",FALSE,FALSE,7,17,46,0,FALSE,FALSE,FALSE,TRUE,0,18
vkurchatkin,"For the sake of the functionality (regardless of my stance), why not just block require's starting with an underscore rather than the folder",FALSE,FALSE,23,18,47,0,TRUE,TRUE,FALSE,TRUE,0,19
vkurchatkin,"@brendanashworth that would be an immediate breaking change. The idea is to leave underscored files and add deprecation notice to them until 2.0.0. Also a part of the PR is enabling subfolders in `lib/', which is also nice to have.",FALSE,FALSE,40,18,48,1,TRUE,TRUE,FALSE,TRUE,0,19
vkurchatkin,"There are still undocumented object properties and undocumented exports on otherwise public modules.",FALSE,FALSE,13,18,49,2,TRUE,FALSE,FALSE,TRUE,0,19
vkurchatkin,"@seishun They are on my radar too, but this is a first essential step. If we want to move private stuff, we need a place where to move it first.",FALSE,FALSE,30,18,50,3,TRUE,TRUE,FALSE,TRUE,0,19
trevnorris,"We should also consider, as best we can, the long term effects with ES6 modules.",FALSE,FALSE,15,19,51,0,FALSE,TRUE,TRUE,TRUE,0,20
chrisdickinson,"This is a great example of a place where I'd love to be able to have modules private to io.js â€“ it would be great to have an internal module that allowed io.js internals to place  high priority  event listeners, vs. reaching into other object state.",FALSE,FALSE,46,20,52,0,FALSE,TRUE,FALSE,TRUE,0,21
benjamingr,"When I started reading it sounded like a bad idea but I think @vkurchatkin makes some really good arguments in favour encapsulation here.",FALSE,FALSE,23,21,53,0,FALSE,TRUE,FALSE,TRUE,0,22
benjamingr,"In many languages it's possible to use modules internally but not expose them to the outside. This isn't only a problem in core, it would also be a nice ability in userland to signal that a specific file from a module should not be included directly. Popular userland libraries share the issue.",FALSE,FALSE,52,21,54,1,FALSE,TRUE,TRUE,TRUE,0,22
benjamingr,"Something like a:",FALSE,FALSE,3,21,55,2,FALSE,FALSE,FALSE,TRUE,0,22
benjamingr,"module[Symbol.for( internal )] = true;",FALSE,FALSE,3,21,56,3,FALSE,FALSE,FALSE,TRUE,0,22
benjamingr,"Which would mean this file should not be included from the outside - only from within the module or core. It's not a well thought out idea but I hope it gets the point across.",FALSE,FALSE,35,21,57,4,FALSE,TRUE,TRUE,TRUE,0,22
benjamingr,"I also think that @trevnorris's comments about ES6 modules are really important - any change here can have an impact on ES6 modules that don't do this sort of thing.",FALSE,FALSE,30,21,58,5,FALSE,TRUE,FALSE,TRUE,0,22
brendanashworth,"@brendanashworth that would be an immediate breaking change. The idea is to leave underscored files and add deprecation notice to them until 2.0.0. Also a part of the PR is enabling subfolders in `lib/', which is also nice to have.",FALSE,TRUE,40,22,59,0,FALSE,TRUE,FALSE,TRUE,0,23
brendanashworth,"How so? I think it all could be done the same way - issuing a deprecation notice when they are require'd via the module code. It could then be changed to throw an error on 2.0.0.",FALSE,TRUE,36,22,60,1,FALSE,TRUE,FALSE,TRUE,0,23
brendanashworth,"The change for enabled subfolders could also be separated into a new commit.",FALSE,TRUE,13,22,61,2,FALSE,FALSE,FALSE,TRUE,0,23
AlexYursha,"Why not just forbid traversing inside the dependency in v2.0.0? What if we could just do require('module_name') and not require('module_name/some_internal_folder/some_internal_file')? Let a module export one thing and forbid everything else on the require('module_name') level. What for the files and folders internal to our modules we'll just require('./relative_file_path') them.",FALSE,FALSE,48,23,62,0,FALSE,TRUE,FALSE,TRUE,0,24
AlexYursha,"I also doubt that its a wise idea to implement modules differently in core and in the userland.",FALSE,FALSE,18,23,63,1,FALSE,FALSE,FALSE,TRUE,0,24
benjamingr,"@yursha because being able to require parts of a library or a module is super useful and a lot of packages use that ability.",FALSE,FALSE,24,24,64,0,FALSE,FALSE,FALSE,TRUE,0,25
vkurchatkin,"I also doubt that its a wise idea to implement modules differently in core and in the userland",FALSE,TRUE,18,25,65,0,TRUE,TRUE,FALSE,TRUE,0,26
vkurchatkin,"They are already implemented differently. There are many reasons for that, both historical and practical.",FALSE,TRUE,15,25,66,1,TRUE,TRUE,FALSE,TRUE,0,26
AlexYursha,"@vkurchatkin Then is your fix addressing only internal implementation and therefore intended to ease the life of io.js maintainers only? What about userland module's maintainers who also suffer from the fact that people carelessly consume their modules' private functionality?",FALSE,FALSE,39,26,67,0,FALSE,TRUE,FALSE,TRUE,0,27
AlexYursha,"@benjamingr Could you please give a famous example? Can't understand why not just modularise the library itself then.",FALSE,FALSE,18,27,68,0,FALSE,TRUE,FALSE,TRUE,0,28
vkurchatkin,"@yursha Also a problem, but much harder to solve. If we prohibit require('some_module/lib/internal.js') people still could use require('../node_modules/some_module/lib/internal.js')",FALSE,TRUE,18,28,69,0,TRUE,TRUE,FALSE,TRUE,0,29
tellnes,"@yursha Internal and userland modules are a different story. Your feature request to support this for userland modules is a real one, but out of scope for this pull request.",FALSE,FALSE,30,29,70,0,FALSE,TRUE,FALSE,TRUE,0,30
tellnes,"If you can come up with a good and clean way which make it possible to require parts of a module like it works today and at the same time lets you define some files as unrequireable, then you maybe have a solution.",FALSE,FALSE,43,29,71,1,FALSE,FALSE,FALSE,TRUE,0,30
AlexYursha,"@vkurchatkin Forbidding relative paths which contain node_modules segment will solve that problem. It's vital to implement a proper module system with good encapsulation. Otherwise a lot of code in NPM will either stuck under fear of changes or will get broken.",FALSE,FALSE,41,30,72,0,FALSE,TRUE,FALSE,TRUE,0,31
AlexYursha,"@tellnes Thanks, for now I'm just trying to understand why we need requiring parts of the module in the first place.",FALSE,FALSE,21,31,73,0,FALSE,TRUE,FALSE,TRUE,0,32
AlexYursha,"FWIW, I also find it confusing that the term module is used for both a single source file and a much coarser npm module. We should come to separate terms for those to make all module-related discussions more legible.",FALSE,FALSE,39,31,74,1,FALSE,TRUE,TRUE,TRUE,0,32
tellnes,"@yursha Like @benjamingr said. It is super useful. For an example, look at lodash.",FALSE,TRUE,14,32,75,0,FALSE,TRUE,FALSE,TRUE,0,33
vkurchatkin,"I'm just trying to understand why we need requiring parts of the module in the first place.",FALSE,TRUE,17,33,76,0,TRUE,TRUE,FALSE,TRUE,0,34
vkurchatkin,"Useful for browserify. Otherwise index.js with explicit exports is fine",FALSE,TRUE,10,33,77,1,TRUE,TRUE,FALSE,TRUE,0,34
AlexYursha,"@tellnes lodash â‰¥ v3.0.0. has a better solution. Take a look.",FALSE,FALSE,11,34,78,0,FALSE,TRUE,FALSE,TRUE,0,35
AlexYursha,"@vkurchatkin Could you please give a concrete example related to browserify? Sorry, but haven't time to learn it yet.",FALSE,FALSE,19,35,79,0,FALSE,TRUE,FALSE,TRUE,0,36
vkurchatkin,"@yursha browserify includes only files that are explicitly required. So if you require index.js it will include everything, while you might need only a couple of files",FALSE,TRUE,27,36,80,0,TRUE,TRUE,FALSE,TRUE,0,37
tellnes,"@yursha Ok, lodash is probably not the best example, but the point stand.",FALSE,TRUE,13,37,81,0,FALSE,TRUE,FALSE,TRUE,0,38
tellnes,"On the server side it is only a little bit higher memory usage, but for browserify it makes a big difference in filesize. You can argue that if it is designed to be included separated it should be different full blown packages. But sometimes substack-style is not the best solution. I've used it a lot for private modules (not npm published).",FALSE,TRUE,61,37,82,1,FALSE,TRUE,TRUE,TRUE,0,38
AlexYursha,"@vkurchatkin Thanks for the explanation!",FALSE,FALSE,5,38,83,0,FALSE,TRUE,FALSE,TRUE,0,39
AlexYursha,"@tellnes Every good thing has its drawbacks and what we are talking about are trade-offs.",FALSE,FALSE,15,38,84,1,FALSE,TRUE,FALSE,TRUE,0,39
AlexYursha,"If are choosing between right approach to encapsulation and one more option of doing modularisation I would vote for the first. Introducing new (possibly redundant) approaches to modularisation (like requiring parts of a module instead of splitting it) that can compromise encapsulation and maintainability is at least questionable for me. So if mistakes were made in early design why not fix them in v2.0.0?",FALSE,FALSE,64,38,85,2,FALSE,TRUE,FALSE,TRUE,0,39
AlexYursha,"P.S.: That applies to how browserify functions as well.",FALSE,FALSE,9,38,86,3,FALSE,TRUE,FALSE,TRUE,0,39
chrisdickinson,"@yursha Forbidding deep require's is a separate feature request from being able to declare modules  internal  to core, and is extremely unlikely to be accepted. Changing how the require system works for userland is off the table, even for a major release â€“ the subsystem is locked. Additionally, folks depend on the current behavior (readable-stream and bops come to mind).",FALSE,FALSE,60,39,87,0,FALSE,TRUE,FALSE,TRUE,0,40
chrisdickinson,"This PR is scoped to adding  private  modules to core only. This does not imply breaking changes for folks using free_list directly, only that in the future we have the option to deprecrate existing internal modules; and that we can avoid similar situations by introducing private functionality as truly private.To the concern of having two systems: native modules already resolve differently than userland modules, so this isn't a huge divergence from what's already there.",FALSE,FALSE,74,39,88,1,FALSE,TRUE,FALSE,TRUE,0,40
AlexYursha,"@chrisdickinson You guys always talking about the fact that modulessubsystem is locked, but don't discuss actual design pros and contras what I think is much more important. What do you mean under locked by the way? Does it mean that even if API design can be improved it will not change ever?  This wording in the official docs sounds somewhat strange:",FALSE,FALSE,62,40,89,0,FALSE,TRUE,FALSE,TRUE,0,41
AlexYursha,"Some [API] are so proven, and so relied upon, that they are unlikely to ever change at all.",FALSE,FALSE,18,40,90,1,FALSE,FALSE,FALSE,TRUE,0,41
AlexYursha,"If APIs will look the same in 2025 as they are now this eventually means a full-stop in the evolution for io.js when all major subsystems reach the locked status. Is this what folks really want to achieve with io.js? I just can't embrace it with my mind. Help needed.",FALSE,FALSE,50,40,91,2,FALSE,TRUE,FALSE,TRUE,0,41
brendanashworth,"@yursha the point you brought up was recently discussed - now all modules have been brought down to  stable  status besides the timers and modules modules, which were locked because we can't risk a change that would end up breaking part of the massive userland system. The goal is no longer to bring modules to locked status but rather to stable.",FALSE,TRUE,61,41,92,0,FALSE,TRUE,FALSE,TRUE,0,42
AlexYursha,"@brendanashworth Thanks for the insight.",FALSE,FALSE,5,42,93,0,FALSE,TRUE,FALSE,TRUE,0,43
AlexYursha,"From my experience the software is just getting dated. Huge parts of userland are not maintained and hang dead on npm taking useful names and  asking  core to be backwards compatible.",FALSE,FALSE,31,42,94,1,FALSE,TRUE,FALSE,TRUE,0,43
AlexYursha,"The world changes, people invent new things and breaking changes are inevitable if we aim to have a lean, easy to understand and evolving core. We can try to introduce them as rarely as possible but trying to avoid them completely can probably do more harm than use in the long term. So I still think there should be a place at official io.js where changes to modules and timers can be discussed to allow further evolution.",FALSE,FALSE,77,42,95,2,FALSE,TRUE,TRUE,TRUE,0,43
vkurchatkin,"@yursha I'm sure that this is good place to discuss all kinds of radical changes: https://github.com/iojs/ng",FALSE,TRUE,16,43,96,0,TRUE,TRUE,FALSE,TRUE,0,44
brendanashworth,"Would there be any way to disable the use of these internal modules at all? I'm doing some bug tracing right now in the REPL, learning more about the code base, require()'ing some internal modules which would be impossible with this change. Lets not forget that userland modules aren't the only places that internal modules can be used properly.",FALSE,TRUE,59,44,97,0,FALSE,TRUE,FALSE,TRUE,0,45
vkurchatkin,"Later some flag (build time or runtime) could be added for making unit-testing possible.",FALSE,TRUE,14,45,99,1,TRUE,FALSE,FALSE,TRUE,0,46
vkurchatkin,"What I meant was that we can compile iojs with something like IOJS_ALLOW_INTERNALS and then we can require internals as usual.",FALSE,TRUE,21,45,100,2,TRUE,TRUE,FALSE,TRUE,0,46
chrisdickinson,"This might stray into  changing the public API  a bit too much, but: instead of gating this with an startsWith statement inside of the module system, what if we added another function parameter to the module preamble for native modules, named something like builtinRequire? The appropriate builtinRequire function would be passed to internal modules, but a stub that throws a reasonable exception would be passed to userland modules, unless a flag or env var was set.",FALSE,TRUE,76,46,101,0,FALSE,TRUE,FALSE,TRUE,0,47
vkurchatkin,"@chrisdickinson I thought about doing that, but then realised that require in builtins is essentially builtinRequire already.",FALSE,TRUE,17,47,102,0,TRUE,TRUE,FALSE,TRUE,0,48
vkurchatkin,"instead of gating this with an startsWith statement inside of the module system",FALSE,TRUE,13,47,103,1,TRUE,FALSE,FALSE,TRUE,0,48
vkurchatkin,"We still need to do it if we use the same js2c infrustructure.",FALSE,TRUE,13,47,104,2,TRUE,FALSE,FALSE,TRUE,0,48
vkurchatkin,"Added NODE_EXPOSE_INTERNALS switch for tests, debugging, etc",FALSE,TRUE,7,48,105,0,TRUE,TRUE,FALSE,TRUE,0,49
trevnorris,"@vkurchatkin shouldn't it be a flag, like how V8 does --expose-gc or --expose-natives-as?",FALSE,TRUE,13,49,106,0,FALSE,TRUE,TRUE,TRUE,0,50
vkurchatkin,"@trevnorris this makes sense, will do",FALSE,TRUE,6,50,107,0,TRUE,FALSE,FALSE,TRUE,0,51
vkurchatkin,"@trevnorris done!",FALSE,TRUE,2,51,108,0,TRUE,FALSE,FALSE,TRUE,0,52
rvagg,"FTR: it's not entirely clear from the minutes but I believe this was accepted at the last TC meeting, see #1123",FALSE,FALSE,21,52,109,0,FALSE,TRUE,FALSE,TRUE,0,53
rvagg,"removing tc-agenda label",FALSE,FALSE,3,52,110,1,FALSE,FALSE,FALSE,TRUE,0,53
trevnorris,"@vkurchatkin Great. Looking good. When this is merged let's just remember to include that freelist has been moved to a native module. LGTM.",FALSE,TRUE,23,53,111,0,FALSE,TRUE,FALSE,TRUE,0,54
vkurchatkin,"@trevnorris do you mean in changelog? Nothing has changed from user perspective (yet), so not even worth mentioning. Moving stuff to /internal and deprecating is the next logical step.",FALSE,TRUE,29,54,112,0,TRUE,TRUE,FALSE,TRUE,0,55
vkurchatkin,"@bnoordhuis would you mind taking a look? I'm especially worried about js2c.py. haven't written a line of python before and not particularly fond of escaping solution (though it seems to me that are no edge cases unless we deliberately use $ in internal paths, but in that case compilation should just fail and that's it )",FALSE,TRUE,56,54,113,1,TRUE,TRUE,TRUE,TRUE,0,55
bnoordhuis,"You might as well remove this commented out code while you're here.",FALSE,TRUE,12,55,114,0,FALSE,TRUE,FALSE,TRUE,0,56
bnoordhuis,"And here.",FALSE,TRUE,2,56,115,0,FALSE,TRUE,FALSE,TRUE,0,57
bnoordhuis,"Femto-nit: can you append a comma?  That makes the diff less noisy when new entries are added.",FALSE,TRUE,18,57,116,0,FALSE,TRUE,FALSE,TRUE,0,58
bnoordhuis,"Shouldn't this file be called freelist.js or something?  Avoids unnecessary churn when another module is added.",FALSE,TRUE,17,58,117,0,FALSE,TRUE,FALSE,TRUE,0,59
vkurchatkin,"Not sure what do you mean. js2c drops extensions so this is how we require internal modules. This particular test checks that if we try it in userland module and there is node_modules/internal/freelist.js everything works as before.",FALSE,TRUE,37,59,118,0,TRUE,TRUE,FALSE,TRUE,0,60
bnoordhuis,"The directory is called test/fixtures/internal-modules but it's really only about the freelist module.  Maybe move index.js to test/fixtures/internal-modules/freelist?",FALSE,TRUE,19,60,119,0,FALSE,TRUE,FALSE,TRUE,0,61
vkurchatkin,"doesn't change a lot. we only need to test this once with any module. it could be anything other than freelist",FALSE,TRUE,21,61,120,0,TRUE,FALSE,FALSE,TRUE,0,62
bnoordhuis,"Another femto-nit: maybe something that stands out more, like the number 42?  Makes it more obvious in the test that it's from a fixture.",FALSE,TRUE,25,62,121,0,FALSE,TRUE,FALSE,TRUE,0,63
bnoordhuis,"I'm not 100% sure if you should be using os.sep here... I guess it depends on whether gyp converts the slashes to backslashes on Windows.",FALSE,TRUE,25,63,122,0,FALSE,TRUE,TRUE,TRUE,0,64
vkurchatkin,"good catch. someone needs to check this on windows",FALSE,TRUE,9,64,123,0,TRUE,FALSE,FALSE,TRUE,0,65
bnoordhuis,"Please wrap at 80 columns here.",FALSE,TRUE,6,65,124,0,FALSE,TRUE,FALSE,TRUE,0,66
bnoordhuis,"@vkurchatkin Can you add a test that verifies that --expose_internals works?  Should be trivial:",FALSE,TRUE,15,66,125,0,FALSE,TRUE,FALSE,TRUE,0,67
bnoordhuis,"CI: https://jenkins-iojs.nodesource.com/view/iojs/job/iojs+any-pr+multi/291/",FALSE,TRUE,2,66,126,1,FALSE,TRUE,FALSE,TRUE,0,67
vkurchatkin,"@bnoordhuis updated, PTAL",FALSE,TRUE,3,67,127,0,TRUE,TRUE,FALSE,TRUE,0,68
bnoordhuis,"LGTM and sorry for the delay.  I'd suggest landing it after the 1.6.0 release.",FALSE,TRUE,15,68,128,0,FALSE,TRUE,FALSE,TRUE,0,69
vkurchatkin,"@bnoordhuis thank you. I'm going to land this in a couple of days",FALSE,TRUE,13,69,129,0,TRUE,TRUE,FALSE,TRUE,0,70
vkurchatkin,"landed in 2db758c",FALSE,TRUE,3,70,130,0,TRUE,FALSE,FALSE,TRUE,0,71
Fishrock123,"This commit causes the entire windows test suite to fail due to some config loading issue: https://jenkins-iojs.nodesource.com/view/iojs/job/iojs+any-pr+multi/381/nodes=iojs-win2008r2/console",FALSE,FALSE,17,71,131,0,FALSE,TRUE,FALSE,TRUE,0,72
Fishrock123,"I don't really understand how it could cause that, but the parent commit works fine, and this ones throws like crazy.",FALSE,FALSE,21,72,132,0,FALSE,TRUE,FALSE,TRUE,0,73
bnoordhuis,"I'll look into it.  I think I know what's causing it and I guess I'm partially to blame for lgtm'ing without pointing out the CI failures.",FALSE,TRUE,27,73,133,0,FALSE,TRUE,FALSE,TRUE,0,74
vkurchatkin,"Looks like gyp passes paths to js2c.py differently on windows",FALSE,TRUE,10,74,134,0,TRUE,TRUE,FALSE,TRUE,0,75
bnoordhuis,"FTR: iojs#1281",FALSE,TRUE,2,75,135,0,FALSE,TRUE,FALSE,TRUE,0,76
