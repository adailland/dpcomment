% Generated by Discussion model node.1077.txt
% File generated on 2017/08/09 19:32:22

@relation pr1502321542892

@attribute author String
@attribute textual String
@attribute isProjectMember {TRUE, FALSE}
@attribute isInvited {TRUE, FALSE}
@attribute numberOfWords numeric
@attribute commentsSoFar numeric
@attribute allUtterancesSoFar numeric
@attribute utterancesInCommentSoFar numeric
@attribute utteredByOriginalPoster {TRUE, FALSE}
@attribute hasCapitalizedWord {TRUE, FALSE}
@attribute containsShould {TRUE, FALSE}
@attribute hasDecisions {TRUE, FALSE}
@attribute howManyDecisions numeric
@attribute idComment numeric
@attribute idPara numeric

@data
trevnorris,"Now allow process.nextTick(callback[, ... vargs])",FALSE,FALSE,5,0,0,0,TRUE,FALSE,FALSE,TRUE,0,1,1
cjihrig,"Any chance of figuring this out before merging?",FALSE,FALSE,8,1,2,0,FALSE,TRUE,FALSE,TRUE,0,2,1
trevnorris,"I will. Just don't have the brain cells at the moment to figure out why process.nextTick() returns undefined in the mentioned test.",FALSE,FALSE,22,2,3,0,TRUE,TRUE,FALSE,TRUE,0,3,1
mscdex,"I just tested this and all tests (including test-repl-timeout-throw) still pass after changing this additional instance of process.nextTick() to process.nextTick(afterWrite, stream, state, finished, cb);",FALSE,FALSE,24,3,4,0,FALSE,TRUE,FALSE,TRUE,0,4,1
trevnorris,"Thanks. I'll make the change to the PR.",FALSE,FALSE,8,4,5,0,TRUE,TRUE,FALSE,TRUE,0,5,1
rvagg,"this is a tiny bit gross and a quite a leaky abstraction, I'm not really a fan of exposing ugly APIs just because it's the fastest way--fine if it's an internal API for the sake of cleaning up and speeding up (does it really do either of those?) but now we have to expose this to users.",FALSE,FALSE,57,5,7,1,FALSE,TRUE,FALSE,TRUE,0,6,1
rvagg,"process.nextTick(cb[, arg1[, arg2... ] ]) would be the obvious API choice because of the consistency and my vote would be that if we can't do that without taking a performance hit then we shouldn't do anything.",FALSE,FALSE,36,5,9,3,FALSE,TRUE,TRUE,TRUE,0,6,2
trevnorris,"@rvagg leaky? and it does both clean up and speed up (removing the need for additional function closures, flatten function declarations and no need to create an actual array). I played with the other API decision, but it causes far too many DEOPTs in nextTick() to be useful. And I disagree we shouldn't do anything. Internals are a CF of function declarations that prevent further optimizations.",FALSE,FALSE,66,6,11,1,TRUE,TRUE,TRUE,TRUE,0,7,1
rvagg,"leaky abstraction in the sense that your abstraction is saying too much about the implementation -- you're declaring to the world that you had to make compromises on your API to get other outcomes (performance), there has to be a tradeoff between pure perf and the best internal implementation and the API we expose to users and I'm here representing the API and this is that tradeoff discussion",FALSE,TRUE,68,7,13,1,FALSE,TRUE,FALSE,TRUE,0,8,1
piscisaureus,"I agree with @rvagg. This adds API that may seem nice and fast now but we have to support it forever. It would be more helpful if the setArgs api was strictly internal.",FALSE,FALSE,33,8,15,1,FALSE,TRUE,FALSE,TRUE,0,9,1
cjihrig,"@piscisaureus as in _setArgs()?",FALSE,FALSE,4,9,16,0,FALSE,FALSE,FALSE,TRUE,0,10,1
tellnes,"I also agree with @rvagg on this. If we do need an ugly API, then let us try to find a way to not expose it.",FALSE,FALSE,26,10,17,0,FALSE,TRUE,FALSE,TRUE,0,11,1
vkurchatkin,"+1 on making this internal. See discussion in #953",FALSE,FALSE,9,11,18,0,FALSE,TRUE,FALSE,TRUE,0,12,1
medikoo,"This is quite dirty design, totally not common to similar API's, that people are familiar with.-1 on having this public, whatever on internal.",FALSE,FALSE,23,12,19,0,FALSE,TRUE,FALSE,TRUE,0,13,1
trevnorris,"@medikoo I don't appreciate  dirty design . Yes it's uncommon, but in terms of code complexity and performance it's the cleanest.",FALSE,FALSE,20,13,20,0,TRUE,TRUE,FALSE,TRUE,0,14,1
trevnorris,"setArgs() is now _setArgs().",FALSE,FALSE,4,13,21,1,TRUE,FALSE,FALSE,TRUE,0,14,2
vkurchatkin,"setArgs() is now _setArgs().",FALSE,FALSE,4,14,22,0,FALSE,FALSE,FALSE,TRUE,0,15,1
vkurchatkin,"sigh one more  private  thing that people will use",FALSE,FALSE,9,14,23,1,FALSE,FALSE,FALSE,TRUE,0,15,2
trevnorris,"@vkurchatkin I figured the fact that using process.nextTick() is already frowned upon, and the fact that this API isn't documented was enough. Guess a simple _ gives people a feeling of security.",FALSE,FALSE,32,15,25,1,TRUE,TRUE,FALSE,TRUE,0,16,1
rvagg,"sigh one more  private  thing that people will use",FALSE,TRUE,9,16,26,0,FALSE,FALSE,FALSE,TRUE,0,17,1
rvagg,"I echo your sigh here, could we make use of Symbol here maybe or should we just get that internal modules thing sorted out?",FALSE,TRUE,24,16,28,2,FALSE,TRUE,TRUE,TRUE,0,17,2
trevnorris,"@rvagg unless we're willing to either 1) remove process.nextTick() completely, or 2) have two implementations of nexTick() (one internal, the other user facing) neither of those solutions will work.",FALSE,FALSE,29,17,30,1,TRUE,FALSE,FALSE,TRUE,0,18,1
vkurchatkin,"should we just get that internal modules thing sorted out",FALSE,TRUE,10,18,31,0,FALSE,FALSE,TRUE,TRUE,0,19,1
vkurchatkin,"we can have this without internal modules",FALSE,TRUE,7,18,32,1,FALSE,FALSE,FALSE,TRUE,0,19,2
vkurchatkin,"@trevnorris I'm thinking about 2: user facing one would be just a wrapper of internal one",FALSE,TRUE,16,18,34,3,FALSE,TRUE,FALSE,TRUE,0,19,3
chrisdickinson,"This may prove problematic for porting it to readable-stream, since it's using an API that browserify (almost certainly) does not support.",FALSE,FALSE,21,19,36,1,FALSE,TRUE,FALSE,TRUE,0,20,1
chrisdickinson,"If we end up going this route, I'm in favor of going the internal module + private symbol approach for solving this so we don't expose the setArg API to the world. I really don't want a  internal only  nextTick API.",FALSE,FALSE,41,20,38,1,FALSE,TRUE,FALSE,TRUE,0,21,1
chrisdickinson,"(This is also a fairly precarious change for readable-stream, no matter which way the flow of code goes. Either way, it may not have access to .setArg.)",FALSE,FALSE,27,20,40,3,FALSE,TRUE,FALSE,TRUE,0,21,2
vkurchatkin,"@chrisdickinson I propose injecting private nextTick into internal modules with this new functionality. No symbols are required",FALSE,TRUE,17,21,41,0,FALSE,TRUE,FALSE,TRUE,0,22,1
chrisdickinson,"@vkurchatkin Then we have two nextTick's, one private and one public. I'd rather just make this one sub-method private.",FALSE,TRUE,19,22,42,0,FALSE,TRUE,FALSE,TRUE,0,23,1
vkurchatkin,"@chrisdickinson  What I mean is something like this: process.nextTick = function(cb) { nextTick(cb); }. The same function, just return undefined",FALSE,TRUE,21,23,43,0,FALSE,TRUE,FALSE,TRUE,0,24,1
sam-github,"@trevnorris can you comment on why this API is faster than",FALSE,FALSE,11,24,45,1,FALSE,TRUE,FALSE,TRUE,0,25,1
sam-github,"I assume it was because you don't want to slice fn off the start of arguments before applying the remaing args to fn, but if you limit to one arg, you don't have to.",FALSE,FALSE,34,24,47,3,FALSE,FALSE,FALSE,TRUE,0,25,2
chrisdickinson,"@vkurchatkin How does that private nextTick get shared with _stream_readable.js?",FALSE,TRUE,10,25,49,1,FALSE,TRUE,FALSE,TRUE,0,26,1
vkurchatkin,"it is passed as an argument to module wrapper. Not a good idea for _stream_readable.js though as it is supposed to be the same as in readable-stream, so only public APIs.",FALSE,TRUE,31,26,51,1,FALSE,TRUE,FALSE,TRUE,0,27,1
sam-github,"Oh, and if nextTick is worth making better for use in iojs, its worth making it better for everybody, IMHO.",FALSE,FALSE,20,27,52,0,FALSE,TRUE,FALSE,TRUE,0,28,1
trevnorris,"@sam-github It makes the call to nextTick() polymorphic. And only allowing a single argument isn't enough in many cases. So it could possibly make the call megamorphic. Thus preventing nextTick() from being inlined.",FALSE,TRUE,33,28,54,1,TRUE,TRUE,FALSE,TRUE,0,29,1
trevnorris,"I won't accept nextTick(callback[, ... vargs]) because of how it'll affect performance. And readable-stream only uses public API. So either we expose this or nothing goes in.",FALSE,TRUE,27,29,56,1,TRUE,TRUE,FALSE,TRUE,0,30,1
chrisdickinson,"Just thinking through this out loud, with regards to readable streams: even with an exposed setArg API, wouldn't this preclude us from importing these changes into the streams3 readable-stream branch?",FALSE,TRUE,30,30,58,1,FALSE,TRUE,FALSE,TRUE,0,31,1
sam-github,"@trevnorris thanks, I get it. It is unfortunately ugly... but that might limit its use to just performance-critical code... which would be OK.",FALSE,TRUE,23,31,60,1,FALSE,TRUE,FALSE,TRUE,0,32,1
sam-github,"Is megamorphic even a word? :-)",FALSE,TRUE,6,31,61,2,FALSE,FALSE,FALSE,TRUE,0,32,2
trevnorris,"@sam-github usage in only performance critical code was my plan, and the fact I've left it undocumented since we want people to use setImmediate(callback[, ... vargs]) anyway should demonstrate it's limited use case for very high performance code. Don't know if megamorphic is in any dictionary, but it is fun to say. :)",FALSE,TRUE,53,32,63,1,TRUE,TRUE,TRUE,TRUE,0,33,1
Fishrock123,"Isn't using the arguments object like this a de-opt?",FALSE,FALSE,9,33,65,1,FALSE,TRUE,FALSE,TRUE,0,34,1
Fishrock123,"i.e. https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments",FALSE,FALSE,2,33,66,2,FALSE,FALSE,FALSE,TRUE,0,34,2
chrisdickinson,"My guess is that it should be okay in strict mode, since mutating arguments externally won't affect local values.",FALSE,TRUE,19,34,68,1,FALSE,TRUE,TRUE,TRUE,0,35,1
trevnorris,"As @chrisdickinson said, in 'strict mode' arguments is not a deopt.",FALSE,TRUE,11,35,69,0,TRUE,TRUE,FALSE,TRUE,0,36,1
petkaantonov,"This definitely should deopt since arguments must be materialized but I haven't checked",FALSE,FALSE,13,36,70,0,FALSE,TRUE,TRUE,TRUE,0,37,1
petkaantonov,"It's 33% faster to do it without arguments materialization:",FALSE,FALSE,9,37,72,1,FALSE,TRUE,FALSE,TRUE,0,38,1
petkaantonov,"Could also declare the most often used amount of arguments to avoid arguments adaptor for those cases.",FALSE,FALSE,17,37,74,3,FALSE,TRUE,FALSE,TRUE,0,38,2
petkaantonov,"Edit: strict mode is unrelated, the problem is that arguments object doesn't exist in the optimizing compiler and any code that behaves as if it did, cannot therefore be compiled by it",FALSE,FALSE,32,37,76,5,FALSE,TRUE,FALSE,TRUE,0,38,3
Fishrock123,"(i have minimal versions of both slice and splice haha) https://gist.github.com/Fishrock123/98c35a0c745cb59d7496",FALSE,FALSE,11,38,77,0,FALSE,FALSE,FALSE,TRUE,0,39,1
trevnorris,"For simply timing the difference in execution duration I used the following test:",FALSE,TRUE,13,39,78,0,TRUE,TRUE,FALSE,TRUE,0,40,1
trevnorris,"The call itself to _setArgs() actually slows things down from around 90 ns/op to 120 ns/op. The main advantage is in cases where the callback actually does work.",FALSE,TRUE,28,39,79,1,TRUE,TRUE,FALSE,TRUE,0,40,2
trevnorris,"Here's another minor example using streams:",FALSE,TRUE,6,39,80,2,TRUE,FALSE,FALSE,TRUE,0,40,3
trevnorris,"The execution time before this patch is ~9000 ns/op, but with it around 7400 ns/op. Not a huge gain, but it does help set us up for more aggressive performance enhancements in the future.",FALSE,TRUE,34,39,81,3,TRUE,TRUE,FALSE,TRUE,0,40,4
trevnorris,"NOTE: Thanks @chrisdickinson for fixing my first Streams test.",FALSE,TRUE,9,39,82,4,TRUE,TRUE,FALSE,TRUE,0,40,5
petkaantonov,"We can do so much faster than this, and without changing api, with either code generation or copy-paste that specializes for a certain amount of arguments passed.",FALSE,FALSE,27,40,83,0,FALSE,TRUE,FALSE,TRUE,0,41,1
petkaantonov,"For instance calling a nextTick(fn, arg1, arg2) would create a TickCallback instance specialized to 2 arguments with an invoke method that does this.callback(this.arg1, this.arg2). You can have up to 4 different TickCallback classes before you go megamorphic, so you can specialize for 0, 1, 2 and n arguments. Actually since internally we use 0-3 arguments, we should not even specialize for n arguments at all but only 0, 1, 2 or 3.",FALSE,FALSE,72,40,85,2,FALSE,TRUE,TRUE,TRUE,0,41,2
trevnorris,"@petkaantonov but the call to nextTick() would become megamorphic because the number of arguments, and type of arguments, changes. And keeping the call to nextTick() fast is my main concern. It's a small call that can be inlined, iirc, but with variadic arguments it wouldn't be.",FALSE,TRUE,46,41,87,1,TRUE,TRUE,FALSE,TRUE,0,42,1
petkaantonov,"@trevnorris the amount or types of arguments themselves are not inline cached in the first place. The amount of arguments passed affects only arguments adaptor trampoline which is unrelated to inline caching.",FALSE,TRUE,32,42,88,0,FALSE,TRUE,FALSE,TRUE,0,43,1
petkaantonov,"The call to process.nextTick cannot be inlined right now because the process object is in dictionary mode and  therefore it isn't known at compile time whether process.nextTick will reference to the function at a given moment so it cannot be inlined. So to make it inlineable we only need to put the process object back into object mode after it has been stabilized.",FALSE,TRUE,64,42,90,2,FALSE,TRUE,FALSE,TRUE,0,43,2
petkaantonov,"Run this with --trace-inlining and you see nextTick is not inlined:",FALSE,TRUE,11,42,91,3,FALSE,FALSE,FALSE,TRUE,0,43,3
petkaantonov,"However, let's redempt process from dictionary hell:",FALSE,TRUE,7,42,92,4,FALSE,TRUE,FALSE,TRUE,0,43,4
petkaantonov,"Yay. And it doesn't matter how many arguments we pass or what types:",FALSE,TRUE,13,42,93,5,FALSE,TRUE,FALSE,TRUE,0,43,5
trevnorris,"@petkaantonov Thanks for the analysis. I'll rethink the process.nextTick(cb[, ... vargs ]) API choice.",FALSE,TRUE,14,43,94,0,TRUE,TRUE,FALSE,TRUE,0,44,1
trevnorris,"@petkaantonov so... yeah. anyway, it's performing much better right now then I swear it did during my initial testing.",FALSE,TRUE,19,44,95,0,TRUE,TRUE,FALSE,TRUE,0,45,1
trevnorris,"@iojs/collaborators the API is now process.nextTick(callback[, ... vargs]). Everyone alright w/ this?",FALSE,TRUE,12,44,96,1,TRUE,TRUE,FALSE,TRUE,0,45,2
vkurchatkin,"@trevnorris is this supposed to be new public API?",FALSE,TRUE,9,45,98,1,FALSE,TRUE,FALSE,TRUE,0,46,1
trevnorris,"@vkurchatkin why not? it's not  leaky  as @rvagg didn't like, it's exactly the same as setImmediate() and it's very helpful for those people who do use it.",FALSE,TRUE,27,46,100,1,TRUE,FALSE,FALSE,TRUE,0,47,1
rvagg,"YES! see also nodejs/node-v0.x-archive#6624 and the chain of PRs and issues from there up.",FALSE,TRUE,14,47,101,0,FALSE,TRUE,FALSE,TRUE,0,48,1
mscdex,"LGTM. What kind of impact do we see in the benchmarks for the affected core modules with this latest change?",FALSE,FALSE,20,48,103,1,FALSE,TRUE,FALSE,TRUE,0,49,1
yosuke-furukawa,"LGTM. setImmediate, setTimeout can pass the arguments.",FALSE,FALSE,7,49,104,0,FALSE,TRUE,FALSE,TRUE,0,50,1
trevnorris,"Anyone think this is deserving of a docs update? If not then I'll merge as-is.",FALSE,TRUE,15,50,106,1,TRUE,TRUE,FALSE,TRUE,0,51,1
vkurchatkin,"I think it does (+ semver-minor label)",FALSE,TRUE,7,51,108,1,FALSE,TRUE,FALSE,TRUE,0,52,1
petkaantonov,"This could be also merged right now as an unobservable change (with the doc changes reverted) and make the public API  release  later in a semver-minor.",FALSE,TRUE,26,52,110,1,FALSE,TRUE,FALSE,TRUE,0,53,1
trevnorris,"Thanks @petkaantonov. That would be my preference.",FALSE,TRUE,7,53,111,0,TRUE,TRUE,FALSE,TRUE,0,54,1
Fishrock123,"@trevnorris done any benchmarks yet?",FALSE,FALSE,5,54,113,1,FALSE,FALSE,FALSE,TRUE,0,55,1
Fishrock123,"I see that was the resolution as of the tc-meeting it was discussed in.",FALSE,FALSE,14,54,114,2,FALSE,FALSE,FALSE,TRUE,0,55,2
trevnorris,"@Fishrock123 some. Initial results showed improvements just above the margin of error. Part of the gain also comes from easier performance debugging, since functions won't DEOPT from being scoped. It's possible to create a benchmark that shows significant gains, but this is definitely a micro optimization.",FALSE,TRUE,46,55,116,1,TRUE,TRUE,FALSE,TRUE,0,56,1
trevnorris,"@iojs/tc Was this supposed to have landed before the 1.7 release?",FALSE,TRUE,11,56,118,1,TRUE,TRUE,FALSE,TRUE,0,57,1
cjihrig,"LGTM. Starting CI to verify.",FALSE,FALSE,5,57,119,0,FALSE,TRUE,FALSE,TRUE,0,58,1
cjihrig,"CI: https://jenkins-iojs.nodesource.com/job/iojs+any-pr+multi/515/",FALSE,FALSE,2,58,120,0,FALSE,TRUE,FALSE,TRUE,0,59,1
trevnorris,"Thanks. Landed in 10e31ba.",FALSE,TRUE,4,59,121,0,TRUE,TRUE,FALSE,TRUE,0,60,1
jbergstroem,"Possibly stupid question, but seeing this is server-minor - is 1.8.0 our next release?",FALSE,FALSE,14,60,122,0,FALSE,TRUE,FALSE,TRUE,0,61,1
rvagg,"@jbergstroem yes, either that or 2.0.0 if we get the https://github.com/iojs/io.js/milestones/2.0.0 changes sorted out",FALSE,TRUE,14,61,123,0,FALSE,FALSE,FALSE,TRUE,0,62,1
trevnorris,"@jbergstroem this should have been merged before 1.7 but wasn't.",FALSE,TRUE,10,62,124,0,TRUE,FALSE,TRUE,TRUE,0,63,1
jbergstroem,"Ok. I was pretty keen on getting 1.7.2 within a week or so with a fix to a shared build. Guessing 2.0 might make that easier since we'd branch off to master/1.x/2.x?",FALSE,TRUE,32,63,125,0,FALSE,TRUE,FALSE,TRUE,0,64,1
KenanSulayman,"🎉 🎉  Awesome! 🎉 🎉",FALSE,FALSE,6,64,126,0,FALSE,TRUE,FALSE,TRUE,0,65,1
igl,"Since nobody mentioned it: Isn't callback.bind(ctx, ...args) the same thing? Even more extensive with the possibility of setting a context.",FALSE,FALSE,20,65,128,1,FALSE,TRUE,FALSE,TRUE,0,66,1
petkaantonov,"@igl Yes, well only that, it's like 100000x slower.",FALSE,TRUE,9,66,130,1,FALSE,TRUE,FALSE,TRUE,0,67,1
