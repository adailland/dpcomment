% Generated by Discussion model rust.31539.txt
% File generated on 2017/08/11 11:55:43

@relation pr1502466943866

@attribute author String
@attribute textual String
@attribute isProjectMember {TRUE, FALSE}
@attribute isInvited {TRUE, FALSE}
@attribute numberOfWords numeric
@attribute commentsSoFar numeric
@attribute allUtterancesSoFar numeric
@attribute utterancesInCommentSoFar numeric
@attribute utteredByOriginalPoster {TRUE, FALSE}
@attribute hasCapitalizedWord {TRUE, FALSE}
@attribute containsShould {TRUE, FALSE}
@attribute hasDecisions {TRUE, FALSE}
@attribute howManyDecisions numeric
@attribute idComment numeric
@attribute idPara numeric

@data
michaelwoerister,"This PR changes the way symbol names are generated by the compiler. The new algorithm reflects the current state of the discussion over at rust-lang/rfcs#689.",FALSE,FALSE,25,0,0,0,TRUE,TRUE,FALSE,TRUE,0,1,1
michaelwoerister,"Once it is done, it will also fix issue #30330. I want to add a test case for that before closing it though.",FALSE,FALSE,23,0,1,1,TRUE,TRUE,FALSE,TRUE,0,1,2
michaelwoerister,"I also want to do some performance tests. The new algorithm does a little more work than the previous one due to various reasons, and it might make sense to adapt it in a way that allows it to be implemented more efficiently.",FALSE,FALSE,43,0,2,2,TRUE,TRUE,FALSE,TRUE,0,1,3
michaelwoerister,"@nikomatsakis: It would be nice if there was a way of finding out if a DefPath refers to something in the current crate or in an external one. The information is already there, it's just not accessible at the moment. I'll probably propose some minor changes there, together with some facilities to allow for accessing DefPaths without allocating a Vec for them.",FALSE,FALSE,62,0,4,4,TRUE,TRUE,FALSE,TRUE,0,1,4
michaelwoerister,"Actually  crate qualify  symbols, as promised in the docs.",FALSE,FALSE,9,0,6,6,TRUE,FALSE,FALSE,TRUE,0,1,5
michaelwoerister,"Add a test case showing that symbol names are deterministic.",FALSE,FALSE,10,0,7,7,TRUE,FALSE,FALSE,TRUE,0,1,6
michaelwoerister,"Maybe add a test case showing that symbol names are stable against small code changes.",FALSE,FALSE,15,0,8,8,TRUE,FALSE,FALSE,TRUE,0,1,7
michaelwoerister,"One thing that might be interesting to the @rust-lang/compiler team:I've used SipHash exclusively now for generating symbol hashes. Previously it was only used for monomorphizations and the rest of the code used a truncated version on SHA256. Is there any benefit to sticking to SHA? I don't really see one since we only used 64 bits of the digest anyway, but maybe I'm missing something? ==> Just switched things back to SHA-2 for now.",FALSE,FALSE,74,0,10,10,TRUE,TRUE,FALSE,TRUE,0,1,8
rust-highfive,"r? @Aatch",FALSE,FALSE,2,1,11,0,FALSE,FALSE,FALSE,TRUE,0,2,1
rust-highfive,"(rust_highfive has picked a reviewer for you, use r? to override)",FALSE,FALSE,11,1,12,1,FALSE,FALSE,FALSE,TRUE,0,2,2
bluss,"SipHash it is an algorithm designed by cryptographers, but it's not in the same category of hash functions as SHA-2 which is a cryptographic hash function.",FALSE,FALSE,26,2,14,1,FALSE,TRUE,FALSE,TRUE,0,3,1
bluss,"For example, the SipHash paper says",FALSE,FALSE,6,2,15,2,FALSE,TRUE,FALSE,TRUE,0,3,2
bluss,"In general, building a MAC from a general-purpose cryptographic hash function appears to be a highly suboptimal ap-proach: general-purpose cryptographic hash functions perform many extra com-putations for the goal of collision resistance on public inputs, while MACs havesecret keys and do not need collision resistance.",FALSE,FALSE,45,2,16,3,FALSE,TRUE,FALSE,TRUE,0,3,3
bluss,"We comment that SipHash is not meant to be, and (obviously) is not, collision-resistant.",FALSE,FALSE,14,2,18,5,FALSE,TRUE,FALSE,TRUE,0,3,4
bluss,"This use case does not use a secret key with SipHash (it always uses the default key), and it wants to have collision resistance on public inputs. Yes, in practice, we can find collisions for either of them if the hash is only 64 bits long, but only SHA-2 is designed for this case.",FALSE,FALSE,54,2,20,7,FALSE,TRUE,FALSE,TRUE,0,3,5
michaelwoerister,"@bluss Those are good references. It really sounds like SipHash is not a good candidate for this use case. I'll switch things to SHA-2.",FALSE,FALSE,24,3,22,1,TRUE,TRUE,FALSE,TRUE,0,4,1
bluss,"What's the impact of a collision?",FALSE,TRUE,6,4,24,1,FALSE,TRUE,FALSE,TRUE,0,5,1
bors,"â˜”ï¸? The latest upstream changes (presumably #31487) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,FALSE,17,5,25,0,FALSE,TRUE,FALSE,TRUE,0,6,1
michaelwoerister,"What's the impact of a collision?",FALSE,FALSE,6,6,26,0,TRUE,TRUE,FALSE,TRUE,0,7,1
michaelwoerister,"Symbol conflicts: Two functions with different signatures could end up with the same name. If it's in the same crate, compilation will probably just fail. If it's in different crates, either linking fails due to a conflict or the wrong symbol might be linked, resulting most probably in untraceable, subtle memory corruption.",FALSE,FALSE,52,6,28,2,TRUE,TRUE,FALSE,TRUE,0,7,2
nikomatsakis,"cc @alexcrichton @brson",FALSE,TRUE,3,8,30,0,FALSE,FALSE,FALSE,TRUE,0,9,1
alexcrichton,"This looks fantastic to me, nice work @michaelwoerister!",FALSE,TRUE,8,9,31,0,FALSE,TRUE,FALSE,TRUE,0,10,1
alexcrichton,"I wouldn't have too many opinions about SHA2 vs SipHash, I suspect either choice will be suitable for our purposes. I'd personally love to jettison the SHA2 implementation in the compiler, and I highly doubt we can find a SipHash practical collision with the same path, different metadata, and yet something like different type substitutions. We should also be able to change this if we ever need to really as we can only guarantee no recompiles within one version of Rust anyway.",FALSE,TRUE,82,9,33,2,FALSE,TRUE,TRUE,TRUE,0,10,2
michaelwoerister,"Thanks for the comment @alexcrichton. It's true, we have been using SipHash for function monomorphization for quite a while now and I've never seen a problem with that.",FALSE,TRUE,28,10,35,1,TRUE,TRUE,FALSE,TRUE,0,11,1
michaelwoerister,"My assumption about the requirements for this hash function (and later also one used for fingerprinting incremental compilation artifacts) is that it should provide good distribution so that collision probability is as low as it can theoretically be for a given number of hash value bits, BUT that we don't care about   security , i.e. whether it's easy to find hash collisions on purpose. Or is there some kind of  attack scenario  that I'm overlooking?",FALSE,TRUE,75,10,37,3,TRUE,TRUE,TRUE,TRUE,0,11,2
michaelwoerister,"For maximum performance (and if the above assumptions hold), we could also use something like CRC64.Anyway, I think for this PR, I'll just leave SHA-2 in.",FALSE,TRUE,26,10,39,5,TRUE,TRUE,FALSE,TRUE,0,11,3
bluss,"Here's the issue about collisions in type_id, but that's only tangential to this: #10389. As long as we go into this with the knowledge that SipHash is just a regular hash function, I'm fine.",FALSE,TRUE,34,11,40,0,FALSE,TRUE,FALSE,TRUE,0,12,1
michaelwoerister,"@bluss Thanks for the link!",FALSE,TRUE,5,12,41,0,TRUE,TRUE,FALSE,TRUE,0,13,1
michaelwoerister,"As an aside, I think  -C metadata  is a bit of a misnomer. Something like  -C salt  or  -C disambiguator  would be clearer (although the later one definitely is too long).",FALSE,TRUE,31,13,43,1,TRUE,TRUE,FALSE,TRUE,0,14,1
michaelwoerister,"Another side note: Now that we get predictable symbol names for monomorphizations, we might want to start sharing them cross-crate.",FALSE,TRUE,20,14,45,1,TRUE,TRUE,FALSE,TRUE,0,15,1
alexcrichton,"Ah as another data point in Cargo we extensively use SipHash for fingerprinting crates and packages. I haven't at least seen anyone run into any problems with that.",FALSE,TRUE,28,15,47,1,FALSE,TRUE,FALSE,TRUE,0,16,1
alexcrichton,"I also agree that at this point -C metadata is basically just wrong, but I don't think we can rename due to the extensive usage in Cargo right now :(",FALSE,TRUE,30,15,49,3,FALSE,TRUE,FALSE,TRUE,0,16,2
bors,"â˜”ï¸? The latest upstream changes (presumably #31524) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,FALSE,17,16,50,0,FALSE,TRUE,FALSE,TRUE,0,17,1
arielb1,"What's the problem with the compiler SHA2 implementation? Making a collision with SipHash with a known key only requires some modifiable string on both ends - e.g. an item name, or comment.",FALSE,FALSE,32,17,52,1,FALSE,TRUE,FALSE,TRUE,0,18,1
michaelwoerister,"@arielb1 I don't think anything is wrong with the SHA-2 implementation per se. It's just incomplete (only supports SHA256) and it's one more piece of code that needs to be maintained. I'd guess that second point is the main motivation for wanting to get rid of it.",FALSE,TRUE,47,18,54,1,TRUE,TRUE,FALSE,TRUE,0,19,1
michaelwoerister,"So, here's something interesting: Some of the test cases (e.g. run-pass/typeid-intrinsic.rs) link to an external crate that has exactly the same name, and thus the crate graph ends up with two identical crates in it. So far, this was no problem because the two crates still have a different SVH but under the new scheme, two crates are considered the same if they have the same name/metadata pair.",FALSE,TRUE,68,19,56,1,TRUE,TRUE,FALSE,TRUE,0,20,1
michaelwoerister,"The tests now fail with 'duplicate symbol' linker errors, but I guess the sensible thing to do here, is to emit a compilation error when the crate loader discovers two crates with the same name/metadata but different SVHs.",FALSE,TRUE,38,19,58,3,TRUE,TRUE,FALSE,TRUE,0,20,2
michaelwoerister,"Up until that last commit this passes make check for me locally, with the last commit it looks good too, except that the run-pass/backtrace.rs test case fails (it seems to panic while trying to write the backtrace). Does anybody have an idea what that could be about? In general, creating backtraces seems to work just fine...",FALSE,TRUE,56,20,60,1,TRUE,TRUE,FALSE,TRUE,0,21,1
michaelwoerister,"That's the error in question: https://travis-ci.org/rust-lang/rust/builds/109449298#L6591",FALSE,TRUE,6,21,61,0,TRUE,TRUE,FALSE,TRUE,0,22,1
alexcrichton,"Oh you should just be able to update the test to check for backtrace::foo instead of only foo, I believe that previously the crate name was never on symbols, just in the debug description of symbols.",FALSE,TRUE,36,22,63,1,FALSE,TRUE,TRUE,TRUE,0,23,1
michaelwoerister,"@alexcrichton I'm afraid it's something more complicated than that. If you look at the actual backtrace that the subprocess provides (see below), it looks like there is a panic while creating the backtrace (in std::sys::backtrace::tracing::imp::write in gcc_s.rs). Something causes an error there.",FALSE,TRUE,42,23,65,1,TRUE,TRUE,FALSE,TRUE,0,24,1
alexcrichton,"Hm, that looks normal to me though? It looks like the assertion message originates from here which was testing a panic originating here. The bad output happened because it expected to find - foo where it instead printed - backtrace::foo.",FALSE,TRUE,40,24,67,1,FALSE,TRUE,FALSE,TRUE,0,25,1
alexcrichton,"In other words we should probably really look into skipping the top few frames when printing a backtrace, but other than that it should be good!",FALSE,TRUE,26,24,69,3,FALSE,TRUE,TRUE,TRUE,0,25,2
michaelwoerister,"Yes, you're right of course :)The test passes just fine now.",FALSE,TRUE,11,25,70,0,TRUE,TRUE,FALSE,TRUE,0,26,1
michaelwoerister,"So, commit 545cc8f adds an error to the compiler that is meant to make it easier to understand the new kinds of linker errors that are possible now with the new symbol naming scheme.However, the condition on which the error is emitted is more conservative than it strictly needs to be:When the graph of crates being compiled contains two different crates with the same 'crate-name' and the same set of -Cmetadata provided salts, the compiler errors out, since then symbol conflicts can occur. In many cases though, there wouldn't be any conflicts because the crates don't define the same items.",FALSE,TRUE,100,26,72,1,TRUE,TRUE,FALSE,TRUE,0,27,1
michaelwoerister,"At the moment we allow these crate graphs, so adding this error will constitute a breaking change. I think, it's a good idea to be conservative here, since it semantically is a conflict trying to compiler two different crates with the same  identifier , but I wanted to make sure that this is indeed what we want to do here.",FALSE,TRUE,59,26,74,3,TRUE,TRUE,FALSE,TRUE,0,27,2
alexcrichton,"Good idea @michaelwoerister! I wonder though, as evidenced by the large number of test renames, maybe we want to somehow consider crate-type as well? I think that this may actually affect Cargo as well because we'll commonly have a project with both a library and a binary of the same crate name and also both of which have the same -C metadata. In retrospect perhaps not the best forward thinking there, but could mean that this could break in practice?",FALSE,TRUE,80,27,76,1,FALSE,TRUE,FALSE,TRUE,0,28,1
michaelwoerister,"Hm, it seems a bit ad hoc to make the crate-type part of the crate identifier. In the Cargo case you talked of, will the library and binary versions of a crate ever show up in the same crate graph? If so, couldn't Cargo take care of incorporating the crate-type by specifying an additional corresponding -C metadata option? Do we give any guarantees as to with which -Cmetadata values a crate will end up with?",FALSE,TRUE,75,28,78,1,TRUE,TRUE,FALSE,TRUE,0,29,1
michaelwoerister,"The reason why I'm a bit reluctant to hard-coding the crate-type into symbol hashes, is that right now we have a very simple and straightforward model: a crate is identified by its name and, if further disambiguation is needed, the salt provided via -Cmetadata.  The salting mechanism is so general that it can be used in place of any other mechanism, and so it feels to me like we are unnecessarily muddling things if we start to incorporate other things into the salt as well.",FALSE,TRUE,86,28,80,3,TRUE,TRUE,FALSE,TRUE,0,29,2
alexcrichton,"Yeah it's true that it feels ad-hoc, but this comes up pretty frequently I believe because binary crates in Cargo often link to their library counterparts. Cargo could definitely pass -C metadata, but currently all existing cargo binaries don't. It would basically mean that an older Cargo could not work with a newer compiler (which Cargo currently relies on for snapshots).",FALSE,TRUE,61,29,82,1,FALSE,TRUE,FALSE,TRUE,0,30,1
alexcrichton,"We could always land a Cargo change now and then hold off on this for a bit? I think this may want to land sooner than that though?",FALSE,TRUE,28,29,84,3,FALSE,TRUE,FALSE,TRUE,0,30,2
alexcrichton,"I do agree that the model in this PR feels right, although in terms of usability it may lack a bit?",FALSE,TRUE,21,29,86,5,FALSE,TRUE,FALSE,TRUE,0,30,3
alexcrichton,"Another possibility would be to just say  the salt has bin appended to it if a binary is being created  or something like that, but that's also not... great",FALSE,TRUE,29,30,88,1,FALSE,TRUE,FALSE,TRUE,0,31,1
michaelwoerister,"We do allow one compiler run to produce multiple crate-types, right? I.e. rustc --crate-type=lib,bin will produce an executable and a library. However, now we have a problem: the executable and the binary should have different salts and thus all their symbol names should be different. It's doable, but implementing this without unnecessarily redoing a lot of work would be a bit of effort (we'd need to keep a map of symbol names and do substitutions in the optimized IR or do that directly in the binaries and in crate metadata).",FALSE,TRUE,90,31,90,1,TRUE,TRUE,TRUE,TRUE,0,32,1
michaelwoerister,"Another way to handle things would probably be to keep using the old symbol naming scheme and activating the new one only when -Zincr-comp is specified. That way we'd have some time to make the change to Cargo without being blocked on it.",FALSE,TRUE,43,31,92,3,TRUE,TRUE,FALSE,TRUE,0,32,2
alexcrichton,"Yeah you can emit both a bin and a lib at the same time, but that may be sufficiently rare and  weird  that we shouldn't worry about it too much. In either case I don't think we'd want to retranslate everything with just different symbol names.",FALSE,TRUE,46,32,94,1,FALSE,TRUE,TRUE,TRUE,0,33,1
alexcrichton,"I'm a little worried about breaking older Cargo's compatibility with newer rustc, though, mostly in terms of portability. Platforms which aren't tier 1 for us and don't have Cargo typically rarely update Cargo as it's somewhat difficult for them to compile, so this'd force them all to update to a newer Cargo. Not necessarily the end of the world, and may not be the much effort in the grand scheme of things.",FALSE,TRUE,72,32,96,3,FALSE,TRUE,FALSE,TRUE,0,33,2
bors,"â˜”ï¸? The latest upstream changes (presumably #31882) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,FALSE,17,33,97,0,FALSE,TRUE,FALSE,TRUE,0,34,1
nikomatsakis,"I personally find these two models equivalent in terms of their simplicity :",FALSE,TRUE,11,34,99,1,FALSE,TRUE,FALSE,TRUE,0,35,1
nikomatsakis,"Hash is crate name and salt",FALSE,TRUE,6,34,100,2,FALSE,FALSE,FALSE,TRUE,0,35,2
nikomatsakis,"Hash is crate name, type, and salt",FALSE,TRUE,7,34,101,3,FALSE,FALSE,FALSE,TRUE,0,35,3
nikomatsakis,"In my mind, the salt logically means  authority and version number .Basically it is the global naming scheme.",FALSE,TRUE,17,34,102,4,FALSE,FALSE,FALSE,TRUE,0,35,4
nikomatsakis,"It seems to me that since cargo allows a binary to link to itself as alibrary, that implies that option 2 is the right way to think of things.That is, the salt here would be   crates.io/version  and that remainsconstant between both bin/lib. (The actual salt may be different but thatdoesn't really matter, this would be sufficient.)",FALSE,TRUE,57,34,103,5,FALSE,FALSE,FALSE,TRUE,0,35,5
nikomatsakis,"On Feb 25, 2016 3:42 PM,  bors  notifications@github.com wrote:",FALSE,TRUE,9,34,104,6,FALSE,TRUE,FALSE,TRUE,0,35,6
nikomatsakis,"[image: â˜”ï¸?] The latest upstream changes (presumably #31882#31882) made this pull requestunmergeable. Please resolve the merge conflicts.",FALSE,TRUE,17,34,105,7,FALSE,TRUE,FALSE,TRUE,0,35,7
nikomatsakis,"â€”Reply to this email directly or view it on GitHub#31539 (comment).",FALSE,TRUE,11,34,106,8,FALSE,TRUE,FALSE,TRUE,0,35,8
michaelwoerister,"In my mind, the salt logically means  authority and version number .",FALSE,TRUE,11,35,107,0,TRUE,TRUE,FALSE,TRUE,0,36,1
michaelwoerister,"I see the salt more as a general purpose disambiguation mechanism (which cargo then uses to provide  authority and version number )",FALSE,TRUE,21,35,109,2,TRUE,TRUE,FALSE,TRUE,0,36,2
michaelwoerister,"Another possibility would be to just say  the salt has bin appended to it if a binary is being created  or something like that, but that's also not... great",FALSE,TRUE,29,35,110,3,TRUE,FALSE,FALSE,TRUE,0,36,3
michaelwoerister,"I'll give this a try now, so that the PR can move forward. At some point, I'd still like to come back to this though and see if we can't do something with more consistent semantics -- maybe at the cost of forcing some non-tier 1 platforms to re-compile their Cargo distributions.",FALSE,TRUE,52,35,112,5,TRUE,TRUE,FALSE,TRUE,0,36,4
alexcrichton,"I've opened up rust-lang/cargo#2420 to ensure that Cargo generates distinct metadata for libs/bins to hopefully protect against whatever we decide to to moving forward.",FALSE,TRUE,24,36,113,0,FALSE,TRUE,FALSE,TRUE,0,37,1
michaelwoerister,"To give a little update on this: The core changes to symbol naming seem to be working for some time now, but there are many small issues with the test framework and how it sets up LD_LIBRARY_PATH and related things. It's very time-consuming to work through these issues since some of them only show up in stage2. But (slow) progress is being made on this PR.",FALSE,TRUE,66,37,114,0,TRUE,TRUE,FALSE,TRUE,0,38,1
bors,"â˜”ï¸? The latest upstream changes (presumably #31979) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,FALSE,17,38,115,0,FALSE,TRUE,FALSE,TRUE,0,39,1
briansmith,"The use of the term  salt  is confusing for crypto people reading these patches since this isn't a salt in the sense crypto people normally use. I recommend using some other term.",FALSE,FALSE,32,39,117,1,FALSE,TRUE,FALSE,TRUE,0,40,1
briansmith,"it seems you are using SHA-256 for some security-sensitive reason. If so, then you should document why/how the inputs to SHA-256 are securely delimited. But, instead, I recommend that you switch to labeled length-prefixed values.",FALSE,FALSE,35,39,119,3,FALSE,TRUE,TRUE,TRUE,0,40,2
briansmith,"Bad (the way the patch is written):",FALSE,FALSE,7,39,120,4,FALSE,FALSE,FALSE,TRUE,0,40,3
briansmith,"To see why this is bad, consider s = {  ab,  c  } vs s = {  a ,  bc  }. These would hash to the same value without the length prefixes, but they mean different things. Similarly, instead of having an optional field for  -exe , it is better to have a non-optional, labeled, length-prefixed field.",FALSE,FALSE,55,39,122,6,FALSE,TRUE,FALSE,TRUE,0,40,4
briansmith,"Also, the documentation for session.opts.cg.metadata and other things should be documented so that people maintaining it know that it is a security-relevant function. In particular, all the stuff about labels, length prefixes, and avoiding optional fields would apply to that above.",FALSE,FALSE,41,39,124,8,FALSE,TRUE,TRUE,TRUE,0,40,5
briansmith,"Finally, the documentation for this code should make it clear exactly why it is secure and what one would need to do to extend it securely (i.e. using labeled length-prefixed subfields, avoiding optional fields, and never reusing a label for a different purpose).",FALSE,FALSE,43,39,126,10,FALSE,TRUE,TRUE,TRUE,0,40,6
briansmith,"Ah as another data point in Cargo we extensively use SipHash for fingerprinting crates and packages.",FALSE,FALSE,16,40,127,0,FALSE,TRUE,FALSE,TRUE,0,41,1
briansmith,"IMO, you should either switch to CRC-32 (if it doesn't need to be secure) or a secure hash function, if it does need to be secure. Misusing SipHash for something it wasn't intended for is worse than either of those options, IMO.",FALSE,FALSE,42,40,129,2,FALSE,TRUE,TRUE,TRUE,0,41,2
michaelwoerister,"@briansmith Thanks a lot for your comments!I have some questions:",FALSE,TRUE,10,41,130,0,TRUE,TRUE,FALSE,TRUE,0,42,1
michaelwoerister,"The use of the term  salt  is confusing for crypto people reading these patches since this isn't a salt in the sense crypto people normally use. I recommend using some other term.",FALSE,TRUE,32,41,131,1,TRUE,TRUE,FALSE,TRUE,0,42,2
michaelwoerister,"Can you elaborate on that? The value stored as  crate salt  is used as additional input to the hash function we use when generating symbol hashes. I thought that would kind of match up with how the term is used normally.",FALSE,TRUE,41,41,133,3,TRUE,TRUE,FALSE,TRUE,0,42,3
michaelwoerister,"it seems you are using SHA-256 for some security-sensitive reason.",FALSE,TRUE,10,41,134,4,TRUE,TRUE,FALSE,TRUE,0,42,4
michaelwoerister,"No, we actually don't. At least as far as I know we just want something that provides good random distribution.",FALSE,TRUE,20,41,136,6,TRUE,TRUE,FALSE,TRUE,0,42,5
michaelwoerister,"But, instead, I recommend that you switch to labeled length-prefixed values.",FALSE,TRUE,11,41,137,7,TRUE,TRUE,FALSE,TRUE,0,42,6
michaelwoerister,"That's a good point in any case. I'll fix that.",FALSE,TRUE,10,41,138,8,TRUE,TRUE,FALSE,TRUE,0,42,7
michaelwoerister,"Similarly, instead of having an optional field for  -exe , it is better to have a non-optional, labeled, length-prefixed field.",FALSE,TRUE,19,41,139,9,TRUE,FALSE,FALSE,TRUE,0,42,8
michaelwoerister,"Well, since we are appending the  -exe  string to something that something that can't contain a - or an x we should be fine here.",FALSE,TRUE,25,41,140,10,TRUE,FALSE,TRUE,TRUE,0,42,9
michaelwoerister,"@alexcrichton @FlaPer87 I'm working on putting in the link-guard mechanism hinted at at various places and I've run into a problem with the run-make/relocation-model test case.Some background on the link-guard: At the moment we want to prevent compiling something against one version of a dynamic library and then, at runtime accidentally using a different version of the dynamic library. Before this patch this was impossible because every symbol had the SVH in it and you'd get an error by the dynamic linker when using the wrong version of a dylib. After the patch this isn't the case any more, so we want to add some safety measure to prevent this error case.The way I have implemented this for locally is the following:",FALSE,TRUE,122,42,142,1,TRUE,TRUE,FALSE,TRUE,0,43,1
michaelwoerister,"In every crate that we compile, we emit a function called __rustc_link_guard_<crate-name>_<crate-svh>",FALSE,TRUE,12,42,143,2,TRUE,FALSE,FALSE,TRUE,0,43,2
michaelwoerister,"The body of this function contains calls to the __rustc_link_guard functions of all dependencies.",FALSE,TRUE,14,42,144,3,TRUE,FALSE,FALSE,TRUE,0,43,3
michaelwoerister,"An executable contains a call to it's own __rustc_link_guard functions.",FALSE,TRUE,10,42,145,4,TRUE,FALSE,FALSE,TRUE,0,43,4
michaelwoerister,"As a consequence the __rustc_link_guard function call graph mirrors the crate graph and the dynamic linker will fail if a wrong dylib is loaded somewhere because its __rustc_link_guard function will contain a different SVH in its name.",FALSE,TRUE,37,42,147,6,TRUE,TRUE,FALSE,TRUE,0,43,5
michaelwoerister,"So far, this works pretty well. However, in the relocation-model test I get an error when trying to create a dylib with -Crelocation-model=static, which is kind of to be expected because statically compiling a dynamic library does not make much sense (right?). Why does it work without the link-guard? Because the test file being compiled just contains an empty main function and consequently the resulting binary does not contain any relocations. With the link-guard, however, we always reference the __rustc_link_guard functions in dependencies and thus linking fails:",FALSE,TRUE,87,42,149,8,TRUE,TRUE,FALSE,TRUE,0,43,6
michaelwoerister,"My proposed fix for this would be to just remove the cases where a dylib is compiled with relocation-model=static since it's not supported in general anyway. But I'd like to get your feedback on this first. Any thoughts?",FALSE,TRUE,38,42,151,10,TRUE,TRUE,FALSE,TRUE,0,43,7
alexcrichton,"@michaelwoerister yeah that sounds fine to me, it was probably just added via copy/paste and not necessarily pored over much.",FALSE,TRUE,20,43,152,0,FALSE,FALSE,FALSE,TRUE,0,44,1
briansmith,"Can you elaborate on that? The value stored as  crate salt  is used as additional input to the hash function we use when generating symbol hashes. I thought that would kind of match up with how the term is used normally.",FALSE,TRUE,41,44,153,0,FALSE,TRUE,FALSE,TRUE,0,45,1
briansmith,"Usually we (I) would call that  context . Salts are usually random and/or intended to be unguessable by an attacker.",FALSE,TRUE,19,44,155,2,FALSE,TRUE,FALSE,TRUE,0,45,2
briansmith,"No, we actually don't. At least as far as I know we just want something that provides good random distribution.",FALSE,TRUE,20,44,156,3,FALSE,TRUE,FALSE,TRUE,0,45,3
briansmith,"In other words, you don't use an equality comparison of these values as a substitute for a value comparison, then, right? Assuming that is the case, why not just use FNV? If that is not the case, then you are indeed using SHA-256 as a security mechanism.",FALSE,TRUE,47,44,158,5,FALSE,TRUE,FALSE,TRUE,0,45,4
briansmith,"Well, since we are appending the  -exe  string to something that something that can't contain a - or an x we should be fine here.",FALSE,TRUE,25,44,159,6,FALSE,FALSE,TRUE,TRUE,0,45,5
michaelwoerister,"Usually we (I) would call that  context . Salts are usually random and/or intended to be unguessable by an attacker.",FALSE,TRUE,19,45,161,0,TRUE,TRUE,FALSE,TRUE,0,46,1
michaelwoerister,"OK, in that case I'll rename it. The term  salt  is only used internally anyway, so it should be OK to use something more unwieldy like  crate_disambiguator .",FALSE,TRUE,27,45,162,1,TRUE,TRUE,TRUE,TRUE,0,46,2
michaelwoerister,"In other words, you don't use an equality comparison of these values as a substitute for a value comparison, then, right? Assuming that is the case, why not just use FNV? If that is not the case, then you are indeed using SHA-256 as a security mechanism.",FALSE,TRUE,47,45,163,2,TRUE,TRUE,FALSE,TRUE,0,46,3
michaelwoerister,"Implicitly we do make an equality comparison: If there is a collision between symbol hashes, you can get linker errors. What we don't care about is whether such collisions can easily be fabricated by an  attacker . What we want is a sufficiently low probability of accidental collisions.",FALSE,TRUE,47,45,165,4,TRUE,TRUE,FALSE,TRUE,0,46,4
michaelwoerister,"Anyway, more documentation on the respective fields and methods is always a good idea. I'll add those.",FALSE,TRUE,17,45,166,5,TRUE,TRUE,FALSE,TRUE,0,46,5
michaelwoerister,"@alexcrichton Great, thanks for the quick response!",FALSE,TRUE,7,46,167,0,TRUE,TRUE,FALSE,TRUE,0,47,1
arielb1,"I would really like the SVH to be injective (maybe use RBML?) to avoid annoying matches.",FALSE,TRUE,16,47,170,2,FALSE,TRUE,FALSE,TRUE,0,48,1
michaelwoerister,"I would really like the SVH to be injective (maybe use RBML?) to avoid annoying matches.",FALSE,TRUE,16,48,172,1,TRUE,TRUE,FALSE,TRUE,0,49,1
michaelwoerister,"That should already be the case in practice, if the hash function used (currently SipHash for the SVH) has a low enough probability of collisions. Can you go into more detail on the motivation of your comment?",FALSE,TRUE,37,48,174,3,TRUE,TRUE,TRUE,TRUE,0,49,2
arielb1,"I was talking about the content being hashed over.",FALSE,TRUE,9,49,176,1,FALSE,FALSE,FALSE,TRUE,0,50,1
arielb1,"There's an annoying issue if, say, you concatenate names together without a separator, so that  foo bar  is the same as  fo obar .",FALSE,TRUE,23,49,177,2,FALSE,FALSE,FALSE,TRUE,0,50,2
arielb1,"Also, I would prefer to use SHA256 instead of SipHash for collision-resistance - use functions for their correct use!",FALSE,TRUE,19,49,178,3,FALSE,TRUE,FALSE,TRUE,0,50,3
michaelwoerister,"@arielb1Agreed on all points. There probably are some places where something like this could happen in the current implementation.",FALSE,TRUE,19,50,179,0,TRUE,TRUE,FALSE,TRUE,0,51,1
michaelwoerister,"Note though that this PR is only tangentially related to the SVH, so I'll not try to address these issues here.",FALSE,TRUE,21,50,180,1,TRUE,TRUE,FALSE,TRUE,0,51,2
bors,"â˜”ï¸? The latest upstream changes (presumably #31710) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,FALSE,17,51,181,0,FALSE,TRUE,FALSE,TRUE,0,52,1
nikomatsakis,"@michaelwoerister -- so what are the outstanding blocking issues before this can land? I am thinking that I will rebase #32016 on top of it, since the work I am doing there about symbol naming for impl will benefit from the work you've done here (and would conflict otherwise).",FALSE,TRUE,49,52,182,0,FALSE,TRUE,FALSE,TRUE,0,53,1
nikomatsakis,"Also, I'll steal the review from @Aatch.",FALSE,TRUE,7,53,183,0,FALSE,TRUE,FALSE,TRUE,0,54,1
nikomatsakis,"(Unless he objects :)",FALSE,TRUE,4,54,184,0,FALSE,FALSE,FALSE,TRUE,0,55,1
nikomatsakis,"@arielb1 regarding the SVH stuff, I am also using it for #32016 to hash the content of HIR nodes and determine what has changed. Obviously in that case I care a lot about conflicts, so I will take a look at fixing the problems you highlighted. Seems straight-forward enough... (There are a few other things I wanted to change anyway)",FALSE,TRUE,60,55,185,0,FALSE,TRUE,FALSE,TRUE,0,56,1
michaelwoerister,"so what are the outstanding blocking issues before this can land?",FALSE,TRUE,11,56,186,0,TRUE,FALSE,FALSE,TRUE,0,57,1
michaelwoerister,"As of right now, none :)",FALSE,TRUE,6,56,187,1,TRUE,FALSE,FALSE,TRUE,0,57,2
nikomatsakis,"@michaelwoerister very good, will review pronto",FALSE,TRUE,6,57,188,0,FALSE,FALSE,FALSE,TRUE,0,58,1
nikomatsakis,"@bors r+",FALSE,TRUE,2,58,189,0,FALSE,FALSE,FALSE,TRUE,0,59,1
bors,"ðŸ“Œ Commit f425c19 has been approved by nikomatsakis",FALSE,TRUE,8,59,190,0,FALSE,TRUE,FALSE,TRUE,0,60,1
bors,"âŒ›ï¸? Testing commit f425c19 with merge e04eae4...",FALSE,TRUE,7,60,191,0,FALSE,TRUE,FALSE,TRUE,0,61,1
bors,"ðŸ’” Test failed - auto-win-msvc-32-opt",FALSE,TRUE,5,61,192,0,FALSE,TRUE,FALSE,TRUE,0,62,1
nikomatsakis,"@michaelwoerister failure is related to the link guard somehow (from here):",FALSE,TRUE,11,62,193,0,FALSE,FALSE,FALSE,TRUE,0,63,1
michaelwoerister,"Probably something related to the MSVC toolchain. I'll investigate.",FALSE,TRUE,9,63,194,0,TRUE,TRUE,FALSE,TRUE,0,64,1
bors,"â˜”ï¸? The latest upstream changes (presumably #32112) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,TRUE,17,64,195,0,FALSE,TRUE,FALSE,TRUE,0,65,1
eddyb,"@michaelwoerister Would it be possible, after this change, to avoid storing item_symbols in metadata and compute them on-demand?Last I checked that was the only reason we couldn't write metadata before entering trans which could allow us to have .rlib files usable by other compilations while the current compilation is in trans, and only delay linking until all the trans jobs are done (cc @alexcrichton who knows about my previous attempt at this).",FALSE,FALSE,72,65,197,1,FALSE,TRUE,FALSE,TRUE,0,66,1
michaelwoerister,"Would it be possible, after this change, to avoid storing item_symbols in metadata and compute them on-demand?",FALSE,TRUE,17,66,198,0,TRUE,TRUE,FALSE,TRUE,0,67,1
michaelwoerister,"Yes, that should be possible. Maybe not immediately, as some of the internal symbols still use gensym_name but after that is changed (in a subsequent PR) symbol names should be entirely predictable.",FALSE,TRUE,32,66,200,2,TRUE,TRUE,TRUE,TRUE,0,67,2
michaelwoerister,"... have .rlib files usable by other compilations while the current compilation is in trans ...",FALSE,TRUE,16,66,201,3,TRUE,FALSE,FALSE,TRUE,0,67,3
michaelwoerister,"Oh, neat!",FALSE,TRUE,2,66,202,4,TRUE,FALSE,FALSE,TRUE,0,67,4
michaelwoerister,"@bors r=nikomatsakis",FALSE,TRUE,2,67,203,0,TRUE,FALSE,FALSE,TRUE,0,68,1
bors,"ðŸ“Œ Commit d534c75 has been approved by nikomatsakis",FALSE,TRUE,8,68,204,0,FALSE,TRUE,FALSE,TRUE,0,69,1
michaelwoerister,"The link-guard symbols where not added to the DLL def file on Windows. Let's give it another try.",FALSE,TRUE,18,69,205,0,TRUE,TRUE,FALSE,TRUE,0,70,1
bors,"ðŸ”’ Merge conflict",FALSE,TRUE,3,70,206,0,FALSE,TRUE,FALSE,TRUE,0,71,1
bors,"â˜”ï¸? The latest upstream changes (presumably #32238) made this pull request unmergeable. Please resolve the merge conflicts.",FALSE,TRUE,17,71,207,0,FALSE,TRUE,FALSE,TRUE,0,72,1
michaelwoerister,"@bors r=nikomatsakis (after rebase)",FALSE,TRUE,4,72,208,0,TRUE,FALSE,FALSE,TRUE,0,73,1
bors,"ðŸ“Œ Commit f6b0f17 has been approved by nikomatsakis",FALSE,TRUE,8,73,209,0,FALSE,TRUE,FALSE,TRUE,0,74,1
bors,"âŒ›ï¸? Testing commit f6b0f17 with merge 8c4d880...",FALSE,TRUE,7,74,210,0,FALSE,TRUE,FALSE,TRUE,0,75,1
bors,"ðŸ’” Test failed - auto-mac-64-nopt-t",FALSE,TRUE,5,75,211,0,FALSE,TRUE,FALSE,TRUE,0,76,1
nikomatsakis,"failure looks legit http://buildbot.rust-lang.org/builders/auto-mac-64-nopt-t/builds/8420/steps/compile/logs/stdio",FALSE,TRUE,4,76,212,0,FALSE,FALSE,FALSE,TRUE,0,77,1
nikomatsakis,"@michaelwoerister and I chatted a bit over e-mail. I'm going to close this PR and open one of my own that includes his commits plus a few more.",FALSE,TRUE,28,77,213,0,FALSE,TRUE,FALSE,TRUE,0,78,1
