% Generated by Discussion model node.4007.txt
% File generated on 2017/08/09 19:32:22

@relation pr1502321542265

@attribute author String
@attribute textual String
@attribute isProjectMember {TRUE, FALSE}
@attribute isInvited {TRUE, FALSE}
@attribute numberOfWords numeric
@attribute commentsSoFar numeric
@attribute allUtterancesSoFar numeric
@attribute utterancesInCommentSoFar numeric
@attribute utteredByOriginalPoster {TRUE, FALSE}
@attribute hasCapitalizedWord {TRUE, FALSE}
@attribute containsShould {TRUE, FALSE}
@attribute hasDecisions {TRUE, FALSE}
@attribute howManyDecisions numeric
@attribute idComment numeric
@attribute idPara numeric

@data
Fishrock123,"Commit 1",FALSE,FALSE,2,0,0,0,TRUE,FALSE,FALSE,TRUE,0,1,1
Fishrock123,"Consolidates the implementation of regular and internal (_unrefActive)timers.",FALSE,FALSE,8,0,1,1,TRUE,FALSE,FALSE,TRUE,0,1,2
Fishrock123,"Includes an optimization for listOnTimeout() that previously onlyinternal timers had. (_runOnTimeout)",FALSE,FALSE,11,0,2,2,TRUE,FALSE,FALSE,TRUE,0,1,3
Fishrock123,"Also includes some minor other cleanup.",FALSE,FALSE,6,0,3,3,TRUE,FALSE,FALSE,TRUE,0,1,4
Fishrock123,"Commit 2",FALSE,FALSE,2,0,4,4,TRUE,FALSE,FALSE,TRUE,0,1,5
Fishrock123,"Describes the How and Why of the timers implementation, as well asadding comments in spots that should allow for an easier understandingof what is going on.",FALSE,FALSE,26,0,5,5,TRUE,TRUE,TRUE,TRUE,0,1,6
Fishrock123,"The timers implementation is very efficient, at a cost.That cost is readable understandability, and this aims to improve that.",FALSE,FALSE,19,0,6,6,TRUE,FALSE,FALSE,TRUE,0,1,7
Fishrock123,"cc @bnoordhuis / @piscisaureus / @trevnorris / @misterdjules / etc?",FALSE,FALSE,10,0,7,7,TRUE,FALSE,FALSE,TRUE,0,1,8
Fishrock123,"This attempts to improve the timers implementation by consolidating the internal and regular timer logic.",FALSE,FALSE,15,0,8,8,TRUE,FALSE,FALSE,TRUE,0,1,9
Fishrock123,"I have not yet run performance testing / profiling on this, so feel free to help me out there if you are able to but I will hopefully be able to get to it shortly.",FALSE,FALSE,35,0,9,9,TRUE,TRUE,FALSE,TRUE,0,1,10
Fishrock123,"Tests pass locally, CI: https://ci.nodejs.org/job/node-test-commit/1237/",FALSE,FALSE,5,0,10,10,TRUE,TRUE,FALSE,TRUE,0,1,11
Fishrock123,"cc @nodejs/documentation and @nodejs/inclusivity I'd like thoughts on the format of the comments and their content and if they fit in well as code comments, as well as how understandable this is to people who are unfamiliar with the code.",FALSE,FALSE,40,0,11,11,TRUE,TRUE,FALSE,TRUE,0,1,12
Fishrock123,"There is possibly a better way of doing this.",FALSE,FALSE,9,1,12,0,TRUE,TRUE,FALSE,TRUE,0,2,1
Fishrock123,"In a nutshell we need to be able to tell if a specific list (TimerWrap) is (supposed to be) unrefed or not.",FALSE,FALSE,22,1,13,1,TRUE,FALSE,FALSE,TRUE,0,2,2
Fishrock123,"I'm not to worried about people messing with these top-level handles from C++ though.",FALSE,FALSE,14,1,14,2,TRUE,TRUE,FALSE,TRUE,0,2,3
alexlamsl,"Could just store a reference to lists so just have one-line delete instead of branch down there?",FALSE,FALSE,17,2,15,0,FALSE,TRUE,FALSE,TRUE,0,3,1
trevnorris,"Make sure you add _unrefed = false or similar to the Timer constructor, or you're mutating the object map.",FALSE,TRUE,19,3,16,0,FALSE,TRUE,FALSE,TRUE,0,4,1
Fishrock123,"@alexlamsl like maybe _parent?",FALSE,FALSE,4,4,17,0,TRUE,FALSE,FALSE,TRUE,0,5,1
Fishrock123,"@trevnorris good catch.",FALSE,FALSE,3,4,18,1,TRUE,FALSE,FALSE,TRUE,0,5,2
Fishrock123,"Actually, that doesn't apply to Timer, this sets it on the list not the timer itself. :)",FALSE,FALSE,17,5,19,0,TRUE,TRUE,FALSE,TRUE,0,6,1
alexlamsl,"@Fishrock123 yes _parent sounds good, then down below you can do delete list._parent[msecs]; instead of",FALSE,TRUE,15,6,20,0,FALSE,FALSE,FALSE,TRUE,0,7,1
alexlamsl,"@Fishrock123 isn't list a Timer object, as declared a few lines above?",FALSE,TRUE,12,7,21,0,FALSE,TRUE,FALSE,TRUE,0,8,1
Fishrock123,"@alexlamsl Ah, I thought he was referring to Timeout. This is a TimerWrap, imported as Timer.",FALSE,TRUE,16,8,22,0,TRUE,TRUE,FALSE,TRUE,0,9,1
Fishrock123,"@trevnorris were you referring to Timer, as in TimerWrap, or Timeout?",FALSE,TRUE,11,8,23,1,TRUE,TRUE,FALSE,TRUE,0,9,2
trevnorris,"EDIT: nm. forgot that Timer comes from node::TimerWrap::New() in src/timer_wrap.cc.",FALSE,TRUE,10,9,24,0,FALSE,TRUE,FALSE,TRUE,0,10,1
beaugunderson,"@Fishrock123 typo: efficent → efficient",FALSE,FALSE,5,10,25,0,FALSE,FALSE,FALSE,TRUE,0,11,1
Trott,"Super-micro-nits: fast and efficient is kind of redundant here. You can probably just say fast. Or efficient. You can probably also remove both instances of very from the sentence. Lastly, I think therefore is more natural and less confusing than as such. Therefore, it is important that the timers implementation be efficient.",FALSE,FALSE,52,11,26,0,FALSE,TRUE,FALSE,TRUE,0,12,1
Trott,"I promise not to do this for every sentence in the comments.",FALSE,FALSE,12,11,27,1,FALSE,FALSE,FALSE,TRUE,0,12,2
Fishrock123," fast  and  efficient  do not necessarily overlap here.",FALSE,TRUE,8,12,28,0,TRUE,FALSE,FALSE,TRUE,0,13,1
Fishrock123,"There is both execution speed and resource usage. :)",FALSE,TRUE,9,12,29,1,TRUE,FALSE,FALSE,TRUE,0,13,2
Fishrock123,"@sup & @beaugunderson Thanks, Atom's spelling detection isn't very good unfortunately. :(",FALSE,TRUE,12,13,30,0,TRUE,TRUE,FALSE,TRUE,0,14,1
pup,"@Fishrock123 overall, i have to say i'm very impressed. if only all lib files were documented this well...",FALSE,FALSE,18,14,31,0,FALSE,FALSE,FALSE,TRUE,0,15,1
pup,"the only thing i'd suggest is maybe having a kind of difficulty rating referring to how complex and hard to understand the code and the explaining comments are. sadly, you can't easily explain some things :(",FALSE,FALSE,36,14,32,1,FALSE,FALSE,FALSE,TRUE,0,15,2
pup,"but that's just an idea, and would maybe make more sense if, well, all lib files were documented this well.",FALSE,FALSE,20,14,33,2,FALSE,FALSE,FALSE,TRUE,0,15,3
pup,"LGTM once the spelling errors are fixed ^^",FALSE,FALSE,8,14,34,3,FALSE,FALSE,FALSE,TRUE,0,15,4
jscissr,"typo: mili → milli",FALSE,FALSE,4,15,35,0,FALSE,FALSE,FALSE,TRUE,0,16,1
Trott,"This is awesome. The resulting code is much easier to understand. The comments are helpful too.",FALSE,FALSE,16,16,36,0,FALSE,TRUE,FALSE,TRUE,0,17,1
alexlamsl,"Why not var list = lists[msecs] and save a branch clause below?",FALSE,TRUE,12,17,37,0,FALSE,TRUE,FALSE,TRUE,0,18,1
Fishrock123,"It might not exist yet, so we need to be able to check that make a new one if it does not exist yet.",FALSE,TRUE,24,18,38,0,TRUE,TRUE,FALSE,TRUE,0,19,1
alexlamsl,"What I meant is instead of",FALSE,TRUE,6,19,39,0,FALSE,TRUE,FALSE,TRUE,0,20,1
alexlamsl,"How about",FALSE,TRUE,2,19,40,1,FALSE,FALSE,FALSE,TRUE,0,20,2
Fishrock123,"Ah, that sounds good, yeah.",FALSE,TRUE,5,20,41,0,TRUE,TRUE,FALSE,TRUE,0,21,1
trevnorris,"try/catch -> try/finally",FALSE,TRUE,3,21,42,0,FALSE,FALSE,FALSE,TRUE,0,22,1
sindresorhus,"JavScript => JavaScript",FALSE,FALSE,3,22,43,0,FALSE,TRUE,FALSE,TRUE,0,23,1
sindresorhus,"descirbed => described",FALSE,FALSE,3,23,44,0,FALSE,FALSE,FALSE,TRUE,0,24,1
sindresorhus,"of => if",FALSE,FALSE,3,24,45,0,FALSE,FALSE,FALSE,TRUE,0,25,1
sindresorhus,"convinience => convenience",FALSE,FALSE,3,25,46,0,FALSE,FALSE,FALSE,TRUE,0,26,1
chrisdickinson,"typo: implementaion",FALSE,FALSE,2,26,47,0,FALSE,FALSE,FALSE,TRUE,0,27,1
chrisdickinson,"This sentence could use some clarification, I think — is the situation that the linked list container is a TimerWrap C++ handle, or that the head of the linked list is a TimerWrap? Are each of the subsequent items in the list TimerWrap instances, or just that initial object? (IIRC, it's just the one object to avoid ping-ponging between C++ and JS, and the following info seems to corroborate that)",FALSE,FALSE,70,27,48,0,FALSE,TRUE,FALSE,TRUE,0,28,1
Fishrock123,"It's the initial object per se, but effectively the  container  -- this is an object-property linked list though, so there is no true container.",FALSE,TRUE,24,28,49,0,TRUE,TRUE,FALSE,TRUE,0,29,1
Fishrock123,"It's also the thing that actually causes the timeout to happen also though.",FALSE,TRUE,13,28,50,1,TRUE,FALSE,FALSE,TRUE,0,29,2
chrisdickinson,"In that case, maybe something along these lines:",FALSE,FALSE,8,29,51,0,FALSE,TRUE,FALSE,TRUE,0,30,1
trevnorris,"do we have a policy on non-ASCII characters in source?",FALSE,TRUE,10,30,52,0,FALSE,FALSE,FALSE,TRUE,0,31,1
Fishrock123,"meh, ->, easy.",FALSE,TRUE,3,31,53,0,TRUE,FALSE,FALSE,TRUE,0,32,1
Fishrock123,"I don't think that's actually correct though.",FALSE,TRUE,7,32,54,0,TRUE,TRUE,FALSE,TRUE,0,33,1
Fishrock123,"i.e. it's more like:",FALSE,TRUE,4,32,55,1,TRUE,FALSE,FALSE,TRUE,0,33,2
Fishrock123,"The object you're getting the timers of off is always a TimerWrap at the start, but even though when  empty  the properties will point to itself, it will return null.",FALSE,TRUE,30,32,56,2,TRUE,TRUE,FALSE,TRUE,0,33,3
Fishrock123,"Not sure if that is important or how to articulate it better..",FALSE,TRUE,12,32,57,3,TRUE,FALSE,FALSE,TRUE,0,33,4
Fishrock123,"(Basically, read the linked list impl)",FALSE,TRUE,6,33,58,0,TRUE,FALSE,FALSE,TRUE,0,34,1
chrisdickinson,"Ah, in this case it'd probably be better to phrase",FALSE,FALSE,10,34,59,0,FALSE,TRUE,FALSE,TRUE,0,35,1
chrisdickinson,"As  the map associates millisecond durations with C++ TimerWrap objects, which have been augmented with linked list properties (see ./lib/internal/_linklist.js).  Also, it would be helpful to use consistent naming for that binding — we've imported it here as Timer, but in the comments we refer to it as TimerWrap. Juggling TimerWrap, Timer, and Timeout can get confusing quickly!",FALSE,FALSE,58,34,60,1,FALSE,TRUE,FALSE,TRUE,0,35,2
chrisdickinson,"for later in this case could mean temporally later (as in,  later today ), or spatially later (as in,  later in the array ), or both — it might be good to clarify which is meant here.",FALSE,FALSE,35,35,61,0,FALSE,FALSE,FALSE,TRUE,0,36,1
Fishrock123," for a later time ?",FALSE,TRUE,4,36,62,0,TRUE,FALSE,FALSE,TRUE,0,37,1
Fishrock123,"This is incorrect, I am wrong. @piscisaureus was right about the efficiency of the regular timers impl.",FALSE,TRUE,17,37,63,0,TRUE,TRUE,FALSE,TRUE,0,38,1
Fishrock123,"Heck, even after all of this I still didn't clue 100% into why this was supposed to be so efficient.",FALSE,TRUE,20,37,64,1,TRUE,TRUE,FALSE,TRUE,0,38,2
Fishrock123,"insert() doesn't actually insert, it only appends to the linked list. That is, it follows the libev guide closer than I had previously understood.",FALSE,TRUE,24,37,65,2,TRUE,TRUE,FALSE,TRUE,0,38,3
Fishrock123,"You only ever need to append to a list of timers scheduled for 50ms because even if you schedule two timers at the same time, none will ever be sooner than that timeout time, or an existing timeout, within that 50ms list.",FALSE,TRUE,42,37,67,4,TRUE,FALSE,FALSE,TRUE,0,38,4
Fishrock123,"On timeout, we only need to check the start of the list for timers that need to timeout. This is because all of those timers will only ever have a 50ms timeout, and so any timers past the first one that we don't need to timeout yet will also have a due date later than the current timeout, since they are all 50ms and must have been scheduled later than we first timed out.",FALSE,TRUE,74,37,68,5,TRUE,TRUE,FALSE,TRUE,0,38,5
Fishrock123,"I have now updated the PR with comments now correctly describing how exactly it works.",FALSE,TRUE,15,38,69,0,TRUE,TRUE,FALSE,TRUE,0,39,1
Fishrock123,"All operations in the JavaScript layer are virtually constant time. What we have effectively acts as a timer wheel. I do not think it is possible to make a better overall implementation.",FALSE,TRUE,32,38,70,1,TRUE,TRUE,FALSE,TRUE,0,39,2
misterdjules,"At first sight, it seems that not setting process.domain to null would break test/parallel/test-domain-exit-dispose-again.js now that #3990 landed.",FALSE,TRUE,18,39,71,0,FALSE,TRUE,FALSE,TRUE,0,40,1
alexlamsl,"@Fishrock123 friendly poke in case the code suggestion above got buried in parallel discussions...",FALSE,TRUE,14,40,72,0,FALSE,FALSE,FALSE,TRUE,0,41,1
Fishrock123,"I still have them In mind, I'm just thinking of the best way to go about things.",FALSE,TRUE,17,41,73,0,TRUE,TRUE,FALSE,TRUE,0,42,1
Fishrock123,"@misterdjules hmmm, let's find out:",FALSE,TRUE,5,42,74,0,TRUE,FALSE,FALSE,TRUE,0,43,1
Fishrock123,"CI rebased onto master: https://ci.nodejs.org/job/node-test-pull-request/866/",FALSE,TRUE,5,42,75,1,TRUE,FALSE,FALSE,TRUE,0,43,2
misterdjules,"@Fishrock123 Confirmed.",FALSE,TRUE,2,43,76,0,FALSE,TRUE,FALSE,TRUE,0,44,1
Fishrock123,"@misterdjules Indeed. New CI: https://ci.nodejs.org/job/node-test-pull-request/867/",FALSE,TRUE,5,44,77,0,TRUE,TRUE,FALSE,TRUE,0,45,1
misterdjules,"This comment is obsolete, and doesn't describe the current state of the code base. It seems that this PR is a good opportunity to remove it.",FALSE,TRUE,26,45,78,0,FALSE,TRUE,FALSE,TRUE,0,46,1
Fishrock123,"Noted, I'll take a look at it in detail.",FALSE,TRUE,9,46,79,0,TRUE,TRUE,FALSE,TRUE,0,47,1
Fishrock123,"Hmmm, the comment was originally added in b221fe9 and then updated for domains in 4401bb4. However, it used to continue.",FALSE,TRUE,20,47,80,0,TRUE,TRUE,FALSE,TRUE,0,48,1
Fishrock123,"I think I may have made a mistake here having it return as it it did in the original _unrefActive(), perhaps we are missing a test for this?",FALSE,TRUE,28,47,81,1,TRUE,TRUE,FALSE,TRUE,0,48,2
chrisdickinson,"Might simplify wording here (and answer  in comparison to what? ):",FALSE,FALSE,10,48,82,0,FALSE,TRUE,FALSE,TRUE,0,49,1
chrisdickinson," Certain operations carry minor overhead. This overhead is limited to the operation of accessing a specific list from the map, and the creation of new lists. Since these operations are infrequent, the effects of the overhead are negligible. ",FALSE,FALSE,38,48,83,1,FALSE,TRUE,FALSE,TRUE,0,49,2
Fishrock123,"Since these operations are infrequent",FALSE,TRUE,5,49,84,0,TRUE,TRUE,FALSE,TRUE,0,50,1
Fishrock123,"That's not true though. We technically still have to do a map lookup every insertion, but it's not O(n) since it's not actually affected by the number of timeouts, but rather the number of different timeout durations your program is using. Also, I'm not really sure how fast the JavaScript object/map lookups are, but they are pretty fast in comparison to doing a linked list insertion (not append). :/",FALSE,TRUE,69,49,85,1,TRUE,TRUE,FALSE,TRUE,0,50,2
Fishrock123,"(@bnoordhuis might know?)",FALSE,TRUE,3,49,86,2,TRUE,FALSE,FALSE,TRUE,0,50,3
chrisdickinson,"Some questions:",FALSE,FALSE,2,50,87,0,FALSE,TRUE,FALSE,TRUE,0,51,1
chrisdickinson,"What is constant-time timeout?",FALSE,FALSE,4,50,88,1,FALSE,FALSE,FALSE,TRUE,0,51,2
chrisdickinson,"Do we support insertion? Or just append?",FALSE,FALSE,7,50,89,2,FALSE,TRUE,FALSE,TRUE,0,51,3
chrisdickinson,"Do we re-use the leading TimerWrap object across ticks? For example: if you setTimeout(_=>setTimeout(_=>_, 50), 50), does the timer object get reused since a later tick placed a Timeout in the queue for 50 ms?",FALSE,FALSE,35,50,90,3,FALSE,TRUE,FALSE,TRUE,0,51,4
Fishrock123,"Would putting O(1) there help? beyond there,  wiki big-o notation . :s",FALSE,TRUE,11,51,91,0,TRUE,TRUE,FALSE,TRUE,0,52,1
Fishrock123,"That's tricky. Technically we insert into the map, but that's not what we focus on, because it's perf cost is usually trivial",FALSE,TRUE,22,51,92,1,TRUE,TRUE,FALSE,TRUE,0,52,2
Fishrock123,"In your example: probably, so long as you are inserting within the same timeout as the last one you are removing. i.e. Calling in nextTick would make a new handle. (Assuming that is the olny 50ms timer)",FALSE,TRUE,37,51,93,2,TRUE,TRUE,FALSE,TRUE,0,52,3
Fishrock123,"For 3., I think it may just be better to leave that point up to reading the impl. It doesn't have much to do with the overall architecture at that point.",FALSE,TRUE,31,52,94,0,TRUE,TRUE,FALSE,TRUE,0,53,1
Fishrock123,"@chrisdickinson I think I understand what you're trying to get to for 1. -- This language is usually used when referring to the operation that times out the timers as it is usually not the same as removing an arbitrary timeout, and certainly isn't in our case. In our case it is effectively a  shift()  operation.",FALSE,TRUE,56,53,95,0,TRUE,TRUE,FALSE,TRUE,0,54,1
misterdjules,"What does  entirely lazy  mean in this context?",FALSE,TRUE,8,54,96,0,FALSE,TRUE,FALSE,TRUE,0,55,1
Fishrock123,"Something like  Do as little as possible only when needed ",FALSE,TRUE,10,55,97,0,TRUE,TRUE,FALSE,TRUE,0,56,1
misterdjules,"Typo in  timeouts ?",FALSE,TRUE,3,56,98,0,FALSE,TRUE,FALSE,TRUE,0,57,1
misterdjules,"Any less-than constant overhead is left for a lower and inherently faster layer to handle. seems a bit vague and requires implicit knowledge of other layers. I imagine this refers to the way libuv handles actual timers? Maybe we should give more precise information here to what we refer, or just not mention it.",FALSE,TRUE,54,57,99,0,FALSE,TRUE,TRUE,TRUE,0,58,1
Fishrock123,"Would this be better?",FALSE,TRUE,4,58,100,0,TRUE,TRUE,FALSE,TRUE,0,59,1
Fishrock123,"Any less-than constant overhead is contained within the TimerWrap's libuv bindings.",FALSE,TRUE,11,58,101,1,TRUE,TRUE,FALSE,TRUE,0,59,2
Fishrock123,"I actually should take a look at libuv timers after this, ideally, we'd also use the same sort of implementation we have here in libuv and then just hand off anything truly O(n) to the OS / Processor.",FALSE,TRUE,38,58,102,2,TRUE,TRUE,TRUE,TRUE,0,59,3
misterdjules,"That seems highly subjective and unnecessary in a description of how a subsystem works.",FALSE,TRUE,14,59,103,0,FALSE,TRUE,FALSE,TRUE,0,60,1
Fishrock123,"Possibly, but you really can't do better than O(<number of different durations>) insertion and O(1) everything else. I can remove it if you'd like.",FALSE,TRUE,24,60,104,0,TRUE,TRUE,FALSE,TRUE,0,61,1
misterdjules,"Should _called be set in _runOnTimeout instead? It seems the two are directly related and that separating them could lead to _called being set at an inappropriate time if _runOnTimeout is called at a different time in a future refactoring.",FALSE,TRUE,40,61,105,0,FALSE,TRUE,FALSE,TRUE,0,62,1
Fishrock123,"_runOnTimeout is called at a different time in a future refactoring.",FALSE,TRUE,11,62,106,0,TRUE,FALSE,FALSE,TRUE,0,63,1
Fishrock123,"_runOnTimeout() is specifically not for convenience. As noted in it's comment it is only a perf optimization.",FALSE,TRUE,17,62,107,1,TRUE,TRUE,FALSE,TRUE,0,63,2
misterdjules,"The backing handle is a bit vague on what type of handle it is, I would suggest specifying it's a TimerWrap instance.",FALSE,TRUE,22,63,108,0,FALSE,TRUE,FALSE,TRUE,0,64,1
misterdjules,"One of the reasons why internal timers were handled in a different list was so that they use only one TimerWrap instance. That is, all internal timers, regardless of their delay, would use the same underlying timer. I believe this was done to prevent the creation of a lot of underlying timers and because at that time the implementers believed that this would hurt performance.",FALSE,TRUE,65,64,109,0,FALSE,TRUE,FALSE,TRUE,0,65,1
misterdjules,"@nodejs/ctc Does anyone have more context around this (benchmarks, sample code that shows pathological cases, etc.)? I started working on timers after internal timers were implemented, and so I'm not familiar with the details behind that decision.",FALSE,TRUE,37,64,110,1,FALSE,TRUE,FALSE,TRUE,0,65,2
Fishrock123,"I believe this was done to prevent the creation of a lot of underlying timers and because at that time the implementers believed that this would hurt performance.",FALSE,TRUE,28,65,111,0,TRUE,TRUE,FALSE,TRUE,0,66,1
Fishrock123,"Does anyone have more context around this (benchmarks, sample code that shows pathological cases, etc.)? I started working on timers after internal timers were implemented, and so I'm not familiar with the details behind that decision.",FALSE,TRUE,36,65,112,1,TRUE,TRUE,FALSE,TRUE,0,66,2
Fishrock123,"Nothing personal to TJ, but due to the fact that the original internal timers implementation was a sorted linked-list insert (O(n)), I'm lead to believe that TJ quite possibly just didn't fully understand the regular implementation. Considering there was no review it's quite probable the current internal timers implementation was somewhat of an impulsive mistake. f46ad01",FALSE,TRUE,56,65,113,2,TRUE,TRUE,FALSE,TRUE,0,66,3
Fishrock123,"This actually reverts the timer implementation to the original, with the added benefit that it also supports implicitly unreferenced (internal) timers. There were never perf / memory problems with the original as far as I can tell.",FALSE,TRUE,37,65,114,3,TRUE,TRUE,FALSE,TRUE,0,66,4
misterdjules,"For instance,  _unrefActive is used to update the date cache for HTTP response headers. Under heavy load, it is possible to create one timer handle every second with the code in this PR whereas the current _unrefActive implementation would create just one timer handle the first time utcDate is called.",FALSE,TRUE,51,66,115,0,FALSE,TRUE,FALSE,TRUE,0,67,1
misterdjules,"Your benchmarks suggest it doesn't have any impact on CPU usage, so it may very well be a premature optimization.",FALSE,TRUE,20,66,116,1,FALSE,TRUE,FALSE,TRUE,0,67,2
misterdjules,"At least today except for the utcDate implementation, I can't think of a realistic/common use case where this optimization would apply in node's source, and even in this case it doesn't seem to have a significant impact.",FALSE,TRUE,37,66,117,2,FALSE,TRUE,FALSE,TRUE,0,67,3
Fishrock123,"Wait, one timer handle a second is almost nothing, I'm testing making... tens of thousands per second? ...",FALSE,TRUE,18,67,118,0,TRUE,TRUE,FALSE,TRUE,0,68,1
misterdjules,"@Fishrock123 Do you have any results form the tests mentioned in your comment above?",FALSE,TRUE,14,68,119,0,FALSE,TRUE,FALSE,TRUE,0,69,1
misterdjules,"@Fishrock123 Thank you for doing this, it seems clear that it will improve the readability of the timers module.",FALSE,TRUE,19,69,120,0,FALSE,TRUE,FALSE,TRUE,0,70,1
misterdjules,"I have not yet run performance testing / profiling on this",FALSE,TRUE,11,70,122,1,FALSE,FALSE,FALSE,TRUE,0,71,1
misterdjules,"Did you have some time to run performance tests and profiling? We'll need these results and a detailed description of the methodology you used to run them to be able to review these changes.",FALSE,TRUE,34,70,123,2,FALSE,TRUE,FALSE,TRUE,0,71,2
indutny,"How come this PR did not mention ctc or collaborators for two days? :) I don't see the issues that does not have mentions!",FALSE,FALSE,24,71,124,0,FALSE,TRUE,FALSE,TRUE,0,72,1
Fishrock123,"@indutny idk I don't like always spamming everyone's inboxes right away. :)",FALSE,TRUE,12,72,125,0,TRUE,TRUE,FALSE,TRUE,0,73,1
Fishrock123,"@nodejs/ctc ptal",FALSE,TRUE,2,72,126,1,TRUE,FALSE,FALSE,TRUE,0,73,2
Fishrock123,"Did you have some time to run performance tests and profiling?",FALSE,TRUE,11,73,127,0,TRUE,TRUE,FALSE,TRUE,0,74,1
Fishrock123,"Yes. See https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007, possibly more to come but tbh it appears unnecessary.",FALSE,TRUE,12,73,128,1,TRUE,TRUE,FALSE,TRUE,0,74,2
Fishrock123,"We'll need these results and a detailed description of the methodology you used to run them to be able to review these changes.",FALSE,TRUE,23,73,129,2,TRUE,FALSE,FALSE,TRUE,0,74,3
Fishrock123,"It's actually also objectively better. If you pay careful attention, we replaced an O(n) onTimeout for internal timers with a O(x) (Where x is the number of different timeout durations.)  insertion , where the only insertion is a map lookup of possible durations, and the actual scheduling is an O(1) append.",FALSE,TRUE,50,73,130,3,TRUE,TRUE,FALSE,TRUE,0,74,4
Fishrock123,"Oh and it's easier to read.",FALSE,TRUE,6,73,131,4,TRUE,FALSE,FALSE,TRUE,0,74,5
Fishrock123,"A note on the O(x) insertions. That x will only be affected by things that use _unrefActive() and not user timers. The more timeouts of the same duration that core uses the more efficient this will be.",FALSE,TRUE,37,74,132,0,TRUE,TRUE,FALSE,TRUE,0,75,1
misterdjules,"@Fishrock123 Thank you for the benchmarks results.",FALSE,TRUE,7,75,133,0,FALSE,TRUE,FALSE,TRUE,0,76,1
misterdjules,"It's interesting to see that the number of requests/second handled with the code in this PR is slightly lower for test1: 4648.92 vs 4701.17. It would be interesting to see the distribution of results over a larger number of runs (we could start with 10 runs).",FALSE,TRUE,46,75,134,1,FALSE,TRUE,FALSE,TRUE,0,76,2
misterdjules,"As I said previously, there's no doubt that the code feels easier to read and has better algorithmic complexity in all use cases. But without tests and benchmarks, and just by reading code, we cannot confirm the impact of these changes on performance. Now that you've provided us with these benchmarks, we have some tools to confirm our assumptions, and that the performance seems to be very good.",FALSE,TRUE,68,75,135,2,FALSE,TRUE,FALSE,TRUE,0,76,3
misterdjules,"I would be interested to see a comparison of master vs this PR with the first benchmark mentioned in my previous analysis of _unrefActive's performance:",FALSE,TRUE,25,75,136,3,FALSE,TRUE,FALSE,TRUE,0,76,4
misterdjules,"It's definitely not a common use case, but I would expect your changes to lead to a much better performance and this would be another data point in favor of this PR.",FALSE,TRUE,32,75,137,4,FALSE,TRUE,FALSE,TRUE,0,76,5
Fishrock123,"It's interesting to see that the number of requests/second handled with the code in this PR is slightly lower for test1: 4648.92 vs 4701.17. It would be interesting to see the distribution of results over a larger number of runs (we could start with 10 runs).",FALSE,TRUE,46,76,138,0,TRUE,TRUE,FALSE,TRUE,0,77,1
Fishrock123,"I wouldn't pay much attention to that. There are a number of things that could have caused that due to my setup. Notably running wrk from my laptop hitting a remote box while running spotify etc.This setup still provides enough load to get perf usage numbers by %, but the actual throughput isn't something I would pay attention to for this. (Also I'm 99% certain it would be bottlenecking elsewhere.)",FALSE,TRUE,70,76,139,1,TRUE,TRUE,FALSE,TRUE,0,77,2
Fishrock123,"I would be interested to see a comparison of master vs this PR with the first benchmark mentioned in my previous analysis of _unrefActive's performance:",FALSE,TRUE,25,76,140,2,TRUE,TRUE,FALSE,TRUE,0,77,3
Fishrock123,"Will do.",FALSE,TRUE,2,76,141,3,TRUE,FALSE,FALSE,TRUE,0,77,4
Fishrock123,"@misterdjules I changed this back to continue as it was in the regular timers. In _unrefActive() it was return. This still seems like it could be applicable but we don't have a test for it. Could you clarify and/or help make a test if one is necessary?",FALSE,TRUE,47,77,142,0,TRUE,TRUE,FALSE,TRUE,0,78,1
Fishrock123,"EDIT: comment in the wrong spot..",FALSE,TRUE,6,77,143,1,TRUE,FALSE,FALSE,TRUE,0,78,2
Fishrock123,"@misterdjules I changed this back to continue as it was in the regular timers. In _unrefActive() it was return. This still seems like it could be applicable but we don't have a test for it. Could you clarify and/or help make a test if one is necessary?",FALSE,TRUE,47,78,144,0,TRUE,TRUE,FALSE,TRUE,0,79,1
misterdjules,"Do you mean the return statement in _makeTimerTimeout? It was return statement for unrefed timers because that logic is encapsulated in a function, so that return is the equivalent to the continue in the listOnTimeout loop.",FALSE,TRUE,36,79,145,0,FALSE,TRUE,FALSE,TRUE,0,80,1
misterdjules,"There's at least one place where we used to have a test for this behavior for timers created with setTimeout, but I removed it with #3990.",FALSE,TRUE,26,79,146,1,FALSE,TRUE,FALSE,TRUE,0,80,2
misterdjules,"Basically, removing #3990 was a mistake on my side, because I assumed that it was testing that process.domain was cleared properly when an error was thrown from within a timer, when it was actually testing that a timer attached to a disposed domain wouldn't run. It's obvious to me in hindsight, I apologize for the confusion.",FALSE,TRUE,56,79,147,2,FALSE,TRUE,FALSE,TRUE,0,80,3
misterdjules,"The test that #3990 added is good though. So what I'll do is that I'll put back the original test that #3990 removed, but with more comments to explain clearly what it tests, and move the test that #3990 added to a new file.",FALSE,TRUE,44,79,148,3,FALSE,TRUE,FALSE,TRUE,0,80,4
misterdjules,"Then, we can add a test equivalent to the test that #3990 removed, but for unrefed timers, in a new file too.",FALSE,TRUE,22,79,149,4,FALSE,FALSE,FALSE,TRUE,0,80,5
Fishrock123,"Ok sounds good. Do you want to do that in a separate PR? Or do you want to hand me a commit I can add to this one?",FALSE,TRUE,28,80,150,0,TRUE,TRUE,FALSE,TRUE,0,81,1
misterdjules,"I'll do that in a separate PR but I won't be able to do that before Monday.",FALSE,TRUE,17,81,151,0,FALSE,TRUE,FALSE,TRUE,0,82,1
misterdjules,"Done in #4256.",FALSE,TRUE,3,82,152,0,FALSE,TRUE,FALSE,TRUE,0,83,1
trevnorris,"A difference of 4648.92 vs 4701.17 is easily within a margin of error. I'd like to see the median time after running the tests several dozen times.",FALSE,TRUE,27,83,153,0,FALSE,TRUE,FALSE,TRUE,0,84,1
trevnorris,"In the end if this even just matches the performance of the previous implementation then I'd say it's a go. Reducing that amount of code complexity is a win.",FALSE,TRUE,29,83,154,1,FALSE,TRUE,FALSE,TRUE,0,84,2
misterdjules,"A difference of 4648.92 vs 4701.17 is easily within a margin of error. I'd like to see the median time after running the tests several dozen times.",FALSE,TRUE,27,84,155,0,FALSE,TRUE,FALSE,TRUE,0,85,1
misterdjules,"That's exactly what I meant, we're on the same page.",FALSE,TRUE,10,84,156,1,FALSE,TRUE,FALSE,TRUE,0,85,2
bnoordhuis,"Maybe just remove this comment?  There's no point in linking to a less detailed external resource.",FALSE,TRUE,17,85,157,0,FALSE,TRUE,FALSE,TRUE,0,86,1
Fishrock123,"Hmmm, it would be nice to point to where the technique originated from still, I think?",FALSE,TRUE,16,86,158,0,TRUE,TRUE,FALSE,TRUE,0,87,1
bnoordhuis,"libev is not the inventor of that technique, if that is what you mean, although it was probably Ryan's inspiration when he wrote the original timers code.",FALSE,TRUE,27,87,159,0,FALSE,TRUE,FALSE,TRUE,0,88,1
bnoordhuis,"Prefer strict equality here so the full-codegen can emit an immediate boolean check instead of a ToBoolean IC.",FALSE,TRUE,18,88,160,0,FALSE,TRUE,FALSE,TRUE,0,89,1
bnoordhuis,"Only lightly reviewed for now but I saw nothing that's obviously wrong.",FALSE,TRUE,12,89,161,0,FALSE,TRUE,FALSE,TRUE,0,90,1
Fishrock123,"@misterdjules et al.: I've gotten some new data from the test case you suggested.",FALSE,TRUE,14,90,162,0,TRUE,TRUE,FALSE,TRUE,0,91,1
Fishrock123,"Turns out this patch is far, far more efficient, even in that case, as far as I can tell: https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test3",FALSE,TRUE,20,90,163,1,TRUE,TRUE,FALSE,TRUE,0,91,2
misterdjules,"@Fishrock123 Yes, it's exactly what I expected, which is why I had said:",FALSE,TRUE,13,91,164,0,FALSE,TRUE,FALSE,TRUE,0,92,1
misterdjules,"I would expect your changes to lead to a much better performance and this would be another data point in favor of this PR",FALSE,TRUE,24,91,165,1,FALSE,TRUE,FALSE,TRUE,0,92,2
misterdjules,"Thanks for adding this additional benchmark to your benchmarks suite! Do you have some time to do more runs for test1 and test2 (at least 10 for each implementation, the more the better), and include the results of all runs in the results files?",FALSE,TRUE,44,91,166,2,FALSE,TRUE,FALSE,TRUE,0,92,3
Fishrock123,"@misterdjules Added some more results to https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test1, and new one to https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test2. These results are clearer, but seem to be more of the same.",FALSE,TRUE,24,92,167,0,TRUE,TRUE,FALSE,TRUE,0,93,1
Fishrock123,"I'll do more if you really want but I'm not sure how worthwhile doing very many is.",FALSE,TRUE,17,92,168,1,TRUE,TRUE,FALSE,TRUE,0,93,2
misterdjules,"@Fishrock123 It definitely helps to have a few more data points with the results you added. These few data points seem to indicate that performance is in the same ball park, but the more data points we can look at the more confident we can be. It shouldn't be too difficult to produce a lot more data points.",FALSE,TRUE,58,93,169,0,FALSE,TRUE,TRUE,TRUE,0,94,1
misterdjules,"Back when I worked on optimizing _unrefActive, I had quickly written a simple script that does as many runs as requested and outputs a summary of two pieces of information we're interested in: requests per second and CPU profiling for the _unrefActive function. You could run a similar script for long enough to have at least more than 10 data points with and without the changes in this PR, and we would be all the more confident that these changes are good.",FALSE,TRUE,82,93,170,1,FALSE,TRUE,FALSE,TRUE,0,94,2
misterdjules,"I'm personally reasonably confident that the changes in this PR look good (except for the question about not having a single TimerWrap instance for internal timers to which we don't really have an answer), and I won't insist more on having more data points, but providing more data would just help everyone look at more facts and rely less on their (possibly misguided) intuition.",FALSE,TRUE,64,93,171,2,FALSE,TRUE,FALSE,TRUE,0,94,3
misterdjules,"Not necessarily relevant to this PR, but looking at that gist, it seems that with the same parameters passed to wrk and the same code, node v0.10 handles around 8000 requests/second, and nodejs/node's master handles around 4000 requests/second.",FALSE,TRUE,38,93,172,3,FALSE,TRUE,FALSE,TRUE,0,94,4
misterdjules,"Of course it could be due to the benchmark setups/environments being completely different, but it seems it would be interesting to investigate. Maybe someone in the @nodejs/benchmarking has done something similar?",FALSE,TRUE,31,93,173,4,FALSE,TRUE,FALSE,TRUE,0,94,5
Fishrock123,"I had quickly written a simple script",FALSE,TRUE,7,94,174,0,TRUE,TRUE,FALSE,TRUE,0,95,1
Fishrock123,"That's not actually good practice per se, these new results of mine have wrk and node running on separate machines. Higher correctness trade-off I suppose. I doubt my workflow can be simplified particularly much.",FALSE,TRUE,34,94,175,1,TRUE,TRUE,FALSE,TRUE,0,95,2
Fishrock123,"I'm personally reasonably confident that the changes in this PR look good (except for the question about not having a single TimerWrap instance for internal timers to which we don't really have an answer)",FALSE,TRUE,34,94,176,2,TRUE,TRUE,FALSE,TRUE,0,95,3
Fishrock123,"I can try to get memory benchmarks if that is an issue, but in a worst-case for having lots of TimerWraps, the separated implementation still appears to be worse.",FALSE,TRUE,29,94,177,3,TRUE,TRUE,FALSE,TRUE,0,95,4
Fishrock123,"I'll try to come up with a longer-running test that creates lots of durations and has few completed timeouts to gauge the actual impact. (Probably by replicating this in a test form to timeout requests in nextTick with minimal overhead.)",FALSE,TRUE,40,94,178,4,TRUE,FALSE,FALSE,TRUE,0,95,5
Fishrock123,"Not necessarily relevant to this PR, but looking at that gist, it seems that with the same parameters passed to wrk and the same code, node v0.10 handles around 8000 requests/second, and nodejs/node's master handles around 4000 requests/second.",FALSE,TRUE,38,94,179,5,TRUE,TRUE,FALSE,TRUE,0,95,6
Fishrock123,"I can't see any relevance here. This timers code much more like 0.10's code than 0.12+ were.",FALSE,TRUE,17,94,180,6,TRUE,TRUE,FALSE,TRUE,0,95,7
Fishrock123,"Some new data: https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test4",FALSE,TRUE,4,95,181,0,TRUE,TRUE,FALSE,TRUE,0,96,1
Fishrock123,"Turns out using delete on the object map is VERY bad in a bad-case scenario, so I'm going to just start setting it to undefined. test4/1-timers-improve show the results with that. Appears to be on-par with the single timerwrap.",FALSE,TRUE,39,95,182,1,TRUE,TRUE,FALSE,TRUE,0,96,2
Fishrock123,"Edit: this data is flawed. I did a git thing wrong.",FALSE,TRUE,11,95,183,2,TRUE,TRUE,FALSE,TRUE,0,96,3
Fishrock123,"Ok fixed: https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test4",FALSE,TRUE,3,96,184,0,TRUE,TRUE,FALSE,TRUE,0,97,1
Fishrock123,"I don't really understand the tick disparity of master vs refactor-timers (+) in these. @misterdjules do you have any idea?",FALSE,TRUE,20,96,185,1,TRUE,FALSE,FALSE,TRUE,0,97,2
Fishrock123,"@bnoordhuis how would lots of handles represent on a performance profile like this? I'm seeing a lot more syscall with this patch in a worst-case scenario.",FALSE,TRUE,26,96,186,2,TRUE,TRUE,FALSE,TRUE,0,97,3
bnoordhuis,"Turns out using delete on the object map is VERY bad in a bad-case scenario, so I'm going to just start setting it to undefined.",FALSE,TRUE,25,97,187,0,FALSE,TRUE,FALSE,TRUE,0,98,1
bnoordhuis,"In case you plan on going through with that: setting the key to undefined instead of deleting it means the key's memory cannot be reclaimed.  That might be acceptable if the number of keys is bounded, otherwise it's a memory leak.",FALSE,TRUE,42,97,188,1,FALSE,TRUE,FALSE,TRUE,0,98,2
bnoordhuis,"how would lots of handles represent on a performance profile like this?",FALSE,TRUE,12,97,189,2,FALSE,FALSE,FALSE,TRUE,0,98,3
bnoordhuis,"You mean libuv timer handles?  The overhead should be minimal because there is no I/O involved, it only stores them in a min-heap.  It doesn't make system calls either, it uses loop->time as the current time.",FALSE,TRUE,38,97,190,3,FALSE,TRUE,TRUE,TRUE,0,98,4
bnoordhuis,"Timer.now() on the other hand calls uv_update_time(), which makes a system call to update loop->time.  It sounds like that gets called quite a bit.",FALSE,TRUE,25,97,191,4,FALSE,TRUE,FALSE,TRUE,0,98,5
Fishrock123,"@bnoordhuis strange that uv_update_time doesn't show up in the profile though?",FALSE,TRUE,11,98,192,0,TRUE,FALSE,FALSE,TRUE,0,99,1
Fishrock123,"Perhaps something is wrong with test4's implementation in regards to running on master. Timer.now() gets called the same amount of time in either version of this code.",FALSE,TRUE,27,99,193,0,TRUE,TRUE,FALSE,TRUE,0,100,1
bnoordhuis,"Have you checked user/sys and running/idle time for that test?  81467 90.7% syscall suggests that the process is sleeping in epoll_wait/epoll_pwait most of the time.",FALSE,TRUE,26,100,194,0,FALSE,TRUE,FALSE,TRUE,0,101,1
misterdjules,"I had quickly written a simple script",FALSE,TRUE,7,101,195,0,FALSE,TRUE,FALSE,TRUE,0,102,1
misterdjules,"That's not actually good practice per se, these new results of mine have wrk and node running on separate machines. Higher correctness trade-off I suppose. I doubt my workflow can be simplified particularly much.",FALSE,TRUE,34,101,196,1,FALSE,TRUE,FALSE,TRUE,0,102,2
misterdjules,"My suggestion was more about trying to find a way to get more benchmark results easily. Getting 10 result sets shouldn't be a problem when running benchmarks, otherwise it becomes difficult to confirm that a single data point actually represents a larger trend.",FALSE,TRUE,43,101,197,2,FALSE,TRUE,TRUE,TRUE,0,102,3
misterdjules,"As for running wrk and the test programs on the same machine, I don't think it's a problem in the case of a comparative benchmark, as long as we're comparing apples to apples. But if you can avoid that, then that's great too.",FALSE,TRUE,43,101,198,3,FALSE,TRUE,FALSE,TRUE,0,102,4
misterdjules,"I'm personally reasonably confident that the changes in this PR look good (except for the question about not having a single TimerWrap instance for internal timers to which we don't really have an answer)",FALSE,TRUE,34,101,199,4,FALSE,TRUE,FALSE,TRUE,0,102,5
misterdjules,"I can try to get memory benchmarks if that is an issue, but in a worst-case for having lots of TimerWraps, the separated implementation still appears to be worse.",FALSE,TRUE,29,101,200,5,FALSE,TRUE,FALSE,TRUE,0,102,6
misterdjules,"Yes, it would be interesting to determine the impact on memory usage of having lots of internal timers, for instance when running the third benchmark. Now I'm not sure that it's a realistic use case, and thus I'm not sure we want to optimize for it.",FALSE,TRUE,46,101,201,6,FALSE,TRUE,FALSE,TRUE,0,102,7
misterdjules,"Basically that's the question I'm asking: do we know why we wanted to have only one internal timer? Can we write a benchmark that demonstrates the advantage of having one internal timer in at least one significant use case? If we can't, then that's fine and we can just move on.",FALSE,TRUE,51,101,202,7,FALSE,TRUE,FALSE,TRUE,0,102,8
misterdjules,"Not necessarily relevant to this PR, but looking at that gist, it seems that with the same parameters passed to wrk and the same code, node v0.10 handles around 8000 requests/second, and nodejs/node's master handles around 4000 requests/second.",FALSE,TRUE,38,101,203,8,FALSE,TRUE,FALSE,TRUE,0,102,9
misterdjules,"I can't see any relevance here. This timers code much more like 0.10's code than 0.12+ were.",FALSE,TRUE,17,101,204,9,FALSE,TRUE,FALSE,TRUE,0,102,10
misterdjules,"Please note the  not necessarily relevant to this PR  bit. The point was that if the same benchmark gives half the number of requests/sec handled by node's master branch compared to 0.10.x, that's a significant regression that we should try to understand and address in a separate issue/PR, unrelated to this timer work.  Now it seems that the way these benchmarks were run is significantly different (same host for client/server in one case, different hosts in the other), so we're probably not comparing apples to apples.",FALSE,TRUE,87,101,205,10,FALSE,TRUE,TRUE,TRUE,0,102,11
Fishrock123,"I don't really know what is going on here, but here is some /time data for the last set of tests:",FALSE,TRUE,21,102,206,0,TRUE,TRUE,FALSE,TRUE,0,103,1
Fishrock123,"(The 2-*.md files in https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test4)",FALSE,TRUE,5,102,207,1,TRUE,FALSE,FALSE,TRUE,0,103,2
Fishrock123,"master @ 0b43c08",FALSE,TRUE,3,102,208,2,TRUE,FALSE,FALSE,TRUE,0,103,3
Fishrock123,"refactor-timers ontop of 0b43c08",FALSE,TRUE,4,102,209,3,TRUE,FALSE,FALSE,TRUE,0,103,4
Fishrock123,"Do I still need to get memory usage for this? How do I even do that?",FALSE,TRUE,16,103,210,0,TRUE,TRUE,FALSE,TRUE,0,104,1
rvagg,"Using a new Timer() as a linkedlist in insert() is causing trouble for V8 cause it's used to using {} for them. You get a bit of perf back if you use a {}, see https://gist.github.com/rvagg/e0079429a5ebbd7d8f27Unfortunately I'm missing a few things here so it's leaking or missing timers, a bunch of tests bork on this and I think perf is hindered by it not being a proper impl. With your understanding of how this works you may be able to spot what I'm not seeing.",FALSE,FALSE,85,104,211,0,FALSE,TRUE,FALSE,TRUE,0,105,1
Fishrock123,"Oh looks like I forgot to post my updated results on this .-.",FALSE,TRUE,13,105,212,0,TRUE,TRUE,FALSE,TRUE,0,106,1
Fishrock123,"I got some more results for https://github.com/Fishrock123/node-perf-results/tree/master/pr-4007/test4 but I think I've forgotten which I ran with Rod's patch..",FALSE,TRUE,18,106,213,0,TRUE,TRUE,FALSE,TRUE,0,107,1
Fishrock123,"It wasn't making a difference for me, but I switched to it anyways because it's easier to reason about and proactively optimize a bit.",FALSE,TRUE,24,106,214,1,TRUE,TRUE,FALSE,TRUE,0,107,2
jasnell,"@Fishrock123 ... while I'm not comfortable enough in my own understanding of the timers implementation yet to sign off on this, after finally having an opportunity to go through this it looks solid. Great work and great to see the detailed code comments. +1",FALSE,FALSE,44,107,215,0,FALSE,TRUE,FALSE,TRUE,0,108,1
Fishrock123,"I've updated my comment docs to what the PR now is, and have also renamed Timer to TimerWrap in an effort to resolve that naming confusion once and for all.",FALSE,TRUE,30,108,216,0,TRUE,TRUE,FALSE,TRUE,0,109,1
Fishrock123,"@nodejs/ctc Does anyone want anything else from me here? I'd like to merge this next week.",FALSE,TRUE,16,108,217,1,TRUE,TRUE,FALSE,TRUE,0,109,2
Fishrock123,"cc @nodejs/documentation could you review my code comments? Thanks!",FALSE,TRUE,9,109,218,0,TRUE,TRUE,FALSE,TRUE,0,110,1
misterdjules,"Is there a typo in the implementation is does?",FALSE,TRUE,9,110,219,0,FALSE,TRUE,FALSE,TRUE,0,111,1
misterdjules,"Typo in proceess.",FALSE,TRUE,3,111,220,0,FALSE,TRUE,FALSE,TRUE,0,112,1
misterdjules,"I would suggest adding a bit more context to Call this whenever the item is active (not idle)., such as:",FALSE,TRUE,20,112,221,0,FALSE,TRUE,FALSE,TRUE,0,113,1
misterdjules,"active should be called whenever the item is active. For instance, in the case the item is an instance of net.Socket, active should be called whenever there's activity (I/O) happening on that socket.",FALSE,TRUE,33,112,222,1,FALSE,TRUE,TRUE,TRUE,0,113,2
misterdjules,"Although actually it might be clearer to move that comment to _unrefActive. That comment stayed at the top of active because it had been written before the implementation of unrefed timers, but it doesn't apply really to refed timers anymore.",FALSE,TRUE,40,113,223,0,FALSE,TRUE,FALSE,TRUE,0,114,1
Fishrock123,"This is the original comment, it refers to the naming of the function, and what that means. I wasn't really sure what do do with it and I thought that context was perhaps still useful, so I left it.",FALSE,TRUE,39,114,224,0,TRUE,TRUE,FALSE,TRUE,0,115,1
misterdjules,"Where is that case handled now?",FALSE,TRUE,6,115,225,0,FALSE,TRUE,FALSE,TRUE,0,116,1
Fishrock123,"https://github.com/Fishrock123/node/blob/421bc68/lib/timers.js#L131 ?",FALSE,TRUE,2,116,226,0,TRUE,FALSE,FALSE,TRUE,0,117,1
Fishrock123,"Hmmmm you may be correct that it does not handle that. I'll try to make a test to double check.",FALSE,TRUE,20,117,227,0,TRUE,TRUE,FALSE,TRUE,0,118,1
Fishrock123,"Ok, after some meticulous looking over I've determined this check is not necessary.",FALSE,TRUE,13,118,228,0,TRUE,TRUE,FALSE,TRUE,0,119,1
Fishrock123,"This was required because previously unenroll had no way of actually removing an internal timer from the internal list, so instead we had the internals implementation check for the zeroed timeout duration. (Which I think was not very good practice, but that doesn't really matter anymore.)",FALSE,TRUE,46,118,229,1,TRUE,TRUE,FALSE,TRUE,0,119,2
Fishrock123,"Edit: gah the timers impl is hard. It was actually never necessary at all.",FALSE,TRUE,14,118,230,2,TRUE,TRUE,FALSE,TRUE,0,119,3
misterdjules,"It was necessary at the time of 9724047.",FALSE,TRUE,8,119,231,0,FALSE,TRUE,FALSE,TRUE,0,120,1
misterdjules,"The check is made unnecessary now, as you explained, because we used to queue all internal/unref timers that need to timeout. So if their callback would unenroll them, they would still be queued for timeout, and thus we needed to check their _idleTimeout property.",FALSE,TRUE,44,119,232,1,FALSE,TRUE,FALSE,TRUE,0,120,2
misterdjules,"Now with this PR even internal/unref timers call their _onTimeout callback as their list is processed, and so if one timer unenroll another, that other timer will be removed from the list and not processed. Thus its _onTimeout callback won't be called.",FALSE,TRUE,42,119,233,2,FALSE,TRUE,FALSE,TRUE,0,120,3
misterdjules,"So it seems that the comment at https://github.com/nodejs/node/pull/4007/files#diff-0a5d4868b2b9b17cf9e2c11f1bd1311eR130 about the listOnTimout loop timer being  too early  because of unenrolled timers is not accurate, and should be removed, because these unenrolled timers won't even be processed in this loop.",FALSE,TRUE,38,119,234,3,FALSE,FALSE,TRUE,TRUE,0,120,4
Fishrock123,"because we used to queue all internal/unref timers that need to timeout.",FALSE,TRUE,12,120,235,0,TRUE,FALSE,FALSE,TRUE,0,121,1
Fishrock123,"doh, that would make it necessary yes",FALSE,TRUE,7,120,236,1,TRUE,FALSE,FALSE,TRUE,0,121,2
Fishrock123,"So it seems that the comment at https://github.com/nodejs/node/pull/4007/files#diff-0a5d4868b2b9b17cf9e2c11f1bd1311eR130 about the listOnTimout loop timer being  too early  because of unenrolled timers is not accurate, and should be removed, because these unenrolled timers won't even be processed in this loop.",FALSE,TRUE,38,120,237,2,TRUE,FALSE,TRUE,TRUE,0,121,3
Fishrock123,"Yeah I caught that earlier but forgot to remove the comment. D:",FALSE,TRUE,12,120,238,3,TRUE,TRUE,FALSE,TRUE,0,121,4
Fishrock123,"Rebased & updated. I want to land this monday.",FALSE,TRUE,9,121,239,0,TRUE,TRUE,FALSE,TRUE,0,122,1
Fishrock123,"One problem: I think this leaks unreferenced handles...",FALSE,TRUE,8,122,240,0,TRUE,TRUE,FALSE,TRUE,0,123,1
Fishrock123,"For unenroll we don't really know which list it might be in. We could try both, but that results in a bunch of duplicated and hacky code.",FALSE,TRUE,27,122,241,1,TRUE,TRUE,FALSE,TRUE,0,123,2
Fishrock123,"Ok, update: This almost certainly does not leak handles, but it is definitely hacky either way.",FALSE,TRUE,16,123,242,0,TRUE,TRUE,FALSE,TRUE,0,124,1
Fishrock123,"Currently, if you unenroll the last timer in an unrefed list, the timer will be removed from the list but the list will stay alive until it times out (or the process exits), and once there immediately clean up since there are no timers. see ~https://github.com/nodejs/node/pull/4007/files#diff-0a5d4868b2b9b17cf9e2c11f1bd1311eR164",FALSE,TRUE,46,123,243,1,TRUE,FALSE,FALSE,TRUE,0,124,2
misterdjules,"Regardless of leaking anything, it seems that unenrolling an  internal  timer could close a  refed  timer, or am I missing something?",FALSE,TRUE,21,124,244,0,FALSE,TRUE,FALSE,TRUE,0,125,1
Fishrock123,"No, it will not: if (list && L.isEmpty(list)) { -- it will only clean it up if it is empty anyways. (In which case it would have already been cleaned up so that will never happen anyways as far as I can tell.)",FALSE,TRUE,43,125,245,0,TRUE,TRUE,FALSE,TRUE,0,126,1
Fishrock123,"Also, re-using only matters for refed timers as far as I can understand.",FALSE,TRUE,13,125,246,1,TRUE,TRUE,FALSE,TRUE,0,126,2
misterdjules,"OK, I initially thought that the following sample code:",FALSE,TRUE,9,126,247,0,FALSE,TRUE,FALSE,TRUE,0,127,1
misterdjules,"would stop (not close, sorry for the misunderstanding) the underlying TimerWrap instance for  external  timers with a 1000ms delay and not restart it.",FALSE,TRUE,23,126,248,1,FALSE,TRUE,FALSE,TRUE,0,127,2
misterdjules,"After double checking, you're right that it doesn't: the  external  timer is still stopped when calling unenroll on the  internal  timer, but it's restarted again on the second setTimeout call. I think it shows a problem in the way the unenroll API cannot distinguish between  internal  and  external  timers.",FALSE,TRUE,49,126,249,2,FALSE,TRUE,FALSE,TRUE,0,127,3
misterdjules,"The problem itself was was not introduced by this PR but since this PR is about refactoring/unifying internal/external timers and making the implementation clearer/more consistent, I'm wondering when would be a good time to think about fixing that problem.",FALSE,TRUE,39,126,250,3,FALSE,TRUE,FALSE,TRUE,0,127,4
misterdjules,"@Fishrock123 Did you manage to gather results from the tests you mentioned in https://github.com/nodejs/node/pull/4007/files#r49676629?",FALSE,TRUE,14,127,251,0,FALSE,TRUE,FALSE,TRUE,0,128,1
Fishrock123,"@misterdjules I think those were the ones I mentioned in #4007 (comment)",FALSE,TRUE,12,128,252,0,TRUE,TRUE,FALSE,TRUE,0,129,1
Fishrock123,"See https://github.com/Fishrock123/node-perf-results/blob/master/pr-4007/test4/test4.js",FALSE,TRUE,2,128,253,1,TRUE,FALSE,FALSE,TRUE,0,129,2
Fishrock123,"Lol so I just realized that no-one actually signed off on this. Does anyone on the CTC actually understand my changes enough to sign-off on this? (see the code comments?)",FALSE,TRUE,30,129,254,0,TRUE,TRUE,FALSE,TRUE,0,130,1
Fishrock123,"@misterdjules are you willing to sign off?",FALSE,TRUE,7,129,255,1,TRUE,FALSE,FALSE,TRUE,0,130,2
benjamingr,"I'm just wondering - are we actually sure that linked lists are faster than arrays here?",FALSE,FALSE,16,130,256,0,FALSE,TRUE,FALSE,TRUE,0,131,1
benjamingr,"Also, we're using objects for maps here - can we use maps? Is it slower?",FALSE,FALSE,15,130,257,1,FALSE,TRUE,FALSE,TRUE,0,131,2
Fishrock123,"I'm just wondering - are we actually sure that linked lists are faster than arrays here?",FALSE,TRUE,16,131,258,0,TRUE,TRUE,FALSE,TRUE,0,132,1
Fishrock123,"Quite sure. The linkedlist is guaranteed to have a constant-time removal from any position in the list. The linkedlist also forgoes potential issues with very large arrays that @bnoordhuis lined out somewhere previously.",FALSE,TRUE,33,131,259,1,TRUE,TRUE,FALSE,TRUE,0,132,2
Fishrock123,"Also, we're using objects for maps here - can we use maps? Is it slower?",FALSE,TRUE,15,131,260,2,TRUE,TRUE,FALSE,TRUE,0,132,3
Fishrock123,"Object maps have a faster access time, which is the common case. Maps do better if there are lots of deletions. The plan is to investigate this in a PR after this.",FALSE,TRUE,32,131,261,3,TRUE,TRUE,FALSE,TRUE,0,132,4
benjamingr,"Quite sure. The linkedlist is guaranteed to have a constant-time removal from any position in the list. The linkedlist also forgoes potential issues with very large arrays that @bnoordhuis lined out somewhere previously.",FALSE,FALSE,33,132,262,0,FALSE,TRUE,FALSE,TRUE,0,133,1
benjamingr,"Well, I'd assume removal would be be dominated by cache locality and not traversal - there are dozens of articles about it like https://www.youtube.com/watch?v=YQs6IC-vgmo , http://www.codeproject.com/Articles/340797/Number-crunching-Why-you-should-never-ever-EVER-us and http://highscalability.com/blog/2013/5/22/strategy-stop-using-linked-lists.html . I can find more if you'd like.",FALSE,FALSE,36,132,263,1,FALSE,TRUE,TRUE,TRUE,0,133,2
benjamingr,"I'm not sure if this is one of those relevant cases - but I think it should be worth exploring (not necessarily on this PR).",FALSE,FALSE,25,132,264,2,FALSE,TRUE,TRUE,TRUE,0,133,3
benjamingr,"Object maps have a faster access time, which is the common case. Maps do better if there are lots of deletions. The plan is to investigate this in a PR after this.",FALSE,FALSE,32,132,265,3,FALSE,TRUE,FALSE,TRUE,0,133,4
Fishrock123,"Arrays also mean you need to know which array it is from when unenrolling. That mean's we are going to have to do a check for both refed and unrefed lists. Also, you're going to have to do some sort of splicing. Not so efficient.",FALSE,TRUE,45,133,267,0,TRUE,TRUE,FALSE,TRUE,0,134,1
Fishrock123,"It may seem reasonable on the surface but knowing more about the internals I do not think that is a good use of my time. You are welcome to investigate it though. :)",FALSE,TRUE,33,133,268,1,TRUE,TRUE,FALSE,TRUE,0,134,2
chrisdickinson,"Signing up to review this. I've got a pretty decent understanding of how timers worked before and have been following this PR.",FALSE,TRUE,22,134,269,0,FALSE,TRUE,FALSE,TRUE,0,135,1
chrisdickinson,"On Feb 22, 2016, at 7:56 AM, Jeremiah Senkpiel notifications@github.com wrote:",FALSE,TRUE,11,134,270,1,FALSE,TRUE,FALSE,TRUE,0,135,2
chrisdickinson,"Lol so I just realized that no-one actually signed off on this. Does anyone on the CTC actually understand my changes enough to sign-off on this? (see the code comments?)",FALSE,TRUE,30,134,271,2,FALSE,TRUE,FALSE,TRUE,0,135,3
chrisdickinson,"@misterdjules are you willing to sign off?",FALSE,TRUE,7,134,272,3,FALSE,FALSE,FALSE,TRUE,0,135,4
chrisdickinson,"—Reply to this email directly or view it on GitHub.",FALSE,TRUE,10,134,273,4,FALSE,TRUE,FALSE,TRUE,0,135,5
bnoordhuis,"The linkedlist is guaranteed to have a constant-time removal from any position in the list.",FALSE,TRUE,15,135,274,0,FALSE,TRUE,FALSE,TRUE,0,136,1
bnoordhuis,"In theory, yes, but it depends on the shapes (the internal representation) of the objects in the linked list.  Property lookups can devolve to O(log n), possibly even O(n) in pathological cases, where n is the total number of properties in the object.",FALSE,TRUE,44,135,275,1,FALSE,TRUE,FALSE,TRUE,0,136,2
bnoordhuis,"Not that arrays necessarily perform better, they have similar issues.  In case of doubt: benchmark! :-)",FALSE,TRUE,17,135,276,2,FALSE,TRUE,FALSE,TRUE,0,136,3
misterdjules,"I would phrase it differently.",FALSE,TRUE,5,136,277,0,FALSE,TRUE,FALSE,TRUE,0,137,1
misterdjules,"The reason why the timers implementation need to perform well is that it's used internally to handle any http request/response or any TCP I/O, so it's always in the execution path for node programs that use at least one of these forms of I/O, and users can't opt out of that.",FALSE,TRUE,51,136,278,1,FALSE,TRUE,FALSE,TRUE,0,137,2
misterdjules,"Because it needs to be performant, and because there's potentially a very large number of timers involved in a node program at any given time, their implementation needs to be able to handle a large number of them in a way that performs well.",FALSE,TRUE,44,136,279,2,FALSE,FALSE,FALSE,TRUE,0,137,3
misterdjules,"If 1) wasn't true, it would still be nice to have timers perform well when there's a lot of them, but it wouldn't be as critical.",FALSE,TRUE,26,136,280,3,FALSE,FALSE,FALSE,TRUE,0,137,4
misterdjules," most JavaScript code  is a bit vague. The linked list implementation in lib/internal/linkedlist.js is actually quite similar to a lot of textbook linked lists implementations, with a few differences that can make it confusing.",FALSE,TRUE,34,137,281,0,FALSE,TRUE,FALSE,TRUE,0,138,1
misterdjules,"I would suggest removing the  to most JavaScript code  part, and maybe focus on making the lib/internal/linkedlist.js implementation easier to understand next (not necessarily as part of this PR). This shouldn't be too risky since it seems lib/timers.js is the only user of that (now internal) module.",FALSE,TRUE,47,137,282,1,FALSE,TRUE,TRUE,TRUE,0,138,2
Fishrock123,"Unfortunately, we still expose linkedlist, so I don't think that is possible.",FALSE,TRUE,12,138,283,0,TRUE,TRUE,FALSE,TRUE,0,139,1
Fishrock123,"I guess I could just clarify that the linkedlist impl is just helpers which operate on an object, rather than  a class itself.",FALSE,TRUE,24,138,284,1,TRUE,TRUE,FALSE,TRUE,0,139,2
misterdjules,"Unfortunately, we still expose linkedlist, so I don't think that is possible.",FALSE,TRUE,12,139,285,0,FALSE,TRUE,FALSE,TRUE,0,140,1
misterdjules,"Ah right, I had forgotten that there's still a public API for that, thanks!",FALSE,TRUE,14,139,286,1,FALSE,TRUE,FALSE,TRUE,0,140,2
misterdjules,"What I meant was  most JavaScript code  means different things to different people, so it doesn't necessarily help making the code easier to understand.",FALSE,TRUE,24,139,287,2,FALSE,TRUE,FALSE,TRUE,0,140,3
misterdjules,"I find this statement to be a bit vague too. Maybe something like:",FALSE,TRUE,13,140,288,0,FALSE,TRUE,FALSE,TRUE,0,141,1
misterdjules," In order to be as performant as possible, data structures are designed so that they are optimized to handle the following use cases as efficiently as possible:",FALSE,TRUE,27,140,289,1,FALSE,FALSE,FALSE,TRUE,0,141,2
misterdjules,"adding a new timer.",FALSE,TRUE,4,140,290,2,FALSE,FALSE,FALSE,TRUE,0,141,3
misterdjules,"removing an existing timer.",FALSE,TRUE,4,140,291,3,FALSE,FALSE,FALSE,TRUE,0,141,4
misterdjules,"handling a timer timing out.",FALSE,TRUE,5,140,292,4,FALSE,FALSE,FALSE,TRUE,0,141,5
misterdjules,"Whenever possible, the implementation tries to make the complexity of these operations sub-linear. ",FALSE,TRUE,13,140,293,5,FALSE,FALSE,FALSE,TRUE,0,141,6
misterdjules,"would be a bit more specific?",FALSE,TRUE,6,140,294,6,FALSE,FALSE,FALSE,TRUE,0,141,7
misterdjules,"Would an ASCII-art diagram help here?",FALSE,TRUE,6,141,295,0,FALSE,TRUE,FALSE,TRUE,0,142,1
Fishrock123,"Does https://github.com/nodejs/node/pull/4007/files#diff-0a5d4868b2b9b17cf9e2c11f1bd1311eR93 help?",FALSE,TRUE,3,142,296,0,TRUE,TRUE,FALSE,TRUE,0,143,1
Fishrock123,"I'm not very good at making ASCII art though.",FALSE,TRUE,9,142,297,1,TRUE,TRUE,FALSE,TRUE,0,143,2
misterdjules,"Does https://github.com/nodejs/node/pull/4007/files#diff-0a5d4868b2b9b17cf9e2c11f1bd1311eR93 help?",FALSE,TRUE,3,143,298,0,FALSE,TRUE,FALSE,TRUE,0,144,1
misterdjules,"That part of the code is clear, but if we want to have some kind of introduction to the timers module's data structures like this block of comments, then the comment you linked to is just too far below for someone to connect the dots.",FALSE,TRUE,45,143,299,1,FALSE,FALSE,FALSE,TRUE,0,144,2
misterdjules,"Maybe just describing the data structures in JavaScript would help clarify the prose?",FALSE,TRUE,13,143,300,2,FALSE,TRUE,FALSE,TRUE,0,144,3
Fishrock123,"Updated with an ASCII pseudo-code thing",FALSE,TRUE,6,144,301,0,TRUE,TRUE,FALSE,TRUE,0,145,1
misterdjules,"the TimerWrap's inherently faster libuv binding",FALSE,TRUE,6,145,302,0,FALSE,TRUE,FALSE,TRUE,0,146,1
misterdjules,"This seems a bit vague too, and maybe unnecessary to understand the implementation of this module. What is inherently faster more specifically, and does it really matter here?",FALSE,TRUE,28,145,303,1,FALSE,TRUE,FALSE,TRUE,0,146,2
Fishrock123,"Does  I don't know  count?",FALSE,TRUE,5,146,304,0,TRUE,TRUE,FALSE,TRUE,0,147,1
Fishrock123,"I'm actually not really sure other than basically everything we do does not appear to be influenced by how libuv does it's C timers architecture.",FALSE,TRUE,25,146,305,1,TRUE,TRUE,FALSE,TRUE,0,147,2
Fishrock123,"... That being said, Trevor recently tried to make each timer have it's own handle (i.e. it's own libuv timer), and reported that it was considerably less efficient.",FALSE,TRUE,28,146,306,2,TRUE,TRUE,FALSE,TRUE,0,147,3
Fishrock123,"As I worded it, this refers to the fact that libuv timers are in C and simply appear to run faster than any JS timers thing.",FALSE,TRUE,26,146,307,3,TRUE,TRUE,FALSE,TRUE,0,147,4
Fishrock123,"Did some research, libuv uses a heap implementation, i.e. O(log n). I can't comment on it too much since C is very foreign to me, but having a structure like we have ontop of it seems ideal.",FALSE,TRUE,37,147,308,0,TRUE,TRUE,FALSE,TRUE,0,148,1
Fishrock123,"Our implementation works out to being like a timer wheel, but I'm fairly certain it ends up being more efficient having a heap underneath than an actual timer wheel. (i.e. does not use an absurd amount of memory.) It is quite similar to stacked timer wheels.",FALSE,TRUE,46,147,309,1,TRUE,TRUE,FALSE,TRUE,0,148,2
Fishrock123,"Will update.",FALSE,TRUE,2,147,310,2,TRUE,FALSE,FALSE,TRUE,0,148,3
misterdjules,"My point was more that to me mentioning  inherently faster  doesn't necessarily make sense here because we're comparing apples to oranges, and doesn't seem to make the lib/timers.js implementation easier to understand.",FALSE,TRUE,32,148,311,0,FALSE,TRUE,FALSE,TRUE,0,149,1
misterdjules,"Nitpicking: in general comments are written above the code that they describe. Writing them after the code they mention can be confusing as it could suggest that they used to refer to code that has been deleted.",FALSE,TRUE,37,149,312,0,FALSE,TRUE,FALSE,TRUE,0,150,1
misterdjules,"I'm not sure I understand what:",FALSE,TRUE,6,150,313,0,FALSE,TRUE,FALSE,TRUE,0,151,1
misterdjules,"Using existing objects as timers slightly reduces object overhead.",FALSE,TRUE,9,150,314,1,FALSE,FALSE,FALSE,TRUE,0,151,2
misterdjules,"means. Do you mind giving more details?",FALSE,TRUE,7,150,315,2,FALSE,TRUE,FALSE,TRUE,0,151,3
Fishrock123,"i.e. re-use an existing object as a timer, like core does.",FALSE,TRUE,11,151,317,1,TRUE,FALSE,FALSE,TRUE,0,152,1
misterdjules,"Ah OK, it wasn't clear to me from the comments, but it might be clear for others. I would suggest rephrasing that as follows:",FALSE,TRUE,24,152,318,0,FALSE,TRUE,FALSE,TRUE,0,153,1
misterdjules,"Sets additional timer-specific properties on the object  item  itself rather than on a separate sub-object to avoid the overhead of an extra level of property access.",FALSE,TRUE,26,152,319,1,FALSE,FALSE,FALSE,TRUE,0,153,2
Fishrock123,"I'm not sure it's about property access (but rather the memory overhead of another layer of object), and I think that is probably less clear overall.",FALSE,TRUE,26,153,320,0,TRUE,TRUE,FALSE,TRUE,0,154,1
misterdjules,"@Fishrock123 I did another review pass, once again, thank you very much for doing this.",FALSE,TRUE,15,154,321,0,FALSE,TRUE,FALSE,TRUE,0,155,1
misterdjules,"I have another general comment, but it's not necessarily something we need to do in this PR, maybe something to think about for a follow-up PR.",FALSE,TRUE,26,154,322,1,FALSE,TRUE,FALSE,TRUE,0,155,2
misterdjules,"The implementation still uses the name  refd  (or  refed ) both for internal timers and for user created timers on which unref() was called. I find this confusing, as in the code  unrefed  (or  unrefd ) sometimes means  an internal timer , and sometimes  a user facing timer on which unref() was called . I would suggest not using the term  unref  to name  internal  timers, and instead consider the fact that we call unref() on these timers as an implementation detail.",FALSE,TRUE,78,154,323,2,FALSE,TRUE,FALSE,TRUE,0,155,3
misterdjules,"Maybe the name  internalTimer  would fit better? That would lead to renaming _unrefActive to _internalActive, etc.",FALSE,TRUE,16,154,324,3,FALSE,TRUE,FALSE,TRUE,0,155,4
misterdjules,"@misterdjules I think those were the ones I mentioned in #4007 (comment)",FALSE,TRUE,12,155,326,1,FALSE,TRUE,FALSE,TRUE,0,156,1
misterdjules,"See https://github.com/Fishrock123/node-perf-results/blob/master/pr-4007/test4/test4.js",FALSE,TRUE,2,155,327,2,FALSE,FALSE,FALSE,TRUE,0,156,2
misterdjules,"Would you mind commenting in test4.js what the goal/intention of this test/benchmark is? I have a bit of trouble figuring out what the intention was from the implementation. Also, the results seem to indicate that more CPU time is spent in the timers module when running this test with the changes in this PR, is that correct?",FALSE,TRUE,57,155,328,3,FALSE,TRUE,FALSE,TRUE,0,156,3
Fishrock123,"The implementation still uses the name  refd  (or  refed ) both for internal timers and for user created timers on which unref() was called. I find this confusing, as in the code  unrefed  (or  unrefd ) sometimes means  an internal timer , and sometimes  a user facing timer on which unref() was called . I would suggest not using the term  unref  to name  internal  timers, and instead consider the fact that we call unref() on these timers as an implementation detail.",FALSE,TRUE,78,156,329,0,TRUE,TRUE,FALSE,TRUE,0,157,1
Fishrock123,"My plan is to make unref() timers use this handle impl in a later PR, if that helps.",FALSE,TRUE,18,156,330,1,TRUE,TRUE,FALSE,TRUE,0,157,2
Fishrock123,"Would you mind commenting in test4.js what the goal/intention of this test/benchmark is? I have a bit of trouble figuring out what the intention was from the implementation. Also, the results seem to indicate that more CPU time is spent in the timers module when running this test with the changes in this PR, is that correct?",FALSE,TRUE,57,156,331,2,TRUE,TRUE,FALSE,TRUE,0,157,3
Fishrock123,"Yes, that is correct. It is a test of the absolute worst case I could possibly come up with. I do not expect one would ever see this in a user application. (If it does, one of two is true: it is either some sort of crazy neural network, or is is designed very poorly.)",FALSE,TRUE,55,156,332,3,TRUE,TRUE,FALSE,TRUE,0,157,4
Fishrock123,"The test originated off of some previous test I think, or something you asked me in the discussions above somewhere.",FALSE,TRUE,20,156,333,4,TRUE,TRUE,FALSE,TRUE,0,157,5
rvagg,"This LGTM, I'm keen to see it merged into master and start encouraging testing of it. I'm not sure I'm keen on pushing it to v5.x, certainly not v4.x as there's too much edge-case risk here. But @Fishrock123 what was the lts-agenda tag for? Are you thinking this should be backported?",FALSE,FALSE,51,157,334,0,FALSE,TRUE,TRUE,TRUE,0,158,1
rvagg,"When Jenkins is back up I'd like to see some smoke testing applied to this, pending that +1 from me for merge.",FALSE,FALSE,22,157,335,1,FALSE,TRUE,FALSE,TRUE,0,158,2
Fishrock123,"@rvagg it should be back-portable imo, I tagged it since no real discussion around lts was had for it yet.",FALSE,TRUE,20,158,336,0,TRUE,TRUE,TRUE,TRUE,0,159,1
Fishrock123,"I think there is far less edge-case risk here; the big thing seems to be that it will could change the profile of applications to some degree, although the net as indicated by the profiles is that it performs about the same in the common case.",FALSE,TRUE,46,158,337,1,TRUE,FALSE,FALSE,TRUE,0,159,2
Fishrock123,"Keep in mind that this isn't anything new per-se, it is reusing what already exists for user timers.",FALSE,TRUE,18,158,338,2,TRUE,FALSE,FALSE,TRUE,0,159,3
Fishrock123,"@misterdjules was working on those things right now, I updated, can you check them again? I haven't gotten to the first one yet though,",FALSE,TRUE,24,159,339,0,TRUE,TRUE,FALSE,TRUE,0,160,1
Fishrock123,"Ok so, node won't compile with the ascii diagram. :(",FALSE,TRUE,10,160,340,0,TRUE,TRUE,FALSE,TRUE,0,161,1
bnoordhuis,"#5418 allows UTF-8 in JS source files.  Diffs looks ugly though, when git diff prints such characters as <AB><CD><EF>.",FALSE,TRUE,20,161,341,0,FALSE,TRUE,FALSE,TRUE,0,162,1
Fishrock123,"@mscdex wait, I'm returning early here but there don't see to be any negative effects?",FALSE,TRUE,15,162,342,0,TRUE,TRUE,FALSE,TRUE,0,163,1
Fishrock123,"All tests pass and errors show up properly in the console..",FALSE,TRUE,11,163,343,0,TRUE,TRUE,FALSE,TRUE,0,164,1
mscdex,"That's expected because returning in the no exception case is fine, since there is no exception. If you had if (threw) return; that would be a different story.",FALSE,TRUE,28,165,344,0,FALSE,TRUE,FALSE,TRUE,0,166,1
trevnorris,"I forget, but have we done a perf comparison against Map? delete really bites in comparison.",FALSE,TRUE,16,166,345,0,FALSE,TRUE,FALSE,TRUE,0,167,1
Fishrock123,"See #4007 (comment) -- I have a bit, but not conclusively. I don't think it is worthwhile to do here, but I plan to investigate it after.",FALSE,TRUE,27,167,346,0,TRUE,TRUE,FALSE,TRUE,0,168,1
chrisdickinson,"Perhaps we could get the best of both worlds by tombstone-ing using null, keeping a count of tombstones, and copying when the number gets above a threshold to avoid reverting to slow-mode (512?) This might not be worthwhile given the numbers, though, and could be tested in a subsequent PR.",FALSE,TRUE,50,168,347,0,FALSE,TRUE,FALSE,TRUE,0,169,1
Fishrock123,"@bnoordhuis right; the diff looks a bit of a mess if your terminal is ASCII only, but the same thing would happen if you opened it it in an ASCII-only editor.",FALSE,TRUE,31,169,348,0,TRUE,TRUE,FALSE,TRUE,0,170,1
Fishrock123,"Is this much of an issue? Otherwise I can try to get the ascii versions of the characters, if anyone has any suggestions as to how.",FALSE,TRUE,26,169,349,1,TRUE,TRUE,FALSE,TRUE,0,170,2
Fishrock123,"Edit: Also rebased on master",FALSE,TRUE,5,169,350,2,TRUE,TRUE,FALSE,TRUE,0,170,3
Fishrock123,"@misterdjules I think I've addressed all of your comments.",FALSE,TRUE,9,170,351,0,TRUE,TRUE,FALSE,TRUE,0,171,1
chrisdickinson,"Silly question: would turning this into a constructor function make any difference (due to slot pre-allocation)?",FALSE,TRUE,16,171,352,0,FALSE,TRUE,FALSE,TRUE,0,172,1
Fishrock123,"@chrisdickinson hmmm, I figured that would already happen? If not, that is probably a better idea.",FALSE,TRUE,16,172,353,0,TRUE,TRUE,FALSE,TRUE,0,173,1
trevnorris,"It will add just a hair of performance (hence why I added TickObject in src/node.js).",FALSE,TRUE,15,173,354,0,FALSE,TRUE,FALSE,TRUE,0,174,1
Fishrock123,"Updated CI: https://ci.nodejs.org/job/node-test-pull-request/1753/",FALSE,TRUE,3,174,355,0,TRUE,TRUE,FALSE,TRUE,0,175,1
Fishrock123,"@thealphanerd maybe you could kick off a citgm run for this?",FALSE,TRUE,11,174,356,1,TRUE,FALSE,FALSE,TRUE,0,175,2
trevnorris,"This is a great code simplification, so as long as all tests are passing and performance hasn't dropped then LGTM.",FALSE,TRUE,20,175,357,0,FALSE,TRUE,FALSE,TRUE,0,176,1
Fishrock123,"@misterdjules / @chrisdickinson LGTY?",FALSE,TRUE,4,176,358,0,TRUE,TRUE,FALSE,TRUE,0,177,1
Fishrock123,"Updated CI: https://ci.nodejs.org/job/node-test-pull-request/1760/",FALSE,TRUE,3,177,359,0,TRUE,TRUE,FALSE,TRUE,0,178,1
Fishrock123,"Going to start working on squashed commits in a new branch so we can preserve the review history here.",FALSE,TRUE,19,177,360,1,TRUE,FALSE,FALSE,TRUE,0,178,2
Fishrock123,"Current commits squashed at https://github.com/Fishrock123/node/tree/refactor-timers-squash, CI is green, ready to land.",FALSE,TRUE,11,178,361,0,TRUE,TRUE,FALSE,TRUE,0,179,1
chrisdickinson,"@Fishrock123 Yep, excellent work. LGTM!",FALSE,TRUE,5,179,362,0,FALSE,TRUE,FALSE,TRUE,0,180,1
Fishrock123,"Thanks everyone, landed in 60f8c1a and 67963c8! 🎉",FALSE,TRUE,8,180,363,0,TRUE,TRUE,FALSE,TRUE,0,181,1
Fishrock123,"I'll address some of the other things next week in new issues/PRs",FALSE,TRUE,12,180,364,1,TRUE,FALSE,FALSE,TRUE,0,181,2
rvagg,"So good, well done on making it to landing @Fishrock123! I now crown you the new king of timers 👑, we know who to send people to when they have questions.",FALSE,TRUE,31,181,365,0,FALSE,TRUE,FALSE,TRUE,0,182,1
jasnell,"In generally I think this should actually be safe for both LTS and v5 but I'd like to see it sit for a bit to be sure there are no hidden regressions in here (there shouldn't be, I just prefer to be conservative about it).",FALSE,FALSE,45,182,366,0,FALSE,TRUE,TRUE,TRUE,0,183,1
jasnell,"oh, and yes, great job @Fishrock123 ... this is good stuff.",FALSE,FALSE,11,183,367,0,FALSE,FALSE,FALSE,TRUE,0,184,1
MylesBorins,"@Fishrock123 as v6 is getting quite close to becoming LTS I'm going to opt to keep these changes out of the v4 release line.",FALSE,FALSE,24,184,368,0,FALSE,TRUE,FALSE,TRUE,0,185,1
MylesBorins,"This is in no ways a final decision and if you believe they should land we should discuss it in the next LTS meeting. Thanks for the hard work on these changes!",FALSE,FALSE,32,184,369,1,FALSE,TRUE,TRUE,TRUE,0,185,2
Fishrock123,"@thealphanerd While this looks large, the impact on running programs is minimal but mostly positive.¯_(ツ)_/¯",FALSE,TRUE,15,185,370,0,TRUE,TRUE,FALSE,TRUE,0,186,1
MylesBorins,"@Fishrock123 would you be willing to open an issue on the LTS repo about the various timers changes for v4?",FALSE,FALSE,20,186,371,0,FALSE,TRUE,FALSE,TRUE,0,187,1
