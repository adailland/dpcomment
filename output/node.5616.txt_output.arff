% Generated by Discussion model node.5616.txt
% File generated on 2017/08/09 19:32:24

@relation pr1502321544931

@attribute author String
@attribute textual String
@attribute isProjectMember {TRUE, FALSE}
@attribute isInvited {TRUE, FALSE}
@attribute numberOfWords numeric
@attribute commentsSoFar numeric
@attribute allUtterancesSoFar numeric
@attribute utterancesInCommentSoFar numeric
@attribute utteredByOriginalPoster {TRUE, FALSE}
@attribute hasCapitalizedWord {TRUE, FALSE}
@attribute containsShould {TRUE, FALSE}
@attribute hasDecisions {TRUE, FALSE}
@attribute howManyDecisions numeric
@attribute idComment numeric
@attribute idPara numeric

@data
jasnell,"Pull Request check-list",FALSE,FALSE,3,0,0,0,TRUE,TRUE,FALSE,TRUE,0,1,1
jasnell,"Please make sure to review and check all of these items:",FALSE,FALSE,11,0,1,1,TRUE,FALSE,FALSE,TRUE,0,1,2
jasnell,"Does make -j8 test (UNIX) or vcbuild test nosign (Windows) pass withthis change (including linting)?",FALSE,FALSE,15,0,2,2,TRUE,FALSE,FALSE,TRUE,0,1,3
jasnell,"Is the commit message formatted according to [CONTRIBUTING.md][0]?",FALSE,FALSE,8,0,3,3,TRUE,FALSE,FALSE,TRUE,0,1,4
jasnell,"If this change fixes a bug (or a performance problem), is a regressiontest (or a benchmark) included?",FALSE,FALSE,17,0,4,4,TRUE,FALSE,FALSE,TRUE,0,1,5
jasnell,"Is a documentation update included (if this change modifiesexisting APIs, or introduces new ones)?",FALSE,FALSE,14,0,5,5,TRUE,TRUE,FALSE,TRUE,0,1,6
jasnell,"Affected core subsystem(s)",FALSE,FALSE,3,0,6,6,TRUE,FALSE,FALSE,TRUE,0,1,7
jasnell,"fs (/cc @trevnorris @bnoordhuis )",FALSE,FALSE,5,0,7,7,TRUE,FALSE,FALSE,TRUE,0,1,8
jasnell,"Description of change",FALSE,FALSE,3,0,8,8,TRUE,FALSE,FALSE,TRUE,0,1,9
jasnell,"Updated: Reworked the implementation based on @trevnorris feedback. This now does several things:",FALSE,FALSE,13,0,9,9,TRUE,TRUE,FALSE,TRUE,0,1,10
jasnell,"Buffer accepted as Path on all fs methods that accept a Path",FALSE,FALSE,12,0,10,10,TRUE,TRUE,FALSE,TRUE,0,1,11
jasnell,"{encoding: '...'} option accepted on fs.readdir, fs.readdirSync, fs.readlink, fs.readlinkSync, and fs.watch",FALSE,FALSE,11,0,11,11,TRUE,FALSE,FALSE,TRUE,0,1,12
jasnell,"Documentation updates",FALSE,FALSE,2,0,12,12,TRUE,FALSE,FALSE,TRUE,0,1,13
jasnell,"Fixes: #2088Ref: #3519See Also: #3401",FALSE,FALSE,5,0,13,13,TRUE,TRUE,FALSE,TRUE,0,1,14
jasnell,"CI: https://ci.nodejs.org/job/node-test-pull-request/1884/",FALSE,FALSE,2,1,14,0,TRUE,TRUE,FALSE,TRUE,0,2,1
jasnell,"Sigh... CI is red all over. Suspected as much. I'll fix up the test case. Definitely not ready to land yet.",FALSE,FALSE,21,2,15,0,TRUE,TRUE,FALSE,TRUE,0,3,1
silverwind,"I'd list the possible values, or link to some other place that has them.",FALSE,FALSE,14,3,17,1,FALSE,TRUE,FALSE,TRUE,0,4,1
seishun,"Why are you singling out fs.watch? Either add this option to every fs function, or don't add it anywhere.",FALSE,FALSE,19,4,19,1,FALSE,TRUE,FALSE,TRUE,0,5,1
bnoordhuis,"I agree with @seishun.  I think it should work like this:",FALSE,TRUE,12,5,20,0,FALSE,TRUE,TRUE,TRUE,0,6,1
bnoordhuis,"Functions that take path strings should also accept buffers.  Examples: fs.open, fs.stat.",FALSE,TRUE,13,5,22,2,FALSE,TRUE,TRUE,TRUE,0,6,2
bnoordhuis,"Functions that produce path strings should accept an encoding (and encoding='buffer' should produce buffers).  Examples: fs.watch, fs.readdir.",FALSE,TRUE,18,5,24,4,FALSE,TRUE,TRUE,TRUE,0,6,3
bnoordhuis,"Point 1 can be simulated using path = Buffer(path, encoding).toString('binary') so it's not strictly necessary.",FALSE,TRUE,15,5,26,6,FALSE,TRUE,FALSE,TRUE,0,6,4
jasnell,"New CI: https://ci.nodejs.org/job/node-test-pull-request/1889/",FALSE,FALSE,3,6,27,0,TRUE,TRUE,FALSE,TRUE,0,7,1
jasnell,"@seishun @bnoordhuis ... actually I've already starting looking at the expanded set. I definitely agree that we need to address them all but I'd like to separate it out across multiple PRs... or at least multiple commits within this PR.",FALSE,FALSE,40,6,28,1,TRUE,TRUE,FALSE,TRUE,0,7,2
jasnell,"@bnoordhuis ... on point 1... if path is passed as a Buffer then it would always be buf.toString('binary') internally?",FALSE,FALSE,19,7,30,1,TRUE,TRUE,FALSE,TRUE,0,8,1
jasnell,"Or is the encoding passed to toString() going to be dependent on OS platform?",FALSE,FALSE,14,7,32,3,TRUE,TRUE,FALSE,TRUE,0,8,2
jasnell,"@bnoordhuis @seishun ... ok, PTAL. Started moving this in the direction of rounding out the Buffer support for all of fs... still in a work in progress.",FALSE,FALSE,27,8,33,0,TRUE,TRUE,FALSE,TRUE,0,9,1
seishun,"I'm still curious to know what actual real-world problem this solves that #3401 doesn't.",FALSE,TRUE,14,9,34,0,FALSE,TRUE,FALSE,TRUE,0,10,1
jasnell,"@seishun ... as I understand it, #3401 assumes that the filenames are always utf8 which is not always the case. This approach, while a bit more complicated, provides quite a bit more flexibility and does not change the current default behavior the way #3401 would. Either way, I think I can live with either approach. I implemented this because the issue has been fairly long standing and an alternative fix hasn't yet landed.",FALSE,FALSE,73,10,36,1,TRUE,TRUE,FALSE,TRUE,0,11,1
jasnell,"One other point... even if we land #3401, there is still value, I think, in allowing a dev to specify which encoding they want the filename to be in at the API level.",FALSE,FALSE,33,11,38,1,TRUE,TRUE,FALSE,TRUE,0,12,1
seishun,"which is not always the case",FALSE,TRUE,6,12,39,0,FALSE,FALSE,FALSE,TRUE,0,13,1
seishun,"Is there evidence that this has ever not been the case for any Node.js user?",FALSE,TRUE,15,12,40,1,FALSE,TRUE,FALSE,TRUE,0,13,2
seishun,"and does not change the current default behavior the way #3401 would",FALSE,TRUE,12,12,41,2,FALSE,FALSE,FALSE,TRUE,0,13,3
seishun,"The default would need to change anyway, since currently fs.watch is inexplicably inconsistent with other fs functions.",FALSE,TRUE,17,12,43,4,FALSE,TRUE,FALSE,TRUE,0,13,4
jasnell,"Is there evidence that this has ever not been the case for any Node.js user?",FALSE,FALSE,15,13,44,0,TRUE,TRUE,FALSE,TRUE,0,14,1
jasnell,"Yes. See nodejs/node-v0.x-archive#2387 for example",FALSE,FALSE,5,13,45,1,TRUE,TRUE,FALSE,TRUE,0,14,2
jasnell,"What would likely be an even better fix would be to have readdir and watch not perform any decoding on the filename at all and instead have it return the filename as Buffer instances. Then in the fs code we can toString() as utf8 by default but allow the encoding option to override.",FALSE,FALSE,53,14,47,1,TRUE,TRUE,FALSE,TRUE,0,15,1
bjouhier,"It feels strange to expose filenames as buffers through the fs API.",FALSE,FALSE,12,15,49,1,FALSE,TRUE,FALSE,TRUE,0,16,1
bjouhier,"Conceptually, filenames are strings and code which uses the fs API should only see strings. If filenames are incorrectly decoded by specific calls (fs.watch), the problem should be fixed at the fs level or below, it should not surface above.",FALSE,FALSE,40,15,51,3,FALSE,TRUE,TRUE,TRUE,0,16,2
bjouhier,"Of course, this assumes that the fs layer can determine the encoding that the system is using. But if it cannot do it, why would the higher layers know better?",FALSE,FALSE,30,15,53,5,FALSE,TRUE,FALSE,TRUE,0,16,3
jasnell,"@bjouhier ... because on certain systems it's impossible to know for sure because filenames don't inherently have an encoding. They're just byte sequences. On such systems, the filenames aren't simply strings.",FALSE,FALSE,31,16,55,1,TRUE,TRUE,FALSE,TRUE,0,17,1
jasnell,"After talking it over with @trevnorris a bit, I'm going to back up and refactor this more. Will update when it's closer to being done!",FALSE,FALSE,25,17,56,0,TRUE,TRUE,FALSE,TRUE,0,18,1
trevnorris,"@bjouhier libuv can't make assumptions about the multi-byte-ness of the read filename. hence why:",FALSE,TRUE,14,18,58,1,FALSE,FALSE,FALSE,TRUE,0,19,1
trevnorris,"prints abÈ¢ instead of abȢ. meaning you'll have to do Buffer(filename, 'binary').toString() to get it back as expected anyway.",FALSE,TRUE,19,18,59,2,FALSE,TRUE,FALSE,TRUE,0,19,2
bjouhier,"@jasnell If filenames are just byte streams and the system does not impose their encoding then two applications that create files may assume different encodings. Then filenames created by app1 will look weird in app2, and vice versa. This is a mess and you need extra info (where?) to associate encodings with filenames.",FALSE,TRUE,53,19,61,1,FALSE,TRUE,FALSE,TRUE,0,20,1
bjouhier,"In OSX the encoding is imposed by the system (UTF8 encoding of unicode in fully decomposed form - which has its own problems BTW), so there is no ambiguity. Same story for Windows/NTFS (UTF16 pre-composed this time). Apparently the mess is on UNIX/Linux (I did not know it, just found out - http://unix.stackexchange.com/questions/39175/understanding-unix-file-name-encoding). Given that, yes, node should expose a buffer alternative, but for all fs calls, not just fs.watch.",FALSE,TRUE,70,19,63,3,FALSE,TRUE,TRUE,TRUE,0,20,2
seishun,"Yes. See nodejs/node-v0.x-archive#2387 for example",FALSE,TRUE,5,20,64,0,FALSE,TRUE,FALSE,TRUE,0,21,1
seishun,"It seems that user's filesystem is UTF-8 overall but has individual filenames encoded in a different encoding. I don't see how this PR would help them, unless they are going to use Buffers in all of fs API. In that case, I don't see any point in the encoding option - it's sufficient to just have a  Buffer/decode-UTF8  switch.",FALSE,TRUE,59,20,66,2,FALSE,TRUE,FALSE,TRUE,0,21,2
seishun,"because on certain systems it's impossible to know for sure because filenames don't inherently have an encoding. They're just byte sequences. On such systems, the filenames aren't simply strings.",FALSE,TRUE,29,20,67,3,FALSE,TRUE,FALSE,TRUE,0,21,3
seishun,"This is could be true only on Linux. On OS X, this API is completely useless, because filenames are guaranteed to be encoded in UTF-8. On Windows, it's effectively going to lie, because filenames are already decoded as UTF-16 and re-encoded as UTF-8 by libuv.",FALSE,TRUE,45,20,69,5,FALSE,TRUE,FALSE,TRUE,0,21,4
seishun,"Node.js shouldn't add APIs that only work on a single platform.",FALSE,TRUE,11,20,71,7,FALSE,TRUE,TRUE,TRUE,0,21,5
trevnorris,"On Windows, it's effectively going to lie, because filenames are already decoded as UTF-16 and re-encoded as UTF-8 by libuv.",FALSE,TRUE,20,21,72,0,FALSE,TRUE,FALSE,TRUE,0,22,1
trevnorris,"This is not true. libuv never makes assumptions about a filename. It simply returns the bit stream it was handed by the OS. For example:",FALSE,TRUE,25,21,74,2,FALSE,TRUE,FALSE,TRUE,0,22,2
trevnorris,"It's node that makes an assumption in that particular API.",FALSE,TRUE,10,21,77,5,FALSE,TRUE,FALSE,TRUE,0,22,3
jasnell,"@trevnorris @bnoordhuis @seishun @nodejs/ctc ... Ok, just pushed a significantly reworked update on this based on conversations with @trevnorris around the implementation. PTAL. @seishun, the reworked version assumes a default encoding of UTF8 so in the most common case, if encoding is not specified, filenames come through as UTF8.",FALSE,TRUE,49,22,78,0,TRUE,TRUE,FALSE,TRUE,0,23,1
jasnell,"Changing to semver-major since this includes changes to the error handling and default encoding for fs.watch results.",FALSE,TRUE,17,23,79,0,TRUE,TRUE,FALSE,TRUE,0,24,1
jasnell,"New CI: https://ci.nodejs.org/job/node-test-pull-request/1897/",FALSE,TRUE,3,24,80,0,TRUE,TRUE,FALSE,TRUE,0,25,1
seishun,"libuv never makes assumptions about a filename.",FALSE,TRUE,7,25,81,0,FALSE,FALSE,FALSE,TRUE,0,26,1
seishun,"It does on Windows. See here, for example.",FALSE,TRUE,8,25,83,2,FALSE,TRUE,FALSE,TRUE,0,26,2
jasnell,"hmm... quite a bit of red in the CI. Couple of odd errors to investigate.",FALSE,TRUE,15,26,84,0,TRUE,TRUE,FALSE,TRUE,0,27,1
jasnell,"Well, there are a number of quite odd issues happening in linux... Still chasing those down.",FALSE,TRUE,16,27,85,0,TRUE,TRUE,FALSE,TRUE,0,28,1
jasnell,"Sigh... turns out the  odd issues  ===  james' rusty C skills ... lol.",FALSE,TRUE,12,28,86,0,TRUE,TRUE,FALSE,TRUE,0,29,1
jasnell,"New CI: https://ci.nodejs.org/job/node-test-pull-request/1902/",FALSE,TRUE,3,29,87,0,TRUE,TRUE,FALSE,TRUE,0,30,1
trevnorris,"@seishun Heh. Ah yes, Windows the special snowflake. Thanks for pointing out that code. I don't usually venture into src/win/.",FALSE,TRUE,20,30,88,0,FALSE,TRUE,FALSE,TRUE,0,31,1
jasnell,"CI is green although I did have to exclude the new test case from BSD because it's not compatible with the way fs.watch is implemented on that platform.",FALSE,TRUE,28,31,89,0,TRUE,TRUE,FALSE,TRUE,0,32,1
jasnell,"@nodejs/ctc ... PTAL!",FALSE,TRUE,3,32,90,0,TRUE,TRUE,FALSE,TRUE,0,33,1
bnoordhuis,"On OS X, this API is completely useless, because filenames are guaranteed to be encoded in UTF-8.",FALSE,TRUE,17,33,91,0,FALSE,TRUE,FALSE,TRUE,0,34,1
bnoordhuis,"On a HFS+ mount.  Other file systems will use whatever encoding is applicable (think FAT32 on a USB stick.)",FALSE,TRUE,20,33,93,2,FALSE,TRUE,FALSE,TRUE,0,34,2
bnoordhuis,"{Boolean}, {Boolean} and {String}.",FALSE,TRUE,4,34,94,0,FALSE,FALSE,FALSE,TRUE,0,35,1
bnoordhuis,"I'd write it as options = options || {}, an explicit typeof check will do the wrong thing when options === null.",FALSE,TRUE,22,35,96,1,FALSE,TRUE,FALSE,TRUE,0,36,1
trevnorris,"In that case this should be attached as an else if to the above, but also if options is truthy wouldn't that also do the wrong thing? Or, guess since  everything's an object  means as long as the encoding property's defined then we shouldn't care. okay. that solution is cool.",FALSE,TRUE,50,36,98,1,FALSE,TRUE,TRUE,TRUE,0,37,1
bnoordhuis,"Unrelated change.",FALSE,TRUE,2,37,99,0,FALSE,TRUE,FALSE,TRUE,0,38,1
jasnell,"Well, it's unrelated to the Buffer / encoding change but given that the current error message is fairly useless when filename is not returned, it certainly seems worthwhile since I've got my hands in this code anyway.",FALSE,TRUE,37,38,100,0,TRUE,TRUE,FALSE,TRUE,0,39,1
trevnorris,"maybe just break it out into its own commit? May be small, but in case one needs to be rolled back for some unknown reason it won't affect the other.",FALSE,TRUE,30,39,101,0,FALSE,TRUE,FALSE,TRUE,0,40,1
jasnell,"this has been broken out into a separate commit along with many of the other non-directly related cleanups to fs.markdown that are included.",FALSE,TRUE,23,40,102,0,TRUE,FALSE,FALSE,TRUE,0,41,1
bnoordhuis,"Just for my understanding, this will render as Error watching <Buffer ..> for changes: when encoding == 'buffer'?",FALSE,TRUE,18,41,104,1,FALSE,TRUE,FALSE,TRUE,0,42,1
bnoordhuis,"C++-style comments?",FALSE,TRUE,2,42,105,0,FALSE,TRUE,FALSE,TRUE,0,43,1
bnoordhuis,"UV__ECHARSET is internal-ish.",FALSE,TRUE,3,43,106,0,FALSE,TRUE,FALSE,TRUE,0,44,1
bnoordhuis,"Cache the result of strlen(filename).",FALSE,TRUE,5,44,107,0,FALSE,TRUE,FALSE,TRUE,0,45,1
bnoordhuis,"Don't do this, it can fail on some architectures when filename is not aligned on a two-byte boundary.",FALSE,TRUE,18,45,109,1,FALSE,TRUE,FALSE,TRUE,0,46,1
bnoordhuis,"EDIT: Also, it violates strict aliasing, which is UB.",FALSE,TRUE,9,45,111,3,FALSE,TRUE,FALSE,TRUE,0,46,2
trevnorris,"@bnoordhuis how would we deal with the case where user says the filename is encoded in utf16le?",FALSE,TRUE,17,46,113,1,FALSE,FALSE,FALSE,TRUE,0,47,1
bnoordhuis,"Is there a need for a mutable dereference operator?",FALSE,TRUE,9,47,115,1,FALSE,TRUE,FALSE,TRUE,0,48,1
bnoordhuis,"Blank line.",FALSE,TRUE,2,48,116,0,FALSE,TRUE,FALSE,TRUE,0,49,1
bnoordhuis,"It's kind of meh that this class duplicates much of node::Utf8Value...",FALSE,TRUE,11,49,117,0,FALSE,TRUE,FALSE,TRUE,0,50,1
bnoordhuis,"Why calloc when you're going to overwrite it immediately anyway?",FALSE,TRUE,10,50,119,1,FALSE,TRUE,FALSE,TRUE,0,51,1
trevnorris,"think I had him do that. was being lazy with an example and called calloc instead of typing str_[n] = '\0';. since the string needs to be null-terminated.",FALSE,TRUE,28,51,121,1,FALSE,TRUE,FALSE,TRUE,0,52,1
trevnorris,"@jasnell I don't see where this memory is being free()'d?",FALSE,TRUE,10,52,123,1,FALSE,TRUE,FALSE,TRUE,0,53,1
trevnorris,"wait. nm. see it.",FALSE,TRUE,4,53,124,0,FALSE,FALSE,FALSE,TRUE,0,54,1
bnoordhuis,"Just curious, why are you using malloc/calloc instead of new char[]?",FALSE,TRUE,11,54,126,1,FALSE,TRUE,FALSE,TRUE,0,55,1
jasnell,"No reason other than the code for the Path class literally copies over andslightly modifies the code for node::Utf8Value, which uses malloc. I justdid exactly what it was doing.On Mar 14, 2016 10:59 AM,  Ben Noordhuis  notifications@github.com wrote:",FALSE,TRUE,38,55,128,1,TRUE,TRUE,FALSE,TRUE,0,56,1
jasnell,"In src/node_file.cc#5616 (comment):",FALSE,TRUE,3,55,129,2,TRUE,FALSE,FALSE,TRUE,0,56,2
jasnell,"length_ = string->WriteUtf8(str_, len, 0, flags);",FALSE,TRUE,6,55,130,3,TRUE,FALSE,FALSE,TRUE,0,56,3
jasnell,"str_[length_] = '\0';",FALSE,TRUE,3,55,131,4,TRUE,FALSE,FALSE,TRUE,0,56,4
jasnell,"} else if (Buffer::HasInstance(value)) {",FALSE,TRUE,5,55,132,5,TRUE,FALSE,FALSE,TRUE,0,56,5
jasnell,"size_t len = Buffer::Length(value) + 1;",FALSE,TRUE,6,55,133,6,TRUE,TRUE,FALSE,TRUE,0,56,6
jasnell,"if (len > sizeof(str_st_)) {",FALSE,TRUE,5,55,134,7,TRUE,FALSE,FALSE,TRUE,0,56,7
jasnell,"memcpy(str_, Buffer::Data(value), len);",FALSE,TRUE,3,55,136,9,TRUE,TRUE,FALSE,TRUE,0,56,8
jasnell,"length_ = len - 1;",FALSE,TRUE,5,55,137,10,TRUE,FALSE,FALSE,TRUE,0,56,9
jasnell,"str_[length_] = '\0';",FALSE,TRUE,3,55,138,11,TRUE,FALSE,FALSE,TRUE,0,56,10
jasnell,"} else {",FALSE,TRUE,3,55,139,12,TRUE,FALSE,FALSE,TRUE,0,56,11
jasnell,"fail_ = true;",FALSE,TRUE,3,55,140,13,TRUE,FALSE,FALSE,TRUE,0,56,12
jasnell,"Just curious, why are you using malloc/calloc instead of new char[]?",FALSE,TRUE,11,55,142,15,TRUE,FALSE,FALSE,TRUE,0,56,13
jasnell,"—Reply to this email directly or view it on GitHubhttps://github.com/nodejs/node/pull/5616/files#r56045911.",FALSE,TRUE,10,55,143,16,TRUE,TRUE,FALSE,TRUE,0,56,14
bnoordhuis,"No camelCase.",FALSE,TRUE,2,56,144,0,FALSE,TRUE,FALSE,TRUE,0,57,1
bnoordhuis,"The .As<Value>() looks superfluous.",FALSE,TRUE,4,57,145,0,FALSE,TRUE,FALSE,TRUE,0,58,1
bnoordhuis,"Same issues I pointed out elsewhere.",FALSE,TRUE,6,58,146,0,FALSE,TRUE,FALSE,TRUE,0,59,1
bnoordhuis,"Don't use UV__ECHARSET.",FALSE,TRUE,3,59,147,0,FALSE,TRUE,FALSE,TRUE,0,60,1
jasnell,"Is there a different error code you'd recommend?On Mar 14, 2016 11:01 AM,  Ben Noordhuis  notifications@github.com wrote:",FALSE,TRUE,17,60,149,1,TRUE,TRUE,FALSE,TRUE,0,61,1
jasnell,"In src/node_file.cc#5616 (comment):",FALSE,TRUE,3,60,150,2,TRUE,FALSE,FALSE,TRUE,0,61,2
jasnell,"@@ -201,8 +291,19 @@ static void After(uv_fs_t *req) {break;",FALSE,TRUE,9,60,151,3,TRUE,TRUE,FALSE,TRUE,0,61,3
jasnell,"Don't use UV__ECHARSET.",FALSE,TRUE,3,60,152,4,TRUE,TRUE,FALSE,TRUE,0,61,4
jasnell,"—Reply to this email directly or view it on GitHubhttps://github.com/nodejs/node/pull/5616/files#r56046516.",FALSE,TRUE,10,60,153,5,TRUE,TRUE,FALSE,TRUE,0,61,5
bnoordhuis,"Is there a reason you can't modify lib/fs.js so that the binding layer always gets called with the same number (and kinds) of arguments?",FALSE,TRUE,24,62,156,1,FALSE,TRUE,FALSE,TRUE,0,63,1
jasnell,"Would prefer that but wanted to avoid potential breakage if someone wasusing the binding directly... Despite that not being supported. If we don'tcare about that potential breakage then I'm happy to make that change.On Mar 14, 2016 11:04 AM,  Ben Noordhuis  notifications@github.com wrote:",FALSE,TRUE,43,63,159,2,TRUE,TRUE,FALSE,TRUE,0,64,1
jasnell,"In src/node_file.cc#5616 (comment):",FALSE,TRUE,3,63,160,3,TRUE,FALSE,FALSE,TRUE,0,64,2
jasnell,"Path path(env->isolate(), args[0]);",FALSE,TRUE,3,63,161,4,TRUE,FALSE,FALSE,TRUE,0,64,3
jasnell,"if (path.fail())",FALSE,TRUE,2,63,162,5,TRUE,FALSE,FALSE,TRUE,0,64,4
jasnell,"return TYPE_ERROR( path must be a string or Buffer );",FALSE,TRUE,8,63,163,6,TRUE,TRUE,FALSE,TRUE,0,64,5
jasnell,"enum encoding encoding = UTF8;",FALSE,TRUE,5,63,164,7,TRUE,TRUE,FALSE,TRUE,0,64,6
jasnell,"Local callback = Null(env->isolate());",FALSE,TRUE,4,63,165,8,TRUE,TRUE,FALSE,TRUE,0,64,7
jasnell,"if (args.Length() == 2) {",FALSE,TRUE,5,63,166,9,TRUE,FALSE,FALSE,TRUE,0,64,8
jasnell,"if (args[1]->IsObject()) {",FALSE,TRUE,3,63,167,10,TRUE,FALSE,FALSE,TRUE,0,64,9
jasnell,"} else if (args[1]->IsString()) {",FALSE,TRUE,5,63,168,11,TRUE,FALSE,FALSE,TRUE,0,64,10
jasnell,"} else if (args.Length() == 3) {",FALSE,TRUE,7,63,170,13,TRUE,FALSE,FALSE,TRUE,0,64,11
jasnell,"callback = args[2];",FALSE,TRUE,3,63,171,14,TRUE,FALSE,FALSE,TRUE,0,64,12
jasnell,"encoding = ParseEncoding(env->isolate(), args[1], UTF8);",FALSE,TRUE,5,63,172,15,TRUE,TRUE,FALSE,TRUE,0,64,13
jasnell,"Is there a reason you can't modify lib/fs.js so that the binding layeralways gets called with the same number (and kinds) of arguments?",FALSE,TRUE,23,63,174,17,TRUE,FALSE,FALSE,TRUE,0,64,14
jasnell,"—Reply to this email directly or view it on GitHubhttps://github.com/nodejs/node/pull/5616/files#r56047004.",FALSE,TRUE,10,63,175,18,TRUE,TRUE,FALSE,TRUE,0,64,15
trevnorris,"We've never guaranteed that the process won't abort if using process.binding directly. I'd say make it consistent in JS and add CHECK's here.",FALSE,TRUE,23,64,177,1,FALSE,TRUE,FALSE,TRUE,0,65,1
jasnell,"+1 will do this in the next round of edits",FALSE,TRUE,10,65,178,0,TRUE,FALSE,FALSE,TRUE,0,66,1
bnoordhuis,"Maybe (err) => { if (err) throw err; }?",FALSE,TRUE,9,67,180,0,FALSE,TRUE,FALSE,TRUE,0,68,1
trevnorris,"ditto hear as discussed in readdir.",FALSE,TRUE,6,68,181,0,FALSE,FALSE,FALSE,TRUE,0,69,1
trevnorris,"Don't you mean != UCS2? Because if encoding_ == UCS2 then should be making the call to StringBytes::Encode() where a uint16_t* is required. Which happens in the following else.",FALSE,TRUE,29,69,183,1,FALSE,TRUE,TRUE,TRUE,0,70,1
trevnorris,"wait. nm. didn't see it properly broken w/ line comments. I see what's happening.",FALSE,TRUE,14,70,184,0,FALSE,TRUE,FALSE,TRUE,0,71,1
jasnell,"@trevnorris @bnoordhuis ... updated! PTAL!",FALSE,TRUE,5,71,185,0,TRUE,TRUE,FALSE,TRUE,0,72,1
jasnell,"@bnoordhuis ... I did not change the use of UV__ECHARSET set because I'm not quite sure what to change it to.",FALSE,TRUE,21,72,187,1,TRUE,TRUE,FALSE,TRUE,0,73,1
ronkorving,"In the case of these events, how can I as a user predict whether it will be a string or Buffer?",FALSE,FALSE,21,73,189,1,FALSE,TRUE,FALSE,TRUE,0,74,1
jasnell,"It will only be a buffer if fs.watch is called with the encoding optionset to 'buffer'On Mar 17, 2016 8:53 PM,  Ron Korving  notifications@github.com wrote:",FALSE,TRUE,25,74,191,1,TRUE,TRUE,FALSE,TRUE,0,75,1
jasnell,"In doc/api/fs.markdown#5616 (comment):",FALSE,TRUE,3,74,192,2,TRUE,FALSE,FALSE,TRUE,0,75,2
jasnell,"@@ -101,7 +101,7 @@ Objects returned from fs.watch() are of this type.",FALSE,TRUE,12,74,193,3,TRUE,TRUE,FALSE,TRUE,0,75,3
jasnell,"Event: 'change'",FALSE,TRUE,2,74,194,4,TRUE,FALSE,FALSE,TRUE,0,75,4
jasnell,"event {String} The type of fs change-* filename {String} The filename that changed (if relevant/available)+* filename {String | Buffer} The filename that changed (if relevant/available)",FALSE,TRUE,25,74,195,5,TRUE,TRUE,FALSE,TRUE,0,75,5
jasnell,"In the case of these events, how can I as a user predict whether it willbe a string or Buffer?",FALSE,TRUE,20,74,196,6,TRUE,TRUE,FALSE,TRUE,0,75,6
jasnell,"—You are receiving this because you were mentioned.Reply to this email directly or view it on GitHubhttps://github.com/nodejs/node/pull/5616/files/9d5fe80af91605b9cb126abb0d8238749933f555#r56610752",FALSE,TRUE,17,74,197,7,TRUE,TRUE,FALSE,TRUE,0,75,7
ronkorving,"I hope that's clear enough (but it wasn't to me tbh)",FALSE,FALSE,11,75,198,0,FALSE,TRUE,FALSE,TRUE,0,76,1
jasnell,"I can clarify it further :-)",FALSE,TRUE,6,76,199,0,TRUE,TRUE,FALSE,TRUE,0,77,1
ronkorving,"This is great, thanks :)",FALSE,FALSE,5,77,200,0,FALSE,TRUE,FALSE,TRUE,0,78,1
ronkorving,"How can I predict this as a user? Do I need to add tests everywhere I want to use this property?",FALSE,FALSE,21,78,202,1,FALSE,TRUE,FALSE,TRUE,0,79,1
jasnell,"It's based on what you pass in to createReadStream/createWriteStream. If you pass a string, it'll be a string. If you pass a buffer it'll be a buffer.",FALSE,TRUE,27,79,204,1,TRUE,TRUE,FALSE,TRUE,0,80,1
seishun,"On a HFS+ mount. Other file systems will use whatever encoding is applicable (think FAT32 on a USB stick.)",FALSE,TRUE,19,80,206,1,FALSE,TRUE,FALSE,TRUE,0,81,1
seishun,"This is not true. fs.readdirSync has absolutely no issues with files on a FAT32 USB stick with non-ASCII names created on either Windows or OS X. Presumably filenames are transparently converted to UTF-8 by the filesystem driver.",FALSE,TRUE,37,80,208,3,FALSE,TRUE,FALSE,TRUE,0,81,2
bnoordhuis,"Okay, NFS then.",FALSE,TRUE,3,81,209,0,FALSE,TRUE,FALSE,TRUE,0,82,1
bnoordhuis,"(The FAT32 driver seems to be closed source so I can't verify if or when it transcodes, but on my MBA, it clearly doesn't handle all filenames.)",FALSE,TRUE,27,81,210,1,FALSE,TRUE,FALSE,TRUE,0,82,2
seishun,"Okay, NFS then.",FALSE,TRUE,3,82,211,0,FALSE,TRUE,FALSE,TRUE,0,83,1
seishun,"This seems very artificial. If someone uses a non-UTF-8 NFS and the driver doesn't convert the filenames, they won't even be able to properly use the terminal, not to mention any other programs that assume UTF-8.",FALSE,TRUE,36,82,213,2,FALSE,TRUE,FALSE,TRUE,0,83,2
seishun,"If we're going to add an API that only works on Linux (and OS X if you try hard enough), we should add an API that changes the  hidden file  attribute on Windows by the same token.",FALSE,TRUE,37,82,215,4,FALSE,TRUE,TRUE,TRUE,0,83,3
jasnell,"@bnoordhuis ... changed the code to use UV__EINVAL instead of UV__ECHARSET.@ronkorving ... updated the docs to clarify those few issuesSquashed and rebased on master. PTAL",FALSE,TRUE,25,83,216,0,TRUE,TRUE,FALSE,TRUE,0,84,1
trevnorris,"@seishun This presumption that Linux uses utf8 just isn't correct. Most applications default to interpret the byte sequence as utf8, but Linux makes no presumption about how to interpret the input. The application that does that.",FALSE,TRUE,36,84,218,1,FALSE,TRUE,FALSE,TRUE,0,85,1
trevnorris,"For example, if I switch my bash terminal to use ISO-8859-1 instead of UTF8 then do:",FALSE,TRUE,16,84,219,2,FALSE,TRUE,FALSE,TRUE,0,85,2
trevnorris,"But then if I switch my terminal back to utf8 encoding and run node:",FALSE,TRUE,14,84,220,3,FALSE,TRUE,FALSE,TRUE,0,85,3
trevnorris,"Here the filename was input as a valid ISO-8859-1 string, node decided to interpret it as UTF8. If I wanted to view the same characters that my previous terminal displayed it would be necessary to do Buffer(filename).toString('binary').",FALSE,TRUE,37,84,221,4,FALSE,TRUE,FALSE,TRUE,0,85,4
trevnorris,"You even pointed out that on windows libuv uses a utf16/utf8 converter because windows files aren't stored or returned as a utf8 byte-sequence. This may have been done originally for legacy compatibility (@piscisaureus probably knows more) so that when reading files from windows users didn't need to do Buffer(filename, 'utf16le').toString() every time.",FALSE,TRUE,52,84,222,5,FALSE,TRUE,FALSE,TRUE,0,85,5
trevnorris,"This concludes that libuv has an inconsistency in how system-returned filename byte-sequences are handled before passed on to the user, and that we cannot presume the byte-sequence is always utf8 encoded. Thus, allowing users the ability to retrieve the raw byte sequence is useful. If node desires to presume that all filenames will be encoded as utf8 then the issue should be brought up with libuv. So it can be enforced prior to node receiving the filename.",FALSE,TRUE,77,84,224,7,FALSE,TRUE,TRUE,TRUE,0,85,6
trevnorris,"If we're going to add an API that only works on Linux (and OS X if you try hard enough), we should add an API that changes the  hidden file  attribute on Windows by the same token.",FALSE,TRUE,37,84,225,8,FALSE,TRUE,TRUE,TRUE,0,85,7
trevnorris,"This presumes that an API exception is being made specifically for Linux, when in fact the exception has been made for Windows already. Following this logic libuv would then need to return the raw byte-sequence retrieved from Windows the same way it's done on every other supported system.",FALSE,TRUE,48,84,227,10,FALSE,TRUE,FALSE,TRUE,0,85,8
jasnell,"It should also be noted that the changes being proposed here do not special case any particular platform.  They change how the filename data is worked with after it is returned by libuv and can be used on every platform.",FALSE,TRUE,41,85,229,1,TRUE,TRUE,TRUE,TRUE,0,86,1
trevnorris,"@bnoordhuis Is it possible that reinterpret_cast<uintptr_t>(filename) % sizeof(uint16_t) != 0? If it is then we'd have to memcpy the filename into a uint16_t* before passing it along.",FALSE,TRUE,27,86,231,1,FALSE,TRUE,FALSE,TRUE,0,87,1
trevnorris,"This is a .cc file. Should be able to use using v8::Isolate at the top and not need to use the namespace prefix.",FALSE,TRUE,23,87,233,1,FALSE,TRUE,FALSE,TRUE,0,88,1
trevnorris,"CHECK_NE is only necessary if using malloc() et al. If new char can't allocate it will throw.",FALSE,TRUE,17,88,235,1,FALSE,TRUE,FALSE,TRUE,0,89,1
trevnorris,"You switched to using new char below. So this should be switched to use delete str_.",FALSE,TRUE,16,89,237,1,FALSE,TRUE,TRUE,TRUE,0,90,1
trevnorris,"@jasnell Finished next round of review.",FALSE,TRUE,6,90,238,0,FALSE,TRUE,FALSE,TRUE,0,91,1
seishun,"This presumption that Linux uses utf8 just isn't correct.",FALSE,TRUE,9,91,239,0,FALSE,TRUE,FALSE,TRUE,0,92,1
seishun,"I never argued that it is.",FALSE,TRUE,6,91,240,1,FALSE,FALSE,FALSE,TRUE,0,92,2
seishun,"If I wanted to view the same characters that my previous terminal displayed it would be necessary to do Buffer(filename).toString('binary').",FALSE,TRUE,20,91,241,2,FALSE,TRUE,FALSE,TRUE,0,92,3
seishun,"This isn't exactly relevant, but FYI this wouldn't work, since decoding as UTF-8 is lossy if the byte sequence isn't valid UTF-8.",FALSE,TRUE,22,91,242,3,FALSE,TRUE,FALSE,TRUE,0,92,4
seishun,"You even pointed out that on windows libuv uses a utf16/utf8 converter because windows files aren't stored or returned as a utf8 byte-sequence. This may have been done originally for legacy compatibility (@piscisaureus probably knows more) so that when reading files from windows users didn't need to do Buffer(filename, 'utf16le').toString() every time.",FALSE,TRUE,52,91,243,4,FALSE,TRUE,FALSE,TRUE,0,92,5
seishun,"You're conflating libuv and Node.js here. In libuv the conversion is presumably done for consistency because it assumes UTF-8 on Linux and OS X. Not doing the conversion would require the users of libuv to write platform-specific code when working with filenames, which would defeat the purpose of libuv (writing portable cross-platform code).",FALSE,TRUE,53,91,245,6,FALSE,TRUE,FALSE,TRUE,0,92,6
seishun,"If node desires to presume that all filenames will be encoded as utf8 then the issue should be brought up with libuv. So it can be enforced prior to node receiving the filename.",FALSE,TRUE,33,91,246,7,FALSE,TRUE,TRUE,TRUE,0,92,7
seishun,"If there is any issue with libuv, it's that it doesn't document the encoding of char * arguments in its API. Possibly because UTF-8 is implicitly assumed.",FALSE,TRUE,27,91,247,8,FALSE,TRUE,FALSE,TRUE,0,92,8
seishun,"Following this logic libuv would then need to return the raw byte-sequence retrieved from Windows the same way it's done on every other supported system.",FALSE,TRUE,25,91,248,9,FALSE,TRUE,FALSE,TRUE,0,92,9
seishun,"The purpose of this  inconsistency  is to abstract away platform differences and accept/return filenames in the same encoding regardless of the filesystem encoding. IMO libuv should just document that it assumes the filesystem is UTF-8 on Linux and OS X and UTF-16 on Windows (because Windows API allows one to create a filename consisting of an invalid 16-bit code unit sequence, too), and anything else follows the  garbage in - garbage out  principle.",FALSE,TRUE,73,91,250,11,FALSE,TRUE,TRUE,TRUE,0,92,10
trevnorris,"decoding as UTF-8 is lossy if the byte sequence isn't valid UTF-8.",FALSE,TRUE,12,92,251,0,FALSE,TRUE,FALSE,TRUE,0,93,1
trevnorris,"Ah yes. I forgot about 0da4c67 which replaces invalid UTF8. Though this also proves the point that it would be necessary to get the raw byte-sequence.",FALSE,TRUE,26,92,252,1,FALSE,TRUE,FALSE,TRUE,0,93,2
trevnorris,"You're conflating libuv and Node.js here. In libuv the conversion is presumably done for consistency because it assumes UTF-8 on Linux and OS X.",FALSE,TRUE,24,92,253,2,FALSE,TRUE,FALSE,TRUE,0,93,3
trevnorris,"You're assumption is that Windows makes the UTF8 conversion because libuv assumes all other file encodings will be UTF8. My point is that the conversion may have been added (only a possibility, hence why I referenced @piscisaureus's opinion) with node in mind and the fact it auto converts filenames to UTF8, and that it has no bearing on libuv's assumption that all *nix are UTF8 encoded.",FALSE,TRUE,66,92,255,4,FALSE,TRUE,FALSE,TRUE,0,93,4
trevnorris,"Possibly because UTF-8 is implicitly assumed.",FALSE,TRUE,6,92,256,5,FALSE,TRUE,FALSE,TRUE,0,93,5
trevnorris,"Again you're making the assumption that libuv does assume UTF8 based on the fact that Windows converts from UTF16. This is not a solid assumption to make. Especially since libuv does not in fact loosy convert invalid UTF8 byte sequences on all *nix. Instead it passes the raw sequence and expects the user to interpret as desired.",FALSE,TRUE,57,92,258,7,FALSE,TRUE,FALSE,TRUE,0,93,6
trevnorris,"and accept/return filenames in the same encoding regardless of the filesystem encoding.",FALSE,TRUE,12,92,259,8,FALSE,FALSE,FALSE,TRUE,0,93,7
trevnorris,"This is impossible to do. If fstab has mounted the drive using iocharset=koi8r libuv does not have the means to determine how to interpret the incoming byte stream.",FALSE,TRUE,28,92,261,10,FALSE,TRUE,FALSE,TRUE,0,93,8
trevnorris,"IMO libuv should just document that it assumes the filesystem is UTF-8 on Linux and OS X and UTF-16 on Windows",FALSE,TRUE,21,92,262,11,FALSE,TRUE,TRUE,TRUE,0,93,9
trevnorris,"As you've already stated, UTF8 is loosy. Meaning any filesystem encodings that aren't UTF8 can't be used by libuv. This seems self defeating.",FALSE,TRUE,23,92,264,13,FALSE,TRUE,FALSE,TRUE,0,93,10
jasnell,"@trevnorris ... updated! commits split and reworked the ucs2 bits. PTAL",FALSE,TRUE,11,93,265,0,TRUE,TRUE,FALSE,TRUE,0,94,1
ronkorving,"The encoding should be  buffer  all lowercase.",FALSE,TRUE,7,94,266,0,FALSE,TRUE,TRUE,TRUE,0,95,1
trevnorris,"Where we going to either error here or default back to UTF8? I feel like if the filename isn't dividable by 2 then we can assume the wrong file encoding was passed.",FALSE,TRUE,32,95,268,1,FALSE,TRUE,FALSE,TRUE,0,96,1
jasnell,"I'm good with a fallback to utf8. But that could mean some of the filenamesare returned as utf16le and others as utf8. That seems bad. I'm also goodwith a throw. Which is best?On Mar 18, 2016 11:20 PM,  Trevor Norris  notifications@github.com wrote:",FALSE,TRUE,42,96,271,2,TRUE,TRUE,FALSE,TRUE,0,97,1
jasnell,"In src/fs_event_wrap.cc#5616 (comment):",FALSE,TRUE,3,96,272,3,TRUE,FALSE,FALSE,TRUE,0,97,2
jasnell,"@@ -156,7 +160,36 @@ void FSEventWrap::OnEvent(uv_fs_event_t* handle, const char* filename,};",FALSE,TRUE,10,96,273,4,TRUE,TRUE,FALSE,TRUE,0,97,3
jasnell,"if (filename != nullptr) {",FALSE,TRUE,5,96,274,5,TRUE,FALSE,FALSE,TRUE,0,97,4
jasnell,"argv[2] = OneByteString(env->isolate(), filename);",FALSE,TRUE,4,96,275,6,TRUE,TRUE,FALSE,TRUE,0,97,5
jasnell,"size_t len = strlen(filename);",FALSE,TRUE,4,96,276,7,TRUE,FALSE,FALSE,TRUE,0,97,6
jasnell,"// If encoding is BUFFER, return a Buffer.",FALSE,TRUE,8,96,277,8,TRUE,TRUE,FALSE,TRUE,0,97,7
jasnell,"// If encoding is UCS2, attempt to decode as UCS2 or report an error.",FALSE,TRUE,14,96,278,9,TRUE,TRUE,FALSE,TRUE,0,97,8
jasnell,"// Otherwise, Encode as the requested type, with UTF8 as the fallback.",FALSE,TRUE,12,96,279,10,TRUE,TRUE,FALSE,TRUE,0,97,9
jasnell,"if (wrap->encoding_ == BUFFER) {",FALSE,TRUE,5,96,280,11,TRUE,TRUE,FALSE,TRUE,0,97,10
jasnell,"} else if (wrap->encoding_ == UCS2) {",FALSE,TRUE,7,96,281,12,TRUE,TRUE,FALSE,TRUE,0,97,11
jasnell,"Where we going to either error here or default back to UTF8? I feel likeif the filename isn't dividable by 2 then we can assume the wrong fileencoding was passed.",FALSE,TRUE,30,96,282,13,TRUE,TRUE,FALSE,TRUE,0,97,12
jasnell,"—You are receiving this because you were mentioned.Reply to this email directly or view it on GitHubhttps://github.com/nodejs/node/pull/5616/files/ea59f4e2203fd1db4cdd59db365d6f08e0874d89#r56744955",FALSE,TRUE,17,96,283,14,TRUE,TRUE,FALSE,TRUE,0,97,13
bnoordhuis,"I'd raise an error.  Silent fix-ups inevitably end in tears.",FALSE,TRUE,11,97,285,1,FALSE,TRUE,FALSE,TRUE,0,98,1
jasnell,"+1 to an error",FALSE,TRUE,4,98,286,0,TRUE,FALSE,FALSE,TRUE,0,99,1
trevnorris,"still have some namespacing left around.",FALSE,TRUE,6,99,287,0,FALSE,FALSE,FALSE,TRUE,0,100,1
trevnorris,"alignment of by a space.",FALSE,TRUE,5,100,288,0,FALSE,FALSE,FALSE,TRUE,0,101,1
trevnorris,"Also, is there any way the Path constructor and this can be combined into one?",FALSE,TRUE,15,101,290,1,FALSE,TRUE,FALSE,TRUE,0,102,1
bnoordhuis,"Agreed, this duplication is undesirable.",FALSE,TRUE,5,102,291,0,FALSE,TRUE,FALSE,TRUE,0,103,1
trevnorris,"@jasnell Now that you can write out byte sequences, it should be possible to test 'utf816le' encoding writing out using a Buffer like so: Buffer('\uD83D\uDC04', 'ucs2'). This would be a linux specific test.",FALSE,TRUE,33,103,293,1,FALSE,TRUE,TRUE,TRUE,0,104,1
bnoordhuis,"In libuv the conversion is presumably done for consistency because it assumes UTF-8 on Linux and OS X.",FALSE,TRUE,18,104,294,0,FALSE,TRUE,FALSE,TRUE,0,105,1
bnoordhuis,"No, no, no.  Libuv treats paths and filenames as byte arrays, no encoding assumed or implied.",FALSE,TRUE,17,104,296,2,FALSE,TRUE,FALSE,TRUE,0,105,2
bnoordhuis,"The reason libuv uses UTF-8 at the edges on Windows is because the NT APIs operate on UTF-16, a two-byte encoding; converting to and from UTF-8 keeps the public libuv API byte-oriented.  Whether that was a good design decision is a separate discussion but that's water under the bridge.",FALSE,TRUE,50,104,298,4,FALSE,TRUE,FALSE,TRUE,0,105,3
bnoordhuis,"You've added trailing whitespace in a few places in this file.",FALSE,TRUE,11,105,299,0,FALSE,TRUE,FALSE,TRUE,0,106,1
bnoordhuis,"This is unsound; filename doesn't have to be aligned on a two-byte boundary.  I'd write it like this:",FALSE,TRUE,19,106,301,1,FALSE,TRUE,FALSE,TRUE,0,107,1
bnoordhuis,"Swap hi and lo for LE encoding.  There are probably enough places where we do similar fix-ups that it pays to turn it into a helper function.",FALSE,TRUE,28,106,303,3,FALSE,TRUE,FALSE,TRUE,0,107,2
bnoordhuis,"EDIT: Apart from alignment issues, it's also UB because it violates strict aliasing.",FALSE,TRUE,13,106,305,5,FALSE,TRUE,FALSE,TRUE,0,107,3
seishun,"Meaning any filesystem encodings that aren't UTF8 can't be used by libuv. This seems self defeating.",FALSE,TRUE,16,108,307,0,FALSE,TRUE,FALSE,TRUE,0,109,1
seishun,"Again, I still haven't seen any examples of people using Node.js with filesystems being non-UTF-8. All I've seen is people having individual files with non-UTF-8 names. This makes it very unlikely that your described use case is anything close to common in libuv either. I don't see how not having an non-portable API, especially one that is only useful for 0.001% of users, is self-defeating for a cross-platform library.",FALSE,TRUE,69,108,309,2,FALSE,TRUE,FALSE,TRUE,0,109,2
bnoordhuis,"When does EncodeFilename() return v8::Null()?  It returns an empty handle on error, doesn't it?",FALSE,TRUE,15,109,311,1,FALSE,TRUE,FALSE,TRUE,0,110,1
jasnell,"@bnoordhuis ... excellent, thanks for the feedback. I'll rework it a bit more.",FALSE,TRUE,13,110,312,0,TRUE,TRUE,FALSE,TRUE,0,111,1
jasnell,"@bnoordhuis @trevnorris ... ok, another round of edits pushed. Still have a few more changes to make but hopefully this wraps up the ucs2 issues.",FALSE,TRUE,25,111,313,0,TRUE,TRUE,FALSE,TRUE,0,112,1
jasnell,"@trevnorris @bnoordhuis ... updated, PTAL. Refactored the implementation to address @bnoordhuis' feedback.New CI: https://ci.nodejs.org/job/node-test-pull-request/1987/",FALSE,TRUE,14,112,314,0,TRUE,TRUE,FALSE,TRUE,0,113,1
jasnell,"CI is green",FALSE,TRUE,3,113,315,0,TRUE,TRUE,FALSE,TRUE,0,114,1
bnoordhuis,"Can you remove the blank line?",FALSE,TRUE,6,114,316,0,FALSE,TRUE,FALSE,TRUE,0,115,1
bnoordhuis,"Just noting that the type checks for options will let through null, which will make options.encoding fail with a TypeError.  GIGO, IMO - I'll leave it up to you if you want to handle that.",FALSE,TRUE,36,116,319,1,FALSE,TRUE,FALSE,TRUE,0,117,1
jasnell,"The options = options || {} a few lines above should catch that.",FALSE,TRUE,13,117,321,1,TRUE,TRUE,TRUE,TRUE,0,118,1
bnoordhuis,"Suggestion: if encoding_ never changes, make it const.",FALSE,TRUE,8,118,323,1,FALSE,TRUE,FALSE,TRUE,0,119,1
bnoordhuis,"EDIT: Never mind, I see that it gets assigned after construction.",FALSE,TRUE,11,118,324,2,FALSE,TRUE,FALSE,TRUE,0,119,2
bnoordhuis,"Can you write this as static const char kErrMsg[] = ...?  Avoids the extra pointer indirection.  (Although it will probably get optimized away anyway but it's more obviously  right. )",FALSE,TRUE,31,119,326,1,FALSE,TRUE,FALSE,TRUE,0,120,1
bnoordhuis,"If possible, try assigning it in the constructor so you can make the field const.",FALSE,TRUE,15,120,328,1,FALSE,TRUE,FALSE,TRUE,0,121,1
bnoordhuis,"IMO, const int argc = .. is a better name for it.",FALSE,TRUE,12,121,330,1,FALSE,TRUE,FALSE,TRUE,0,122,1
bnoordhuis,"You can write this as enum encoding encoding = ParseEncoding(env->isolate(), args[1], UTF8); - ParseEncoding() returns the default encoding when second_arg->IsString() == false.",FALSE,TRUE,22,123,333,1,FALSE,TRUE,FALSE,TRUE,0,124,1
bnoordhuis,"The spaces in static_cast< Local<Value> > shouldn't be necessary in C++11.",FALSE,TRUE,11,126,336,0,FALSE,TRUE,TRUE,TRUE,0,127,1
jasnell,"In C++11 yes, but our linter complains because it interprets the final >> as an operator and expects spaces around it.",FALSE,TRUE,21,127,337,0,TRUE,TRUE,FALSE,TRUE,0,128,1
bnoordhuis,"Maybe add a comment explaining that UCS2 in node means UCS2LE.",FALSE,TRUE,11,128,339,1,FALSE,TRUE,FALSE,TRUE,0,129,1
bnoordhuis,"Does this have to be a macro?",FALSE,TRUE,7,129,341,1,FALSE,TRUE,FALSE,TRUE,0,130,1
jasnell,"nope.. will refactor",FALSE,TRUE,3,130,342,0,TRUE,FALSE,FALSE,TRUE,0,131,1
bnoordhuis,"Funny local variable name.",FALSE,TRUE,4,131,343,0,FALSE,TRUE,FALSE,TRUE,0,132,1
jasnell,"New CI: https://ci.nodejs.org/job/node-test-pull-request/1997/New CI: https://ci.nodejs.org/job/node-test-pull-request/1998/",FALSE,TRUE,5,132,344,0,TRUE,TRUE,FALSE,TRUE,0,133,1
jasnell,"@bnoordhuis ... CI is looking good with the latest updates. PTAL",FALSE,TRUE,11,133,345,0,TRUE,TRUE,FALSE,TRUE,0,134,1
bnoordhuis,"Maybe call it MakeUtf8String or something like that.  At call sites, it looks like a constructor now.",FALSE,TRUE,18,134,347,1,FALSE,TRUE,FALSE,TRUE,0,135,1
bnoordhuis,"LGTM with a suggestion.  I only looked at the last two commits this time.",FALSE,TRUE,15,135,348,0,FALSE,TRUE,FALSE,TRUE,0,136,1
jasnell,"+1 will make that edit.@nodejs/ctc ... I think this is ready to go, would appreciate additional eyes on it as it's a fairly significant change.",FALSE,TRUE,25,136,349,0,TRUE,TRUE,FALSE,TRUE,0,137,1
jasnell,"New CI before landing: https://ci.nodejs.org/job/node-test-pull-request/2068/",FALSE,TRUE,5,138,351,0,TRUE,TRUE,FALSE,TRUE,0,139,1
jasnell,"Landed in 4d4f353, 060e5f0, and 53a95a5",FALSE,TRUE,6,139,352,0,TRUE,TRUE,FALSE,TRUE,0,140,1
jasnell,"Thanks @trevnorris and @bnoordhuis !",FALSE,TRUE,5,140,353,0,TRUE,TRUE,FALSE,TRUE,0,141,1
