>>>jmccartie, Contributor

              
Friends don't let friends use INT as a primary key. 
— Schneems (
@schneems
) 
May 13, 2016


Summary

Per a conversation with @sgrif: changes default primary keys from Integer to BIGINT for both Postgresql and MySQL.  Leaves behavior alone for SQLite since this database does not provide support for BIGINT primary keys.


Other Information

;##D1 This required to also change foreign keys to bigints, affecting schema.rb
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
For obvious reasons, this also requires foreign keys to change from integer to bigints. As a result the test suite's schema.rb has been change in the necessary places.


I'll squash and add a CHANGELOG entry once the rest looks ok...

          
>>>rails-bot, Other

              
Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.


If any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.


This repository is being automatically checked for code quality issues using Code Climate. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.


Please see the contribution instructions for more information.

          
>>>sgrif, Member

;##D2 Will need to guarantee that 5.0 migrations do not change the primary key type
;##ROLE PM
;##INV T
;##FORM SOL
;##REL NEW
;##SEN NEU

We'll need to make sure that migrations written against 5.0 and later don't have the type of their primary key changed.

          
>>>jmccartie, Contributor

              
@sgrif Can you recommend a best-practice for ensuring that?  Have we done something like that in the past that I can learn from?

          
>>>sgrif, Member

              
https://github.com/rails/rails/blob/master/activerecord/lib/active_record/migration/compatibility.rb

          
>>>jmccartie, Contributor

              
@sgrif Thanks.

          
>>>jmccartie, Contributor

;##D3 Is it just override methos inside V5_0?
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D2
;##SEN NEU       
@sgrif So override the necessary methods inside class V5_0 ?
          
>>>rafaelfranca, Owner


              
This is a dup of #24962. While this implementation may be more complete it is really a bad OSS etiquette to finish other people PR without given them a chance to finish it or proper credits.


My recommendation:




pull #24962 commits in this PR.


Work on top of that commits



          
>>>jmccartie, Contributor

              
@rafaelfranca Ah - thanks for showing me that. I searched for open PR's, but that didn't turn up for me.


I work at Heroku with @rwz, so I'll cycle around with him and see if we can tag team this.

          
>>>rafaelfranca, Owner

              
👍

          
>>>jmccartie, Contributor

              
I've now entered into the 3rd layer of git rebase hell...

          
>>>rafaelfranca, Owner

              


I've now entered into the 3rd layer of git rebase hell...




lol. This is really tough.

          
>>>kaspth, Owner

              
r? @sgrif

          
>>>schneems, Member

              
Looks like tests are passing now

          
>>>Thread start

>>>sgrif, Member

;##D4 Is it possible to implement this as an adapter agnostic to handle MySQL?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL NEW
;##SEN NEU

This needs to handle MySQL as well. Is it possible for us to implement this in an adapter agnostic way?

      
>>>jmccartie, Contributor

        
Yeah, I can make that change.


On Thu, Aug 25, 2016 at 10:13 AM, Sean Griffin notifications@github.com
wrote:




In activerecord/lib/active_record/migration/compatibility.rb
#26266 (comment):




@@ -103,6 +103,16 @@ def index_name_for_remove(table_name, options = {})
end

































;##D5 Is it possible to implement this as an adapter agnostic to handle MySQL?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

This needs to handle MySQL as well. Is it possible for us to implement
this in an adapter agnostic way?


—
You are receiving this because you modified the open/close state.
Reply to this email directly, view it on GitHub
https://github.com/rails/rails/pull/26266/files/de485a4379a265218f1bbea900c08f45e39a93fd#r76285358,
or mute the thread
https://github.com/notifications/unsubscribe-auth/AAIJEYj45MhqMMLNBPIkwwMhoRSdHCBuks5qjc1DgaJpZM4JrgwZ
.



      


>>>Thread end

>>>jmccartie, Contributor

;##D6 It could be possible to move the logic into a default on each adapter
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SENNEU

@sgrif Added a test for MySQL compatibility. The logic still queues off the adapter name, though. We could move that logic into a default on each adapter, but then we have some sort of "legacy_primary_key" method on the adapter itself, which I liked much less than the ternary.


Thoughts?

          
>>>sgrif, Member

;##D7 What about making the pg adapter deal with it?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL REFR D6
;##SEN NEU

Can we just make the PG adapter do the right thing when the PK type is integer?

          
>>>jmccartie, Contributor

;##D8 Both adapters need the logic
;##ROLE OP
;##INV F
;##FORM SOL
;##REL REFR D7
;##SEN NEU       
@sgrif I'm not sure. Both adapters need the logic since we need to ensure MySQL uses integer (and not bigint) and Postgresql uses serial (and not bigserial)

          
>>>sgrif, Member

;##D9 What about just using :integer?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL REFR D8
;##SEN NEU
              
How about just :integer?


On Thu, Aug 25, 2016 at 11:04 PM Jon McCartie notifications@github.com
wrote:




@sgrif https://github.com/sgrif Something like this?


options[:id] ||= connection.class::LEGACY_PK_TYPE


—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#26266 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/ABdWK2-R2Rj-aRqV77WLaJaf0AC5MeBYks5qjlfYgaJpZM4JrgwZ
.



          
>>>jmccartie, Contributor

              
@sgrif


Because Postgresql needs serial, which is an ...





.... oh, right ... an integer.


Done.

          
>>>matthewd, Owner

              
Pulling over my concern from #24962 (comment):



;##D10 Forcing excplitic type delcaration on FKs will not work
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU

Forcing explicit type declarations on FKs is not going to fly, though... and migration versioning is not enough to solve that one for people who are upgrading: they're going to end up with some tables using int4 and some using int8 PKs.



          
>>>jmccartie, Contributor

;##D11 Would going the rails:upgrade path work?
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D10
;##SEN NEU
              
@matthewd I get that. Any idea on how to resolve that? Ditch it and go the rails:upgrade path like you suggested in #24962? Other?

          
>>>Thread start

>>>rafaelfranca, Owner

;##D12 Default NULL is invalid in MySQL 5.7
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
        
This should not have DEFAULT NULL. It is invalid in MySQL 5.7 #13247

      
>>>jmccartie, Contributor

        
Removed

      


>>>Thread end

>>>jmccartie, Contributor

              
Code Climate shows no issues: https://codeclimate.com/github/rails/rails/pull/26266




Passed — No new issues were found.




Anything else to do on this PR?

          
>>>sgrif, Member

              
I'll do a final review soon.

          
>>>jmccartie, Contributor

              
Thanks, Sean


On Wed, Sep 21, 2016 at 2:57 PM, Sean Griffin notifications@github.com
wrote:




I'll do a final review soon.


—
You are receiving this because you modified the open/close state.
Reply to this email directly, view it on GitHub
#26266 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AAIJETBVd8uZe-NLNpAlROxED9iUK9Bgks5qsahEgaJpZM4JrgwZ
.



          
>>>schneems, Member

;##D13 A complementary gem using errors or wanrs on keys might be better
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
              
What's the timeline on a review? I'm wondering if a complementary gem that errors or warns on keys used with serial instead of bigserial would be helpful. I'm not sure the best way to go about it though.

          
>>>sgrif, Member

;##D14 Is the foreign key type mismathc raised only by MySQL?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL NEW
;##SEN NEU

;##D15 Could the message also give a recommendation?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL NEW
;##SEN NEU
              
It looks like we're the foreign key type mismatch error is only raised for MySQL. Are PostgreSQL and SQLite fine with the mismatched types? (I'm sure we've already discussed that but I'm having a hard time remembering). We should add a test to ensure that the error is correctly raised. Could the message give a specific recommendation as well?

          
>>>jmccartie, Contributor

              
@sgrif   Thanks for having another look at this

;##D16 Is the foreign key type mismathc raised only by MySQL?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

It looks like we're the foreign key type mismatch error is only raised for MySQL. Are PostgreSQL and SQLite fine with the mismatched types?

;##D17 PG is fine and SQlit shouldn't have been touched
;##ROLE OP
;##INV F
;##FORM SOL
;##REL ELAB D16 
;##SEN NEU

It's been awhile, so I'll try to remember before jumping all the way back in.  If I remember, MySQL was the only one that freaked out -- thus all the workaround code for it.  PG is fine.  SQLite isn't being touched at all.

;##D18 Could the message also give a recommendation?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Could the message give a specific recommendation as well?




I think we spent quite a bit of time going around on the error message and landed where we did.  Happy to add more specificity if you have a suggestion?

          
>>>sgrif, Member

              
Something like


;##D19 A fix would be to replace the type of the column to integer
;##ROLE PM
;##INV T
;##FORM SOL
;##REL NEW
;##SEN NEU

To fix this, change the type of the #{column_name} column on #{child_table} to be :integer. (For example t.integer #{foreign_key_name}



          
>>>sgrif, Member

              
Other than the additional test this looks good. Once you've added a test (and updated the error message if you agree with my suggestion) can you squash and rebase this so I can merge?

          
>>>Thread start

>>>sgrif, Member

;##D20 Big integer is a better name since bigserial isn't a thing in MySQL
;##ROLE PM
;##INV T
;##FORM SOL
;##REL NEW
;##SEN NEU
        
We should say big integer since bigserial isn't a thing in MySQL and the serial aspect in postgres just means auto incrementing.

      


>>>Thread end

>>>jmccartie, Contributor

              
@sgrif


[ ] Once you've added a test  (skipped -- existing)
[x] and updated the error message if you agree with my suggestion
[x] can you squash and rebase this so I can merge?

          
>>>Thread start

>>>qrush, Contributor

        
This class name is misspelled - maybe meant PostgresqlLegacyMigrationTest?

      
>>>jmccartie, Contributor

        
Thanks @qrush  -- i'll make that change

      


>>>Thread end

>>>sgrif, Member

              
The test failures appear to be real

          
>>>matthewd, Owner

              
;##D21 Is the foreign key type mismathc raised only by MySQL?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL NEW
;##SEN NEU

Are PostgreSQL and SQLite fine with the mismatched types?

;##D22 Is postgres casting the value before hitting the index or casting the values?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL ELAB D21
;##SEN NEU

We probably covered this in previous discussion too, but I'll note that there's "fine" and then there's 'fine"... is PostgreSQL casting the searched-for value once before hitting the index (good), or casting the comparison values individually (potentially not so good)?

          
>>>Thread start

>>>matthewd, Owner

;##D23 An exception should not know how to parse a dbm's error message
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
        
I'm uncomfortable about teaching a generic-sounding exception (admittedly, currently only used by one in-tree adapter) how to parse a particular DBMS's error message... even before potential i18n gets involved.

      
>>>jmccartie, Contributor

;##D24 It was request to support the display of names in the error
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
        
I agree this is brittle.  The original implementation simply bubbled up the DBMS error, but this was added by request from Sean.  In order to display the column and table names from the error -- and provide the specific message that was requested -- this was the best way I could come up with.  I'm happy to back it out, but then need direction on the error message.

      
>>>jmccartie, Contributor

        
@matthewd


Personally, I'd prefer just this:





It gives plenty of context when message is passed in.


Current implementation:




Proposed:



      


>>>Thread end

>>>Thread start

>>>matthewd, Owner

        
Assuming ActiveRecord::Base.connection seems unfortunate too

      
>>>jmccartie, Contributor

;##D25 It could be removed if we switch to a generic error message
;##ROLE OP
;##INV T
;##FORM SOL
;##REL ELAB D24
;##SEN NEU
        
Agreed. This came along with the need to display the specific column and table names. This can be removed if we can agree on a more generic error message.

      
>>>sgrif, Member

;##D26 Would it be possible to just pass the connection to the constructor?
;##ROLE PM
;##INV T
;##FORM OPQ
;##REL REFR D25
;##SEN NEU
        
Can we just pass the connection into the constructor, or do this work in the connection that creates this object?

      
>>>jmccartie, Contributor

        
Can do...

      


>>>Thread end

>>>Thread start

>>>matthewd, Owner

        
@schneems convince me this belongs here?

      
>>>jmccartie, Contributor

        
I can remove this if it's a big deal...

      


>>>Thread end

>>>jmccartie, Contributor

              
@matthewd


;##D27 Is postgres casting the value before hitting the index or casting the values?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL ELAB D21
;##SEN NEU

PostgreSQL casting the searched-for value once before hitting the index (good), or casting the comparison values individually (potentially not so good)?




I don't have the PostgreSQL expertise to verify this. When verifying if PG cared, this is as far as I went:




Working on busted tests next...

          
>>>jmccartie, Contributor

              
@matthewd

;##D28 Is postgres casting the value before hitting the index or casting the values?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL ELAB D21
;##SEN NEU

is PostgreSQL casting the searched-for value once before hitting the index (good), or casting the comparison values individually (potentially not so good)?




I checked in with the PG team at Heroku and got this answer:

;##D29 It's casted once
;##ROLE OP
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU


It's casting it once, because int4 and int8 opclasses are members of the same opfamily. (That's the exact technical reason). Moreover, on little-endian systems, casting int4 to int8 is literally a no-op. But, as far as pg backwards compatibility goes, making things like int4 and int8 play nice together is something that has received a lot of thought...I don't foresee compatibility problems on the pg side.




Let me know if I need to get more info or if that's enough to suffice.

          
>>>jmccartie, Contributor

              
@matthewd I have a local commit ready that simplifies the error message in question.  Tests are passing now as well.


Just need to know if that's the direction we want to go -- it's backwards from the specificity that @sgrif asked for a few weeks ago

          
>>>Thread start

>>>kamipo, Member

;##D30 Shoudl test if the primary key is auto increment
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
        
Should test whether Compatibility::V5_0's primary key is auto increment (serial) or not.




      
>>>schneems, Member

;##D31 Why is the test needed?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL REFR D30
;##SEN NEU
        
I don't follow, why do we need to explicitly test the  creation?

      
>>>jmccartie, Contributor

;##D32 Do you want to test the creation or the increment?
;##ROLE PM
;##INV F
;##FORM OPQ
;##REL REFR D30
;##SEN NEU
        
@kamipo You want to test the creation?  or ensure it's auto-increment?

      
>>>kamipo, Member

;##D33 The implicit default should be auto numbered
;##ROLE PM
;##INV F
;##FORM SOL
;##REL ELAB D31
;##SEN  NEU
        
Primary key columns cannot be null. Therefore implicit default of primary key should be auto numbered I think. Currently looks like that Compatibility::V5_0's primary key default is not auto numbered.

      
>>>jmccartie, Contributor

        
@kamipo I've modified the create_table method to ensure the ID columns auto-increment. Added tests for both adapters as well.

      


>>>Thread end

>>>Thread start

>>>kamipo, Member

        
We can use col.serial?.
https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/column.rb

      
>>>jmccartie, Contributor

        
Great, thanks!

      


>>>Thread end

>>>jmccartie, Contributor

              
@sgrif I cannot reproduce the error from Travis locally.  Last attempt:  bundle exec rake db:mysql:rebuild && bundle exec rake mysql2:test


Passes in isolation also:




Any ideas or tips?

          
>>>sgrif, Member

              
Let's take a look tomorrow

          
>>>jmccartie, Contributor

              
@sgrif Looks like Code Climate is ok? https://codeclimate.com/github/rails/rails/builds/2672

          
>>>schneems, Member

              
Ping

          
>>>jmccartie, Contributor

              
@sgrif Ping.  I resolved the merge conflicts.  Should be all set.

          
>>>jmccartie, Contributor

              
@matthewd @sgriff Ping.  Left a comment here asking for clarification: #26266 (comment)

          
>>>jmccartie, Contributor

              
@matthewd @sgriff Ping. Left a comment here asking for clarification: #26266 (comment)

          
>>>sgrif, Member

              
Left a comment, but please don't repeatedly ping. We have a ton of notifications that we're going through, and this is already on our radar.

          
>>>sgrif, Member

              
Also you weren't even pinging the right user name. ;)

          
>>>jmccartie, Contributor

              
@sgrif Ack, sorry. 😞 Thanks for the reply.

          
>>>jmccartie, Contributor

              
@sgrif Flipped this to an else since the MySQL defaults seem to be good ones.  https://github.com/rails/rails/pull/26266/files#diff-2a8be25f82da6b3935cc6a41300a1b01

If those aren't good defaults -- and there aren't good ones for an else statements -- I can revert that and go back to looking at changing default_primary_key behavior.


Let me know. Thanks!

          
>>>Thread start

>>>sgrif, Member

        
git config --global core.autocrlf input


or just fix your editor ;P

      
>>>jmccartie, Contributor

        
@sgrif Made local change, thanks. Need to remove this change (somehow)?

      
>>>sgrif, Member

        
Just git checkout master on this file.

      
>>>jmccartie, Contributor

        
@sgrif You've made me facepalm twice today :)   Done.

      


>>>Thread end

>>>Thread start

>>>sgrif, Member

        
I don't think this is valid Ruby

      
>>>jmccartie, Contributor

        
@sgrif :facepalm:

      


>>>Thread end

>>>Thread start

>>>kamipo, Member

        
✂️

      


>>>Thread end

>>>Thread start

>>>kamipo, Member

        
This line overwites user provided primary key name. It is not needed.

      


>>>Thread end

>>>Thread start

>>>kamipo, Member

        
This else block is unexpected for sqlite3.



      


>>>Thread end

>>>jmccartie, Contributor

              
@kamipo Thanks for the feedback. I'll get those fixed

          
>>>jmccartie, Contributor

              
@kamipo Done. Let me know if the recent changes resolve the issues you pointed out.

          
>>>Thread start

>>>kamipo, Member

;##D34 options[:id] should be primary_key, :integer is not auto numbered
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
        
options[:id] should be :primary_key (should not be changed) for sqlite3.
:integer type is not auto numbered.

      
>>>matthewd, Owner

        
Can we improve things by making this:



;##D35 Can we leave the adapters to turn into the internal type?
;##ROLE OP
;##INV F
;##FORM OPQ
;##REL GEN D34
;##SEN NEU

... and then leave the SQlite and PostgreSQL adapters to turn that back into whatever internal type they need?

      
>>>matthewd, Owner

        
My theory here is that we'd be improving the underlying API, by better abstracting the DB-specific :serial etc., and then just using said newly-improved API for the compatibility layer.

      
>>>jmccartie, Contributor

        
👍🏼

      


>>>Thread end

>>>Thread start

>>>kamipo, Member

        
Simply super is enough.

      
>>>jmccartie, Contributor

        
👍🏼

      


>>>Thread end

>>>jmccartie, Contributor

              
@kamipo @matthewd Updated. Not a huge fan of the case statement, but feels better to me than abstracting overrides into the adapters for this logic. I hope this fits everyone's needs.


@kamipo  -- I also added a compatibility test for sqlite3 to make sure that it was covered here.

          
>>>jmccartie, Contributor

              
Codeclimate says failed, but looks to be passing...




          
>>>Thread start

>>>kamipo, Member

;##D36 primary_key? is a better method name for this
;##ROLE PM
;##INV F
;##FORM SOL
;##REL NEW
;##SEN NEU
Looks like that this method is primary_key?, not auto_increment?.

      


>>>Thread end

>>>Thread start

>>>kamipo, Member

        
Seems that it offences against Style/EmptyLines.
https://github.com/rails/rails/blob/master/.rubocop.yml#L27-L29

      


>>>Thread end

>>>jmccartie, Contributor

              
Updated.  Thanks @kamipo

          
>>>Thread start

>>>matthewd, Owner

        
ActiveRecord::Migration[5.0] (the real class is a hidden implementation detail, so best to stick to what users will do)

      
>>>jmccartie, Contributor

        
@matthewd Good catch. Updated. Thanks.

      


>>>Thread end

>>>metaskills, Contributor

              
Cool, thanks everyone. I'll make this happen in the SQL Server work.

          
>>>indirect, Member

;##D37 large BIGINT  cannot be represented a sa number in jS< this could force use to send them as string
;##ROLE PM
;##INV T
;##FORM SOL
;##REL NEW
;##SEN NEU
              
A tiny note of cautionary experience: BIGINT grows beyond the size that can be represented as a number in JavaScript. If you send IDs to any front-end code, this means you have to represent IDs as strings instead of numbers.


Lest anyone say this is not a real problem and no one needs to worry about it until later, here are two real-world examples of this problem off the top of my head: Twitter IDs, which was a multi-month agonizingly painful change, and last month at one of my consulting clients when a data migration that created just a few records with a randomly selected high IDs broke the entire production front-end JS app until they were deleted from the database.

          
>>>jonhue, edited

              
@jmccartie Do you need to do something special, in order to use BIGINT as primary key. I am using rails 5.1.beta1 and mysql2, but still my id's are regular 4 bit integers. -> #28386

          
>>>jmccartie, Contributor

              
@jonhue Hmmmm. I can look tomorrow. What version of MySQL?

          
>>>jmccartie, Contributor

              
@jonhue Ah! Looks like it was resolved in the other thread. 👍🏻

          
>>>jonhue, Other

              
@jmccartie It actually has not been resolved.
Or is it meant to only work for the migrations created with Rails 5.1?


Even if I change [5.0] to [5.1] ( in the migration files ), they'll still use regular integers.

          
>>>jmccartie, Contributor

              
@jonhue  So is this how I can reproduce: 1) Create and run a migration with 5.0, then 2) upgrade to Rails 5.1, 3) change migration to [5.1], then 4) observe primary keys are integer?

          
>>>jonhue, Other

              
@jmccartie That's right.

          
>>>jmccartie, Contributor

              
Following up here: #28386

          
>>>grosser, Contributor

              
loading my old schema now blows up because foreign keys don't match:




any way of reverting this default so I can upgrade and migrate after ?

          
>>>jmccartie, Contributor

              
@grosser You'll want to either 1) upgrade your existing columns, or 2) Change the migration to force an int primary key.
